import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Fields from './Fields';
import { StoreModel } from '../../../utils/model/common-model';
import { CONSTANTS } from '../../../utils/common/constants';

const mockStore = configureStore([]);

describe('Fields Component', () => {
  let store;

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [
          {
            stageId: CONSTANTS.STAGE_NAMES.BD_1,
            stageInfo: {
              applicants: [
                {
                  work_type_a_1: 'S001',
                  full_name_a_1: 'John Doe',
                  other_loans: 'N',
                  related_party: 'N',
                },
              ],
              products: [
                {
                  product_type: '1241',
                  campaign: 'HKBDC23PESTP10',
                },
              ],
              fieldMetaData: {
                data: {
                  stages: [
                    {
                      fields: [
                        {
                          field_set_name: 'Basic Information',
                          fields: [
                            {
                              logical_field_name: 'full_name',
                              mandatory: 'Yes',
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              },
            },
          },
        ],
        currentStage: CONSTANTS.STAGE_NAMES.BD_1,
        parentChildFields: {
          selectFields: [],
          addSelectFields: [],
          deleteSelectFields: [],
        },
        natureOfEmployeeField: {},
        conditionalFields: {
          newFields: {},
        },
        userInput: {
          applicants: [
            {
              work_type: 'S001',
              full_name: 'John Doe',
              other_loans: 'N',
              related_party: 'N',
            },
          ],
        },
        journeyType: 'ETC',
      },
      preApproval: {
        downloadPdfData: 'http://example.com/sample.pdf',
        formConfigmetaData: {},
      },
      fielderror: {
        mandatoryFields: [],
        error: [],
      },
      lov: {},
      urlParam: {
        resume: false,
      },
      error: {
        submit: false,
        exceptionList: [],
      },
      valueUpdate: {
        value: true,
        changesUpdate: {
          changes: false,
        },
      },
      continueBtnSlice: {
        continueEnable: true,
      },
    });
  });

  test('renders Fields component', () => {
    render(
      <Provider store={store}>
        <Fields fields={[]} confirmCheckboxStatus={jest.fn()} />
      </Provider>
    );

    expect(screen.getByText(/Basic Information/)).toBeInTheDocument();
  });

  test('handles form submission', async () => {
    render(
      <Provider store={store}>
        <Fields fields={[]} confirmCheckboxStatus={jest.fn()} />
      </Provider>
    );

    const submitButton = screen.getByRole('button', { name: /Continue/ });
    fireEvent.click(submitButton);

    await waitFor(() => {
      expect(store.getActions()).toContainEqual(
        expect.objectContaining({ type: 'stages/updateStageId' })
      );
    });
  });

  test('handles back button click', () => {
    render(
      <Provider store={store}>
        <Fields fields={[]} confirmCheckboxStatus={jest.fn()} />
      </Provider>
    );

    const backButton = screen.getByRole('button', { name: /Back/ });
    fireEvent.click(backButton);

    expect(store.getActions()).toContainEqual(
      expect.objectContaining({ type: 'stages/updateStageId' })
    );
  });

  test('handles checkbox status update', () => {
    render(
      <Provider store={store}>
        <Fields fields={[]} confirmCheckboxStatus={jest.fn()} />
      </Provider>
    );

    const checkbox = screen.getByRole('checkbox');
    fireEvent.click(checkbox);

    expect(store.getActions()).toContainEqual(
      expect.objectContaining({ type: 'stages/modifyStage' })
    );
  });

  test('handles field dispatch', () => {
    render(
      <Provider store={store}>
        <Fields fields={[]} confirmCheckboxStatus={jest.fn()} />
      </Provider>
    );

    const inputField = screen.getByRole('textbox');
    fireEvent.change(inputField, { target: { value: 'John Doe' } });

    expect(store.getActions()).toContainEqual(
      expect.objectContaining({ type: 'stages/modifyStage' })
    );
  });

  test('handles form validation', () => {
    render(
      <Provider store={store}>
        <Fields fields={[]} confirmCheckboxStatus={jest.fn()} />
      </Provider>
    );

    const form = screen.getByRole('form');
    fireEvent.submit(form);

    expect(store.getActions()).toContainEqual(
      expect.objectContaining({ type: 'fielderror/getFieldError' })
    );
  });

  test('handles scroll to bottom', () => {
    render(
      <Provider store={store}>
        <Fields fields={[]} confirmCheckboxStatus={jest.fn()} />
      </Provider>
    );

    const scrollableDiv = screen.getByTestId('scrollable-div');
    fireEvent.scroll(scrollableDiv, { target: { scrollY: 1000 } });

    expect(store.getActions()).toContainEqual(
      expect.objectContaining({ type: 'fielderror/getMandatoryFields' })
    );
  });

  test('handles PDF download', () => {
    render(
      <Provider store={store}>
        <Fields fields={[]} confirmCheckboxStatus={jest.fn()} />
      </Provider>
    );

    const downloadButton = screen.getByText(/Download PDF/);
    fireEvent.click(downloadButton);

    expect(store.getActions()).toContainEqual(
      expect.objectContaining({ type: 'preApproval/downloadPdfData' })
    );
  });

  test('handles PDF popup open and close', () => {
    render(
      <Provider store={store}>
        <Fields fields={[]} confirmCheckboxStatus={jest.fn()} />
      </Provider>
    );

    const viewPdfButton = screen.getByText(/View PDF/);
    fireEvent.click(viewPdfButton);

    expect(screen.getByText(/Close/)).toBeInTheDocument();

    const closeButton = screen.getByText(/Close/);
    fireEvent.click(closeButton);

    expect(screen.queryByText(/Close/)).not.toBeInTheDocument();
  });

  test('handles language-based text rendering', () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        ...store.getState().stages,
        stages: [
          {
            ...store.getState().stages.stages[0],
            stageInfo: {
              ...store.getState().stages.stages[0].stageInfo,
              applicants: [
                {
                  ...store.getState().stages.stages[0].stageInfo.applicants[0],
                  work_type_a_1: 'S001',
                  full_name_a_1: 'John Doe',
                  other_loans: 'N',
                  related_party: 'N',
                },
              ],
            },
          },
        ],
      },
    });

    render(
      <Provider store={store}>
        <Fields fields={[]} confirmCheckboxStatus={jest.fn()} />
      </Provider>
    );

    expect(screen.getByText(/Basic Information/)).toBeInTheDocument();
  });
});
