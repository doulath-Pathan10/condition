import PreApprovalUtil from './PreApprovalUtil';

describe('PreApprovalUtil', () => {
  beforeEach(() => {
    // Mock the store and other dependencies if necessary
    jest.mock('../../../utils/store/store', () => ({
      getState: jest.fn(),
    }));
  });

  describe('generateUUID', () => {
    it('should generate a UUID', () => {
      const uuid = PreApprovalUtil.generateUUID();
      expect(uuid).toBeDefined();
      expect(typeof uuid).toBe('string');
      expect(uuid.length).toBe(36); // UUIDs are 36 characters long
    });
  });

  describe('getSHA256Hash', () => {
    it('should generate a SHA-256 hash', async () => {
      const input = 'test input';
      const hash = await PreApprovalUtil.getSHA256Hash(input);
      expect(hash).toBeDefined();
      expect(typeof hash).toBe('string');
      expect(hash.length).toBe(64); // SHA-256 hashes are 64 characters long
    });
  });

  describe('stringToHash', () => {
    it('should convert a string to a hash', () => {
      const input = 'test string';
      const hash = PreApprovalUtil.stringToHash(input);
      expect(hash).toBeDefined();
      expect(typeof hash).toBe('number');
    });
  });

  describe('getFieldOnlyWithValue', () => {
    it('should return an array of fields with values', () => {
      const fields = PreApprovalUtil.getFieldOnlyWithValue();
      expect(fields).toEqual(['product_minimum']);
    });
  });

  describe('getApplicantFields', () => {
    it('should return an array of applicant fields', () => {
      const fields = PreApprovalUtil.getApplicantFields();
      expect(fields).toBeInstanceOf(Array);
      expect(fields.length).toBeGreaterThan(0);
    });
  });

  describe('getApplicationFields', () => {
    it('should return an array of application fields', () => {
      const fields = PreApprovalUtil.getApplicationFields();
      expect(fields).toEqual(['application_reference', 'cos_ref_number']);
    });
  });

  describe('getOfferFields', () => {
    it('should return an array of offer fields', () => {
      const fields = PreApprovalUtil.getOfferFields();
      expect(fields).toEqual([
        'offer_status',
        'approved_amount',
        'approved_amount_currency',
        'approved_tenor',
        'apr',
        'repaymentAmount',
        'flatRate',
        'bestOffer',
      ]);
    });
  });

  describe('getProductFields', () => {
    it('should return an array of product fields', () => {
      const fields = PreApprovalUtil.getProductFields();
      expect(fields).toEqual([
        'campaign',
        'product_category',
        'product_type',
        'product_minimum',
      ]);
    });
  });

  describe('getLovDescriptionFields', () => {
    it('should return an array of LOV description fields', () => {
      const fields = PreApprovalUtil.getLovDescriptionFields();
      expect(fields).toBeInstanceOf(Array);
    });
  });

  describe('securityCallDesider', () => {
    it('should handle bAuth type', () => {
      const result = PreApprovalUtil.securityCallDesider('bAuth', 'bauth_key', []);
      expect(result).toBeDefined();
    });

    it('should handle aAuth type', () => {
      const result = PreApprovalUtil.securityCallDesider('aAuth', '', []);
      expect(result).toBeDefined();
    });

    it('should handle pAuth type', () => {
      const result = PreApprovalUtil.securityCallDesider('pAuth', '', []);
      expect(result).toBeDefined();
    });

    it('should handle lAuth type', () => {
      const result = PreApprovalUtil.securityCallDesider('lAuth', 'lauth_key', []);
      expect(result).toBeDefined();
    });
  });

  describe('generateSecMd', () => {
    it('should generate security MD for bAuth', () => {
      const result = PreApprovalUtil.generateSecMd('bAuth', 'bauth_key', [], {}, []);
      expect(result).toBeDefined();
    });

    it('should generate security MD for aAuth', () => {
      const result = PreApprovalUtil.generateSecMd('aAuth', '', [], {}, []);
      expect(result).toBeDefined();
    });

    it('should generate security MD for pAuth', () => {
      const result = PreApprovalUtil.generateSecMd('pAuth', '', [], {}, []);
      expect(result).toBeDefined();
    });

    it('should generate security MD for lAuth', () => {
      const result = PreApprovalUtil.generateSecMd('lAuth', 'lauth_key', [], {}, []);
      expect(result).toBeDefined();
    });
  });

  describe('getBAuth', () => {
    it('should return bAuth hash', async () => {
      const result = await PreApprovalUtil.getBAuth();
      expect(result).toBeDefined();
    });
  });

  describe('getAAuth', () => {
    it('should return aAuth hash', async () => {
      const result = await PreApprovalUtil.getAAuth();
      expect(result).toBeDefined();
    });
  });

  describe('getPAuth', () => {
    it('should return pAuth hash', async () => {
      const result = await PreApprovalUtil.getPAuth();
      expect(result).toBeDefined();
    });
  });

  describe('getLAuth', () => {
    it('should return lAuth hash', async () => {
      const result = await PreApprovalUtil.getLAuth();
      expect(result).toBeDefined();
    });
  });

  describe('getAckMetaData', () => {
    it('should return ack metadata', () => {
      const result = PreApprovalUtil.getAckMetaData('channelReference');
      expect(result).toBeDefined();
    });
  });

  describe('getAckMetaDataStageLevel', () => {
    it('should return ack metadata for stage level', async () => {
      const result = await PreApprovalUtil.getAckMetaDataStageLevel('channelReference');
      expect(result).toBeDefined();
    });
  });

  describe('getADFormConfigPayload', () => {
    it('should return AD form config payload', () => {
      const result = PreApprovalUtil.getADFormConfigPayload();
      expect(result).toBeDefined();
    });
  });

  describe('getFormConfigPayload', () => {
    it('should return form config payload', () => {
      const result = PreApprovalUtil.getFormConfigPayload();
      expect(result).toBeDefined();
    });
  });
});
