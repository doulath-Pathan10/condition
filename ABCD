import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import LoanDisbursement from './LoanDisbursement';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import axios from 'axios';

jest.mock('axios');

const mockStore = configureStore([]);

describe('LoanDisbursement Component', () => {
  let store;

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [
          {
            stageInfo: {
              products: [
                {
                  offer_details: [
                    {
                      approved_amount: '10000',
                      approved_tenor: '12',
                      apr: '5',
                      flatRate: '2',
                      repaymentAmount: '500',
                      offer_status: '1001',
                      bestOffer: 'N',
                    },
                  ],
                  product_category: 'PL',
                },
              ],
            },
          },
        ],
      },
    });
  });

  test('renders LoanDisbursement component', () => {
    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    expect(screen.getByText(/Congratulations!/i)).toBeInTheDocument();
  });

  test('handles input change', () => {
    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    const input = screen.getByLabelText(/Loan Amount/i);
    fireEvent.change(input, { target: { value: '20000' } });

    expect(input.value).toBe('20000');
  });

  test('handles month change', () => {
    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    const select = screen.getByLabelText(/Tenor & Monthly Repayment/i);
    fireEvent.change(select, { target: { value: '24' } });

    expect(select.value).toBe('24');
  });

  test('calculates offer on month change', async () => {
    axios.get.mockResolvedValueOnce({
      status: 200,
      data: {
        apr: '6',
        monthly_flat_rate: '3',
        repayment_amount: '600',
      },
    });

    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    const select = screen.getByLabelText(/Tenor & Monthly Repayment/i);
    fireEvent.change(select, { target: { value: '24' } });

    await waitFor(() => {
      expect(screen.getByText(/6%/i)).toBeInTheDocument();
      expect(screen.getByText(/3%/i)).toBeInTheDocument();
      expect(screen.getByText(/600/i)).toBeInTheDocument();
    });
  });

  test('navigates to next stage', async () => {
    axios.post.mockResolvedValueOnce({
      status: 200,
      data: {
        application: {
          response_type: 'INFO',
          response_action: 'CONTINUE',
        },
        products: [
          {
            offer_details: [
              {
                offer_status: '1001',
              },
            ],
          },
        ],
      },
    });

    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    const button = screen.getByText(/Confirm to Proceed/i);
    fireEvent.click(button);

    await waitFor(() => {
      expect(axios.post).toHaveBeenCalledTimes(1);
    });
  });

  test('renders language specific content', () => {
    store = mockStore({
      stages: {
        stages: [
          {
            stageInfo: {
              products: [
                {
                  offer_details: [
                    {
                      approved_amount: '10000',
                      approved_tenor: '12',
                      apr: '5',
                      flatRate: '2',
                      repaymentAmount: '500',
                      offer_status: '1001',
                      bestOffer: 'N',
                    },
                  ],
                  product_category: 'PL',
                },
              ],
            },
          },
        ],
      },
    });

    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    expect(screen.getByText(/Congratulations!/i)).toBeInTheDocument();
  });
});
