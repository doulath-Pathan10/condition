To write test cases for the `LoanDisbursement` component using React and Jest, we need to cover various aspects of the component, including rendering, user interactions, state changes, and API calls. We will use `jest` and `@testing-library/react` for testing. Additionally, we will mock API calls using `jest.mock` and `axios-mock-adapter`.

Hereâ€™s how you can write the test cases:

### 1. Setup Dependencies

Make sure you have the following dependencies installed:

```bash
npm install --save-dev @testing-library/react @testing-library/jest-dom jest axios-mock-adapter
```

### 2. Create the Test File

Create a file named `LoanDisbursement.test.tsx` in the same directory as your component.

### 3. Write Test Cases

```tsx
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import LoanDisbursement from './LoanDisbursement';
import axios from 'axios';
import MockAdapter from 'axios-mock-adapter';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import { StoreModel } from '../../../../utils/model/common-model';
import { preApprovalAction } from '../../store/preApproval-slice';
import { stagesAction } from '../../../../utils/store/stages-slice';
import { CONSTANTS } from '../../../../utils/common/constants';

// Mock the store
const mockStore = configureStore([]);
const store = mockStore({
  stages: {
    stages: [
      {
        stageInfo: {
          products: [
            {
              product_category: 'PL',
              offer_details: [
                {
                  approved_amount: 10000,
                  approved_tenor: 12,
                  apr: 5,
                  flatRate: 2,
                  repaymentAmount: 1000,
                  offer_status: '1001',
                  bestOffer: 'N',
                },
                {
                  approved_amount: 20000,
                  approved_tenor: 24,
                  apr: 6,
                  flatRate: 3,
                  repaymentAmount: 2000,
                  offer_status: '1002',
                  bestOffer: 'Y',
                },
              ],
            },
          ],
        },
      },
    ],
  },
});

// Mock axios
const mockAxios = new MockAdapter(axios);

describe('LoanDisbursement Component', () => {
  beforeEach(() => {
    mockAxios.reset();
    store.clearActions();
  });

  it('renders without crashing', () => {
    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );
    expect(screen.getByText('Congratulations!')).toBeInTheDocument();
  });

  it('displays the correct initial values', () => {
    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );
    expect(screen.getByText('HKD 10000')).toBeInTheDocument();
    expect(screen.getByText('12 Months')).toBeInTheDocument();
  });

  it('updates the loan amount when the slider is changed', () => {
    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );
    const slider = screen.getByRole('slider');
    fireEvent.change(slider, { target: { value: 15000 } });
    expect(screen.getByText('HKD 15000')).toBeInTheDocument();
  });

  it('updates the loan tenor when a different tenor is selected', () => {
    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );
    const tenorButton = screen.getByText('24 Months');
    fireEvent.click(tenorButton);
    expect(screen.getByText('24 Months')).toBeInTheDocument();
  });

  it('calls the API when the loan amount or tenor is changed', async () => {
    mockAxios.onPost('/api/getOfferCalulated').reply(200, {
      apr: 5,
      monthly_flat_rate: 2,
      repayment_amount: 1000,
    });

    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    const slider = screen.getByRole('slider');
    fireEvent.change(slider, { target: { value: 15000 } });

    await waitFor(() => {
      expect(mockAxios.history.post.length).toBe(1);
      expect(screen.getByText('5%')).toBeInTheDocument();
    });
  });

  it('handles API errors gracefully', async () => {
    mockAxios.onPost('/api/getOfferCalulated').reply(500);

    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    const slider = screen.getByRole('slider');
    fireEvent.change(slider, { target: { value: 15000 } });

    await waitFor(() => {
      expect(mockAxios.history.post.length).toBe(1);
      expect(screen.getByText('Error occurred')).toBeInTheDocument();
    });
  });

  it('navigates to the next stage when the continue button is clicked', async () => {
    mockAxios.onPost('/api/getOffer2').reply(200, {
      status: 200,
      data: {
        application: {
          response_type: 'INFO',
          response_action: 'SUCCESS',
        },
        products: [
          {
            offer_details: [
              {
                offer_status: '1001',
              },
            ],
          },
        ],
      },
    });

    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    const continueButton = screen.getByText('Continue');
    fireEvent.click(continueButton);

    await waitFor(() => {
      expect(store.getActions()).toContainEqual(
        stagesAction.updateStageId(CONSTANTS.STAGE_NAMES.ACD_4)
      );
    });
  });
});
```

### 4. Explanation of Test Cases

1. **Rendering Test**: Ensures the component renders without crashing and displays the correct initial values.
2. **Slider Interaction Test**: Checks if the loan amount updates when the slider is changed.
3. **Tenor Selection Test**: Verifies that the loan tenor updates when a different tenor is selected.
4. **API Call Test**: Ensures the API is called when the loan amount or tenor is changed and updates the UI accordingly.
5. **API Error Handling Test**: Checks if the component handles API errors gracefully.
6. **Navigation Test**: Verifies that the component navigates to the next stage when the continue button is clicked.

### 5. Running the Tests

Run the tests using the following command:

```bash
npm test
```

This will execute all the test cases and provide coverage information. You can also generate a coverage report by running:

```bash
npm test -- --coverage
```

This will give you a detailed report of the code coverage, helping you identify any untested branches or lines in your component.
