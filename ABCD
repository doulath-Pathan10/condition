import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import InfoTooltips from './InfoTooltips';
import Model from '../model/model';
import { CONSTANTS } from '../../../utils/common/constants';
import { getUrl } from '../../../utils/common/change.utils';

// Mock the Model component
jest.mock('../model/model', () => (props) => (
  <div data-testid="model">
    <div>{props.body_content}</div>
    <button onClick={props.closePopup}>{props.btnTxt}</button>
  </div>
));

// Mock the getUrl.getLanguageInfo function
jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn(),
  },
}));

describe('InfoTooltips', () => {
  const props = {
    infoTooltips: 'This is a tooltip content',
  };

  beforeEach(() => {
    getUrl.getLanguageInfo.mockClear();
  });

  test('renders the tooltip icon correctly', () => {
    render(<InfoTooltips {...props} />);
    const tooltipIcon = screen.getByRole('button', { name: /tool-tip__icon/i });
    expect(tooltipIcon).toBeInTheDocument();
  });

  test('opens the popup when the tooltip icon is clicked', () => {
    render(<InfoTooltips {...props} />);
    const tooltipIcon = screen.getByRole('button', { name: /tool-tip__icon/i });
    fireEvent.click(tooltipIcon);
    const model = screen.getByTestId('model');
    expect(model).toBeInTheDocument();
  });

  test('closes the popup when the close button is clicked', () => {
    render(<InfoTooltips {...props} />);
    const tooltipIcon = screen.getByRole('button', { name: /tool-tip__icon/i });
    fireEvent.click(tooltipIcon);
    const closeButton = screen.getByRole('button', { name: CONSTANTS.OK });
    fireEvent.click(closeButton);
    const model = screen.queryByTestId('model');
    expect(model).not.toBeInTheDocument();
  });

  test('renders the correct language text for the button based on the language', () => {
    getUrl.getLanguageInfo.mockReturnValue(CONSTANTS.LANG_CN);
    render(<InfoTooltips {...props} />);
    const tooltipIcon = screen.getByRole('button', { name: /tool-tip__icon/i });
    fireEvent.click(tooltipIcon);
    const closeButton = screen.getByRole('button', { name: CONSTANTS.OK_CN });
    expect(closeButton).toBeInTheDocument();
  });

  test('renders the correct content inside the popup', () => {
    render(<InfoTooltips {...props} />);
    const tooltipIcon = screen.getByRole('button', { name: /tool-tip__icon/i });
    fireEvent.click(tooltipIcon);
    const content = screen.getByText(props.infoTooltips);
    expect(content).toBeInTheDocument();
  });
});
