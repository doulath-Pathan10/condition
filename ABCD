import React from 'react';
import { render, fireEvent, screen } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import DocumentTypeDynamic from './DocumentTypeDynamic';
import { StoreModel } from '../../../../../utils/model/common-model';
import { stagesAction } from '../../../../../utils/store/stages-slice';
import { errorAction } from '../../../../../utils/store/error-slice';
import { postQRCodeZOLO } from '../../../services/preApprovalPostServices';
import ColorIdentityProof from '../colourIdentityProof/colour-Identity-Proof';
import DocumentUpload from '../documentUpload/document-upload';

const mockStore = configureStore([]);

describe('DocumentTypeDynamic Component', () => {
  let store: any;
  let props: any;

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [{
          stageInfo: {
            application: { channel_reference: 'test-ref' },
            applicant_documents: [{
              document_list: [
                {
                  document_category: 'Test Document',
                  document_category_code: 'R0001',
                  document_options: [{
                    document_types: [{
                      uploaded_documents: null
                    }]
                  }]
                }
              ]
            }]
          }
        }],
        dynamicDocumentsUpload: {
          fileSectionData: null,
          HKIDVersionValue: '1'
        }
      }
    });

    props = {
      setShowContinueBtn: jest.fn(),
      setHKIDVersion: jest.fn(),
      HKIDVersion: '1',
      setHKIDQRCodeData: jest.fn()
    };
  });

  it('renders without crashing', () => {
    render(
      <Provider store={store}>
        <DocumentTypeDynamic {...props} />
      </Provider>
    );
    expect(screen.getByText('Test Document')).toBeInTheDocument();
  });

  it('renders ColorIdentityProof when fileSectionData is R0001', () => {
    store = mockStore({
      stages: {
        stages: [{
          stageInfo: {
            application: { channel_reference: 'test-ref' },
            applicant_documents: [{
              document_list: [
                {
                  document_category: 'Test Document',
                  document_category_code: 'R0001',
                  document_options: [{
                    document_types: [{
                      uploaded_documents: null
                    }]
                  }]
                }
              ]
            }]
          }
        }],
        dynamicDocumentsUpload: {
          fileSectionData: {
            document_category_code: 'R0001'
          },
          HKIDVersionValue: '1'
        }
      }
    });

    render(
      <Provider store={store}>
        <DocumentTypeDynamic {...props} />
      </Provider>
    );

    expect(screen.getByTestId('color-identity-proof')).toBeInTheDocument();
  });

  it('renders DocumentUpload when fileSectionData is not R0001', () => {
    store = mockStore({
      stages: {
        stages: [{
          stageInfo: {
            application: { channel_reference: 'test-ref' },
            applicant_documents: [{
              document_list: [
                {
                  document_category: 'Test Document',
                  document_category_code: 'R0002',
                  document_options: [{
                    document_types: [{
                      uploaded_documents: null
                    }]
                  }]
                }
              ]
            }]
          }
        }],
        dynamicDocumentsUpload: {
          fileSectionData: {
            document_category_code: 'R0002'
          },
          HKIDVersionValue: '1'
        }
      }
    });

    render(
      <Provider store={store}>
        <DocumentTypeDynamic {...props} />
      </Provider>
    );

    expect(screen.getByTestId('document-upload')).toBeInTheDocument();
  });

  it('calls dispatchLoader and postQRCodeZOLO on callQRCodeAPI', async () => {
    const mockPostQRCodeZOLO = jest.spyOn(postQRCodeZOLO, 'then');
    render(
      <Provider store={store}>
        <DocumentTypeDynamic {...props} />
      </Provider>
    );

    const colorIdentityProof = screen.getByTestId('color-identity-proof');
    fireEvent.click(colorIdentityProof);

    await waitFor(() => {
      expect(mockPostQRCodeZOLO).toHaveBeenCalled();
    });
  });

  it('dispatches errorAction on API failure', async () => {
    const mockPostQRCodeZOLO = jest.spyOn(postQRCodeZOLO, 'catch');
    render(
      <Provider store={store}>
        <DocumentTypeDynamic {...props} />
      </Provider>
    );

    const colorIdentityProof = screen.getByTestId('color-identity-proof');
    fireEvent.click(colorIdentityProof);

    await waitFor(() => {
      expect(mockPostQRCodeZOLO).toHaveBeenCalled();
    });
  });

  it('updates fileSectionData on document category click', () => {
    render(
      <Provider store={store}>
        <DocumentTypeDynamic {...props} />
      </Provider>
    );

    const documentCategory = screen.getByText('Test Document');
    fireEvent.click(documentCategory);

    expect(store.getActions()).toContainEqual(stagesAction.updatefileSectionData({
      document_category: 'Test Document',
      document_category_code: 'R0001',
      document_options: [{
        document_types: [{
          uploaded_documents: null
        }]
      }]
    }));
  });
});
