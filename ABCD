import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import OnboardingBeforeStart from './onboarding-before-start';
import * as preApprovalServices from '../../services/preApprovalServices';
import * as changeUtils from '../../../../utils/common/change.utils';
import { CONSTANTS } from '../../../../utils/common/constants';
import { preApprovalAction } from '../../store/preApproval-slice';

// Mock the modules
jest.mock('../../services/preApprovalServices');
jest.mock('../../../../utils/common/change.utils');
jest.mock('../../../../shared/components/pdf/pdf', () => {
  return function MockPdf() {
    return <div data-testid="mock-pdf">PDF Content</div>;
  };
});
jest.mock('../../../../shared/components/spinner/spinner', () => {
  return function MockSpinner() {
    return <div data-testid="mock-spinner">Loading...</div>;
  };
});

// Mock the PDF files
jest.mock('../../../../assets/pdf-file/PIL/hk-personal-loan-terms-pil-aug09.pdf', () => 'mocked-pil-pdf-1');
jest.mock('../../../../assets/pdf-file/PIL/hk-gn175.pdf', () => 'mocked-pil-pdf-2');
jest.mock('../../../../assets/pdf-file/PIL/hk-loans-personal-instalment-loan-eng.pdf', () => 'mocked-pil-pdf-3');
jest.mock('../../../../assets/pdf-file/CC/hk-gn175.pdf', () => 'mocked-cc-pdf-1');
jest.mock('../../../../assets/pdf-file/CC/hk-gn177.pdf', () => 'mocked-cc-pdf-2');
jest.mock('../../../../assets/pdf-file/CC/hk-cc-tncs-downloadnow.pdf', () => 'mocked-cc-pdf-3');
jest.mock('../../../../assets/pdf-file/CC/e-statement-en.pdf', () => 'mocked-cc-pdf-4');
jest.mock('../../../../assets/pdf-file/CC/hk-rewards-tncs-en.pdf', () => 'mocked-cc-pdf-5');
jest.mock('../../../../assets/pdf-file/CC/hk-tnc-credit-card-instalment-plan-en.pdf', () => 'mocked-cc-pdf-6');

describe('OnboardingBeforeStart Component', () => {
  const middlewares = [thunk];
  const mockStore = configureStore(middlewares);
  const mockDispatch = jest.fn();
  const mockOnScrollEnd = jest.fn();
  const mockNextPage = jest.fn();
  
  let store;
  let originalLocation;
  
  beforeEach(() => {
    jest.clearAllMocks();
    
    // Mock Redux store
    store = mockStore({
      stages: {
        stages: [
          {
            stageInfo: {
              products: [
                {
                  campaign: 'HKPIL23PLSTP10'
                }
              ]
            }
          }
        ]
      },
      preApproval: {
        formConfigmetaData: {
          products: [
            {
              campaign: 'HKPIL23PLSTP10'
            }
          ]
        }
      }
    });
    
    // Mock dispatch function
    store.dispatch = mockDispatch;
    
    // Mock window.location
    originalLocation = window.location;
    delete window.location;
    window.location = { host: 'test.com' };
    
    // Mock the URL constructor
    global.URL = jest.fn().mockImplementation((url) => {
      return {
        pathname: url,
        search: '',
        hash: '',
        host: '',
        origin: '',
        protocol: '',
        searchParams: {
          get: jest.fn()
        }
      };
    });
    
    // Mock createElement, appendChild, and removeChild
    document.createElement = jest.fn().mockImplementation((tag) => {
      const element = {
        href: '',
        download: '',
        click: jest.fn()
      };
      return element;
    });
    
    document.body.appendChild = jest.fn();
    document.body.removeChild = jest.fn();
    
    // Mock window.history
    window.history.replaceState = jest.fn();
    
    // Mock getLanguageInfo
    changeUtils.getUrl.getLanguageInfo.mockReturnValue(CONSTANTS.LANG_EN);
    
    // Mock service responses
    preApprovalServices.getData.mockResolvedValue({
      data: {
        products: {
          'HKPIL23PLSTP10': [{ pdfURL: 'https://test.com/test.pdf' }]
        },
        productsMob: {
          'HKPIL23PLSTP10': [{ pdfURL: 'https://test.com/test-mobile.pdf' }]
        },
        CampaignTnC: {
          'HKPIL23PLSTP10': [{ pdfURL: 'https://test.com/tnc.pdf' }]
        },
        CampaignTnCMob: {
          'HKPIL23PLSTP10': [{ pdfURL: 'https://test.com/tnc-mobile.pdf' }]
        },
        tncLinkCampaignCode: {
          'HKPIL23PLSTP10': [{
            pdfLinks: [
              { Title: 'II. Personal Loan Terms', url: 'https://test.com/personal-loan-terms.pdf' },
              { Title: 'III. Client Terms', url: 'https://test.com/client-terms.pdf' },
              { Title: 'Welcome Offers', url: 'https://test.com/welcome-offers.pdf' }
            ]
          }]
        }
      }
    });
    
    preApprovalServices.getPDFData.mockResolvedValue('mocked-pdf-data');
  });
  
  afterEach(() => {
    window.location = originalLocation;
  });
  
  // Helper function to render the component
  const renderComponent = (props = {}) => {
    return render(
      <Provider store={store}>
        <OnboardingBeforeStart
          isVisible={true}
          onScrollEnd={mockOnScrollEnd}
          stageID={0}
          nextPage={mockNextPage}
          {...props}
        />
      </Provider>
    );
  };

  test('renders spinner initially', () => {
    renderComponent();
    expect(screen.getByTestId('mock-spinner')).toBeInTheDocument();
  });

  test('loads KFS document PDF for stage 0', async () => {
    renderComponent();
    
    await waitFor(() => {
      expect(preApprovalServices.getData).toHaveBeenCalled();
      expect(preApprovalServices.getPDFData).toHaveBeenCalled();
      expect(mockDispatch).toHaveBeenCalledWith(preApprovalAction.setKfsDocumentPdf('mocked-pdf-data'));
      expect(mockOnScrollEnd).toHaveBeenCalledWith(true);
    });
  });

  test('loads T&C document PDF for stage 1', async () => {
    renderComponent({ stageID: 1 });
    
    await waitFor(() => {
      expect(preApprovalServices.getData).toHaveBeenCalled();
      expect(preApprovalServices.getPDFData).toHaveBeenCalled();
      expect(mockDispatch).toHaveBeenCalledWith(preApprovalAction.setTandCDocumentPdf(expect.any(String)));
      expect(mockDispatch).toHaveBeenCalledWith(preApprovalAction.setDownloadPDFData('mocked-pdf-data'));
      expect(mockOnScrollEnd).toHaveBeenCalledWith(true);
    });
  });

  test('renders PDF content after loading', async () => {
    renderComponent();
    
    await waitFor(() => {
      expect(screen.getByTestId('mock-pdf')).toBeInTheDocument();
      expect(screen.getByText(CONSTANTS.DownloadBtn)).toBeInTheDocument();
    });
  });

  test('renders table of links for stage 1', async () => {
    renderComponent({ stageID: 1 });
    
    await waitFor(() => {
      expect(screen.getByText(CONSTANTS.DownloadHeader)).toBeInTheDocument();
      expect(screen.getByText('II. Personal Loan Terms')).toBeInTheDocument();
      expect(screen.getByText('III. Client Terms')).toBeInTheDocument();
      expect(screen.getByText('Welcome Offers')).toBeInTheDocument();
      expect(screen.getAllByText(CONSTANTS.ReadBtn)).toHaveLength(3);
      expect(screen.getAllByText(CONSTANTS.DownloadBtn)).toHaveLength(4); // 3 in table + 1 at top
    });
  });

  test('handles PDF download button click', async () => {
    renderComponent();
    
    await waitFor(() => {
      const downloadButton = screen.getByText(CONSTANTS.DownloadBtn);
      fireEvent.click(downloadButton);
      
      expect(document.createElement).toHaveBeenCalledWith('a');
      expect(document.body.appendChild).toHaveBeenCalled();
      const mockAnchor = document.createElement('a');
      expect(mockAnchor.click).toHaveBeenCalled();
      expect(document.body.removeChild).toHaveBeenCalled();
    });
  });

  test('handles document link download in stage 1', async () => {
    renderComponent({ stageID: 1 });
    
    await waitFor(() => {
      const downloadLinks = screen.getAllByText(CONSTANTS.DownloadBtn);
      // Click the first download link in the table (not the top one)
      fireEvent.click(downloadLinks[1]);
      
      expect(document.createElement).toHaveBeenCalledWith('a');
      expect(document.body.appendChild).toHaveBeenCalled();
      const mockAnchor = document.createElement('a');
      expect(mockAnchor.click).toHaveBeenCalled();
      expect(document.body.removeChild).toHaveBeenCalled();
    });
  });

  test('handles scroll button click', async () => {
    // Mock scrollBy function
    const scrollByMock = jest.fn();
    Element.prototype.scrollBy = scrollByMock;
    
    renderComponent();
    
    await waitFor(() => {
      const scrollButton = screen.getByRole('button', { hidden: true });
      fireEvent.click(scrollButton);
      
      expect(scrollByMock).toHaveBeenCalledWith({ top: 200, behavior: 'smooth' });
    });
  });

  test('handles scroll to bottom', async () => {
    // Mock scrolling event
    const originalScrollHeight = Object.getOwnPropertyDescriptor(Element.prototype, 'scrollHeight');
    const originalClientHeight = Object.getOwnPropertyDescriptor(Element.prototype, 'clientHeight');
    const originalScrollTop = Object.getOwnPropertyDescriptor(Element.prototype, 'scrollTop');
    
    Object.defineProperty(Element.prototype, 'scrollHeight', { configurable: true, value: 1000 });
    Object.defineProperty(Element.prototype, 'clientHeight', { configurable: true, value: 500 });
    Object.defineProperty(Element.prototype, 'scrollTop', { configurable: true, value: 480 });
    
    renderComponent();
    
    await waitFor(() => {
      const pdfContainer = screen.getByTestId('mock-pdf').parentElement;
      fireEvent.scroll(pdfContainer);
      
      expect(mockOnScrollEnd).toHaveBeenCalledWith(false);
    });
    
    // Restore original properties
    if (originalScrollHeight) {
      Object.defineProperty(Element.prototype, 'scrollHeight', originalScrollHeight);
    }
    if (originalClientHeight) {
      Object.defineProperty(Element.prototype, 'clientHeight', originalClientHeight);
    }
    if (originalScrollTop) {
      Object.defineProperty(Element.prototype, 'scrollTop', originalScrollTop);
    }
  });

  test('renders next page button when isVisible is false', async () => {
    renderComponent({ isVisible: false });
    
    await waitFor(() => {
      expect(screen.getByText(CONSTANTS.acceptButton)).toBeInTheDocument();
      fireEvent.click(screen.getByText(CONSTANTS.acceptButton));
      expect(mockNextPage).toHaveBeenCalled();
    });
  });

  test('handles Chinese language', async () => {
    changeUtils.getUrl.getLanguageInfo.mockReturnValue(CONSTANTS.LANG_CN);
    
    renderComponent();
    
    await waitFor(() => {
      expect(screen.getByText(CONSTANTS.DownloadBtn_CN)).toBeInTheDocument();
    });
  });

  test('handles Hong Kong language', async () => {
    changeUtils.getUrl.getLanguageInfo.mockReturnValue(CONSTANTS.LANG_HK);
    
    renderComponent();
    
    await waitFor(() => {
      expect(screen.getByText(CONSTANTS.DownloadBtn_HK)).toBeInTheDocument();
    });
  });

  test('handles CC campaign PDF downloads', async () => {
    // Update store to use CC campaign
    store = mockStore({
      stages: {
        stages: [
          {
            stageInfo: {
              products: [
                {
                  campaign: 'HKSOG20VAWV000'
                }
              ]
            }
          }
        ]
      },
      preApproval: {
        formConfigmetaData: {
          products: [
            {
              campaign: 'HKSOG20VAWV000'
            }
          ]
        }
      }
    });
    
    // Mock getData for CC campaign
    preApprovalServices.getData.mockResolvedValue({
      data: {
        products: {
          'HKSOG20VAWV000': [{ pdfURL: 'https://test.com/cc-test.pdf' }]
        },
        productsMob: {
          'HKSOG20VAWV000': [{ pdfURL: 'https://test.com/cc-test-mobile.pdf' }]
        },
        CampaignTnC: {
          'HKSOG20VAWV000': [{ pdfURL: 'https://test.com/cc-tnc.pdf' }]
        },
        CampaignTnCMob: {
          'HKSOG20VAWV000': [{ pdfURL: 'https://test.com/cc-tnc-mobile.pdf' }]
        },
        tncLinkCampaignCode: {
          'HKSOG20VAWV000': [{
            pdfLinks: [
              { Title: 'III. Client Terms', url: 'https://test.com/client-terms.pdf' },
              { Title: 'III. Credit Card Terms', url: 'https://test.com/credit-card-terms.pdf' },
              { Title: 'VI. Welcome Offers', url: 'https://test.com/welcome-offers.pdf' },
              { Title: 'IX. E-Statement Service', url: 'https://test.com/e-statement.pdf' },
              { Title: 'X. Points Redemption', url: 'https://test.com/points-redemption.pdf' },
              { Title: 'XI. Credit Card Instalment Plan', url: 'https://test.com/instalment-plan.pdf' }
            ]
          }]
        }
      }
    });
    
    renderComponent({ stageID: 1 });
    
    await waitFor(() => {
      const downloadLinks = screen.getAllByText(CONSTANTS.DownloadBtn);
      // Click the first download link in the table (not the top one)
      fireEvent.click(downloadLinks[1]);
      
      expect(document.createElement).toHaveBeenCalledWith('a');
      expect(document.body.appendChild).toHaveBeenCalled();
      const mockAnchor = document.createElement('a');
      expect(mockAnchor.click).toHaveBeenCalled();
      expect(document.body.removeChild).toHaveBeenCalled();
    });
  });

  test('handles localhost environment', async () => {
    // Mock window.location for localhost
    window.location = { host: 'localhost:3000' };
    
    renderComponent();
    
    await waitFor(() => {
      expect(preApprovalServices.getData).toHaveBeenCalled();
      expect(preApprovalServices.getPDFData).toHaveBeenCalled();
      // Verify the URL is transformed for localhost
      expect(preApprovalServices.getPDFData).toHaveBeenCalledWith(expect.stringContaining('http://localhost:3000/'));
    });
  });

  test('handles Safari browser for downloading', async () => {
    // Mock navigator.userAgent for Safari
    const originalUserAgent = navigator.userAgent;
    Object.defineProperty(navigator, 'userAgent', {
      value: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Safari/605.1.15',
      configurable: true
    });
    
    renderComponent();
    
    await waitFor(() => {
      const downloadButton = screen.getByText(CONSTANTS.DownloadBtn);
      fireEvent.click(downloadButton);
      
      expect(document.createElement).toHaveBeenCalledWith('a');
      expect(document.body.appendChild).toHaveBeenCalled();
      const mockAnchor = document.createElement('a');
      expect(mockAnchor.click).toHaveBeenCalled();
      expect(document.body.removeChild).toHaveBeenCalled();
    });
    
    // Restore original userAgent
    Object.defineProperty(navigator, 'userAgent', {
      value: originalUserAgent,
      configurable: true
    });
  });

  test('handles addEventListener and removeEventListener', async () => {
    // Mock addEventListener and removeEventListener
    const addEventListenerSpy = jest.spyOn(Element.prototype, 'addEventListener');
    const removeEventListenerSpy = jest.spyOn(Element.prototype, 'removeEventListener');
    
    const { unmount } = renderComponent();
    
    await waitFor(() => {
      expect(addEventListenerSpy).toHaveBeenCalledWith('scroll', expect.any(Function));
    });
    
    unmount();
    
    expect(removeEventListenerSpy).toHaveBeenCalledWith('scroll', expect.any(Function));
    
    // Clean up spies
    addEventListenerSpy.mockRestore();
    removeEventListenerSpy.mockRestore();
  });
});
