import React from 'react';
import { render, fireEvent, screen } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Text from './Text';
import { StoreModel } from '../../../utils/model/common-model';
import { CONSTANTS } from '../../../utils/common/constants';
import { stagesAction } from '../../../utils/store/stages-slice';
import { fieldErrorAction } from '../../../utils/store/field-error-slice';
import { ContinueBtnAction } from '../../../utils/store/continue-validation-slice';
import { lastAction } from '../../../utils/store/last-accessed-slice';
import { modelAction } from '../../../utils/store/model-slice';

const mockStore = configureStore([]);

describe('Text Component', () => {
  let store: any;
  let props: any;

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [{ stageId: CONSTANTS.STAGE_NAMES.AD_1, stageInfo: { applicants: [{}] } }],
        userInput: { applicants: [{}] },
        pinyinToggle: false,
      },
      fielderror: { error: {} },
    });

    props = {
      data: {
        logical_field_name: 'test_field',
        rwb_label_name: 'Test Field',
        type: 'text',
        min_length: 3,
        length: 10,
        regex: '^[a-zA-Z]+$',
        mandatory: 'Yes',
        ui_defaulted_value: '',
        component_type: 'short-text',
        info_tooltips: 'Yes',
        details: 'Tooltip details',
      },
      handleCallback: jest.fn(),
      handleFieldDispatch: jest.fn(),
    };
  });

  it('renders without crashing', () => {
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );
    expect(screen.getByLabelText('Test Field')).toBeInTheDocument();
  });

  it('displays the correct placeholder', () => {
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );
    expect(screen.getByPlaceholderText('Tooltip details')).toBeInTheDocument();
  });

  it('handles input change and dispatches actions', () => {
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: 'abc' } });

    expect(props.handleCallback).toHaveBeenCalledWith(props.data, 'abc');
    expect(store.getActions()).toContainEqual(fieldErrorAction.removeFieldError('test_field'));
  });

  it('displays error message for invalid input', () => {
    props.data.regex = '^[0-9]+$'; // Only numbers allowed
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: 'abc' } });

    expect(screen.getByText('Test Field is required')).toBeInTheDocument();
  });

  it('disables input when textDisabled is true', () => {
    props.data.editable = true;
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    expect(input).toBeDisabled();
  });

  it('handles blur event and validates input', () => {
    props.data.logical_field_name = 'user_id';
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    fireEvent.blur(input, { target: { value: 'abc' } });

    expect(store.getActions()).toContainEqual(lastAction.getField('user_id'));
  });

  it('displays tick mark when input is valid', () => {
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: 'abc' } });

    expect(screen.getByTestId('tick-class')).toBeInTheDocument();
  });

  it('handles tax ID validation for Hong Kong', () => {
    props.data.logical_field_name = 'tax_id_no';
    store = mockStore({
      stages: {
        stages: [{ stageId: CONSTANTS.STAGE_NAMES.AD_1, stageInfo: { applicants: [{}] } }],
        userInput: { applicants: [{ country_of_tax_residence: CONSTANTS.LOV_DATA.HONG_KONG }] },
        pinyinToggle: false,
      },
      fielderror: { error: {} },
    });

    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: 'A1234567' } });

    expect(screen.getByText('Test Field is required')).toBeInTheDocument();
  });

  it('handles tax ID validation for non-Hong Kong', () => {
    props.data.logical_field_name = 'tax_id_no';
    store = mockStore({
      stages: {
        stages: [{ stageId: CONSTANTS.STAGE_NAMES.AD_1, stageInfo: { applicants: [{}] } }],
        userInput: { applicants: [{ country_of_tax_residence: 'US' }] },
        pinyinToggle: false,
      },
      fielderror: { error: {} },
    });

    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: '123456789' } });

    expect(screen.queryByText('Test Field is required')).not.toBeInTheDocument();
  });

  it('handles relationship with bank validation', () => {
    props.data.logical_field_name = 'related_party';
    store = mockStore({
      stages: {
        stages: [{ stageId: CONSTANTS.STAGE_NAMES.AD_6, stageInfo: { applicants: [{}] } }],
        userInput: { applicants: [{ related_party: 'Y' }] },
        pinyinToggle: false,
      },
      fielderror: { error: {} },
    });

    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: 'Y' } });

    expect(screen.queryByText('Test Field is required')).not.toBeInTheDocument();
  });

  it('handles embossed name validation', () => {
    props.data.logical_field_name = 'embossed_name';
    store = mockStore({
      stages: {
        stages: [{ stageId: CONSTANTS.STAGE_NAMES.AD_6, stageInfo: { applicants: [{ full_name_a_1: 'John Doe' }] } }],
        userInput: { applicants: [{}] },
        pinyinToggle: false,
      },
      fielderror: { error: {} },
    });

    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: 'John Doe' } });

    expect(screen.queryByText('Test Field is required')).not.toBeInTheDocument();
  });

  it('handles promo code validation', () => {
    props.data.logical_field_name = 'mgm_referral_code';
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: 'SCB1234567' } });

    expect(screen.queryByText('Promo code is invalid')).not.toBeInTheDocument();
  });

  it('handles email validation', () => {
    props.data.logical_field_name = 'email';
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: 'invalid-email' } });

    expect(screen.getByText('Test Field is required')).toBeInTheDocument();
  });

  it('handles Chinese name validation', () => {
    props.data.logical_field_name = 'full_name_chinese';
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: '陈大文' } });

    expect(screen.queryByText('Test Field is required')).not.toBeInTheDocument();
  });

  it('handles address validation', () => {
    props.data.logical_field_name = 'res_name_of_street_1';
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: '123 Main St' } });

    expect(screen.queryByText('Test Field is required')).not.toBeInTheDocument();
  });

  it('handles state/city validation', () => {
    props.data.logical_field_name = 'state_res_1';
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: 'California' } });

    expect(screen.queryByText('Test Field is required')).not.toBeInTheDocument();
  });

  it('handles annual income validation', () => {
    props.data.logical_field_name = 'annual_income';
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: '100000' } });

    expect(screen.queryByText('Test Field is required')).not.toBeInTheDocument();
  });

  it('handles employer name validation', () => {
    props.data.logical_field_name = 'name_of_employer';
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: 'ABC Corp' } });

    expect(screen.queryByText('Test Field is required')).not.toBeInTheDocument();
  });

  it('handles related person name validation', () => {
    props.data.logical_field_name = 'name_of_related_person';
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: 'John Doe' } });

    expect(screen.queryByText('Test Field is required')).not.toBeInTheDocument();
  });

  it('handles passport number validation', () => {
    props.data.logical_field_name = 'passport_no';
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: 'A12345678' } });

    expect(screen.queryByText('Test Field is required')).not.toBeInTheDocument();
  });

  it('handles building estate validation', () => {
    props.data.logical_field_name = 'res_building_estate_pt';
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: 'Estate 1' } });

    expect(screen.queryByText('Test Field is required')).not.toBeInTheDocument();
  });

  it('handles room/floor/block validation', () => {
    props.data.logical_field_name = 'res_room_flat';
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: '1202' } });

    expect(screen.queryByText('Test Field is required')).not.toBeInTheDocument();
  });

  it('handles office room/floor/block validation', () => {
    props.data.logical_field_name = 'off_room_flat';
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: '1202' } });

    expect(screen.queryByText('Test Field is required')).not.toBeInTheDocument();
  });

  it('handles office building estate validation', () => {
    props.data.logical_field_name = 'off_building_estate_pt';
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: 'Estate 1' } });

    expect(screen.queryByText('Test Field is required')).not.toBeInTheDocument();
  });

  it('handles currency validation', () => {
    props.data.logical_field_name = 'currency_pl';
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    expect(input).toBeDisabled();
  });

  it('handles focus event', () => {
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    const input = screen.getByLabelText('Test Field');
    fireEvent.focus(input);

    expect(store.getActions()).toContainEqual(lastAction.getField('test_field'));
  });

  it('handles tooltip display', () => {
    render(
      <Provider store={store}>
        <Text {...props} />
      </Provider>
    );

    expect(screen.getByText('Tooltip details')).toBeInTheDocument();
  });
});
