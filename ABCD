import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Fields from './Fields'; // Adjust the import path as needed
import { StoreModel } from '../../../utils/model/common-model'; // Adjust the import path as needed

const mockStore = configureStore([]);

describe('Fields Component', () => {
  let store: any;

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [
          {
            stageId: 'pd-1',
            stageInfo: {
              applicants: [{}],
              fieldMetaData: {
                data: {
                  stages: [],
                },
              },
            },
          },
        ],
        currentStage: 'pd-1',
        userInput: {
          applicants: [{}],
        },
      },
      lov: {},
      urlParam: {
        resume: false,
      },
      fielderror: {
        mandatoryFields: [],
        error: [],
      },
      valueUpdate: {
        value: false,
        changesUpdate: {
          changes: false,
        },
      },
      continueBtnSlice: {
        continueEnable: true,
      },
      error: {
        submit: false,
      },
      preApproval: {
        currentStage: 'pd-1',
        formConfigmetaData: {},
      },
    });
  });

  it('renders without crashing', () => {
    render(
      <Provider store={store}>
        <Fields />
      </Provider>
    );
    expect(screen.getByRole('form')).toBeInTheDocument();
  });

  it('handles form submission', async () => {
    render(
      <Provider store={store}>
        <Fields />
      </Provider>
    );

    const form = screen.getByRole('form');
    fireEvent.submit(form);

    await waitFor(() => {
      expect(store.getActions()).toContainEqual(
        expect.objectContaining({ type: 'stages/resetNewAndOldFields' })
      );
    });
  });

  it('handles back button click', () => {
    render(
      <Provider store={store}>
        <Fields />
      </Provider>
    );

    const backButton = screen.getByText('Back');
    fireEvent.click(backButton);

    expect(store.getActions()).toContainEqual(
      expect.objectContaining({ type: 'stages/updateStageId' })
    );
  });

  it('handles checkbox status update', () => {
    render(
      <Provider store={store}>
        <Fields />
      </Provider>
    );

    const checkbox = screen.getByRole('checkbox');
    fireEvent.click(checkbox);

    expect(store.getActions()).toContainEqual(
      expect.objectContaining({ type: 'stages/modifyStage' })
    );
  });

  it('handles field dispatch', () => {
    render(
      <Provider store={store}>
        <Fields />
      </Provider>
    );

    const inputField = screen.getByRole('textbox');
    fireEvent.change(inputField, { target: { value: 'test' } });

    expect(store.getActions()).toContainEqual(
      expect.objectContaining({ type: 'stages/modifyStage' })
    );
  });

  it('handles form validation', () => {
    render(
      <Provider store={store}>
        <Fields />
      </Provider>
    );

    const inputField = screen.getByRole('textbox');
    fireEvent.change(inputField, { target: { value: '' } });

    expect(screen.getByText('form-invalid')).toBeInTheDocument();
  });

  it('handles spinner display', () => {
    store = mockStore({
      stages: {
        stages: [
          {
            stageId: 'ld-1',
            stageInfo: {
              applicants: [{}],
              fieldMetaData: {
                data: {
                  stages: [],
                },
              },
            },
          },
        ],
        currentStage: 'ld-1',
        userInput: {
          applicants: [{}],
        },
      },
      lov: {},
      urlParam: {
        resume: false,
      },
      fielderror: {
        mandatoryFields: [],
        error: [],
      },
      valueUpdate: {
        value: false,
        changesUpdate: {
          changes: false,
        },
      },
      continueBtnSlice: {
        continueEnable: true,
      },
      error: {
        submit: false,
      },
      preApproval: {
        currentStage: 'ld-1',
        formConfigmetaData: {},
      },
    });

    render(
      <Provider store={store}>
        <Fields />
      </Provider>
    );

    expect(screen.getByRole('status')).toBeInTheDocument();
  });

  it('handles review page rendering', () => {
    store = mockStore({
      stages: {
        stages: [
          {
            stageId: 'rp',
            stageInfo: {
              applicants: [{}],
              fieldMetaData: {
                data: {
                  stages: [],
                },
              },
            },
          },
        ],
        currentStage: 'rp',
        userInput: {
          applicants: [{}],
        },
      },
      lov: {},
      urlParam: {
        resume: false,
      },
      fielderror: {
        mandatoryFields: [],
        error: [],
      },
      valueUpdate: {
        value: false,
        changesUpdate: {
          changes: false,
        },
      },
      continueBtnSlice: {
        continueEnable: true,
      },
      error: {
        submit: false,
      },
      preApproval: {
        currentStage: 'rp',
        formConfigmetaData: {},
      },
    });

    render(
      <Provider store={store}>
        <Fields />
      </Provider>
    );

    expect(screen.getByText('ReviewPage')).toBeInTheDocument();
  });

  it('handles fund disbursement rendering', () => {
    store = mockStore({
      stages: {
        stages: [
          {
            stageId: 'ld-1',
            stageInfo: {
              applicants: [{}],
              fieldMetaData: {
                data: {
                  stages: [],
                },
              },
            },
          },
        ],
        currentStage: 'ld-1',
        userInput: {
          applicants: [{}],
        },
      },
      lov: {},
      urlParam: {
        resume: false,
      },
      fielderror: {
        mandatoryFields: [],
        error: [],
      },
      valueUpdate: {
        value: false,
        changesUpdate: {
          changes: false,
        },
      },
      continueBtnSlice: {
        continueEnable: true,
      },
      error: {
        submit: false,
      },
      preApproval: {
        currentStage: 'ld-1',
        formConfigmetaData: {},
      },
    });

    render(
      <Provider store={store}>
        <Fields />
      </Provider>
    );

    expect(screen.getByText('FundDisbursement')).toBeInTheDocument();
  });
});
