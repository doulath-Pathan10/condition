import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import { Pdf } from './Pdf';
import { Document, Page } from 'react-pdf';
import { useSelector } from 'react-redux';

// Mock the react-pdf components
jest.mock('react-pdf', () => ({
  Document: jest.fn(({ children, file, onLoadSuccess }) => {
    // Simulate document load success
    setTimeout(() => onLoadSuccess({ numPages: 3 }), 100);
    return <div>{children}</div>;
  }),
  Page: jest.fn(() => <div>Page</div>),
}));

// Mock the useSelector hook
jest.mock('react-redux', () => ({
  useSelector: jest.fn(),
}));

describe('Pdf Component', () => {
  const mockFileName = 'test.pdf';
  const mockStages = [{ stageId: 'rp' }];

  beforeEach(() => {
    // Mock useSelector to return the stages
    useSelector.mockImplementation((selector) =>
      selector({
        stages: {
          stages: mockStages,
        },
      })
    );
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders the PDF component correctly', () => {
    render(<Pdf fileName={mockFileName} />);
    expect(screen.getByText('Page')).toBeInTheDocument();
  });

  it('handles document load success and sets the number of pages', async () => {
    render(<Pdf fileName={mockFileName} />);
    await waitFor(() => expect(Document).toHaveBeenCalled());
    expect(Page).toHaveBeenCalledTimes(3); // Assuming 3 pages
  });

  it('adjusts container width based on device type', () => {
    // Mock different device types
    Object.defineProperty(window, 'innerWidth', { value: 500 });
    Object.defineProperty(navigator, 'userAgent', { value: 'iphone' });

    render(<Pdf fileName={mockFileName} />);
    expect(screen.getByText('Page')).toBeInTheDocument();
  });

  it('handles window resize events', () => {
    render(<Pdf fileName={mockFileName} />);
    Object.defineProperty(window, 'innerWidth', { value: 600 });
    window.dispatchEvent(new Event('resize'));
    expect(screen.getByText('Page')).toBeInTheDocument();
  });

  it('renders the correct number of pages', async () => {
    render(<Pdf fileName={mockFileName} />);
    await waitFor(() => expect(Document).toHaveBeenCalled());
    expect(Page).toHaveBeenCalledTimes(3); // Assuming 3 pages
  });

  it('handles different device types (mobile, tablet, desktop)', () => {
    // Test mobile
    Object.defineProperty(window, 'innerWidth', { value: 400 });
    Object.defineProperty(navigator, 'userAgent', { value: 'iphone' });
    render(<Pdf fileName={mockFileName} />);
    expect(screen.getByText('Page')).toBeInTheDocument();

    // Test tablet
    Object.defineProperty(window, 'innerWidth', { value: 800 });
    Object.defineProperty(navigator, 'userAgent', { value: 'ipad' });
    render(<Pdf fileName={mockFileName} />);
    expect(screen.getByText('Page')).toBeInTheDocument();

    // Test desktop
    Object.defineProperty(window, 'innerWidth', { value: 1200 });
    Object.defineProperty(navigator, 'userAgent', { value: 'windows' });
    render(<Pdf fileName={mockFileName} />);
    expect(screen.getByText('Page')).toBeInTheDocument();
  });
});
