import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import ReviewPageInterestDetails from './ReviewPageInterestDetails';

const mockStore = configureStore([]);

describe('ReviewPageInterestDetails', () => {
  let store;

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [
          {
            stageInfo: {
              products: [
                { product_type: '1258' } // Default product type for testing
              ]
            }
          }
        ]
      },
      preApproval: {
        kfsDocumentPdf: 'mockPdfUrl'
      }
    });
  });

  const renderComponent = (props = {}) => {
    return render(
      <Provider store={store}>
        <ReviewPageInterestDetails
          handleCheckboxChange={jest.fn()}
          isChecked={false}
          viewPDF={jest.fn()}
          downloadPDF={jest.fn()}
          {...props}
        />
      </Provider>
    );
  };

  test('renders without crashing', () => {
    renderComponent();
    expect(screen.getByText(/Key highlight of Interest, Fee and Charges:/)).toBeInTheDocument();
  });

  test('renders loan table for product type 1258', () => {
    renderComponent();
    expect(screen.getByText('1. Personal Instalment Loan Repayment Table')).toBeInTheDocument();
  });

  test('renders loan table for product type 1312', () => {
    store = mockStore({
      stages: {
        stages: [
          {
            stageInfo: {
              products: [
                { product_type: '1312' }
              ]
            }
          }
        ]
      },
      preApproval: {
        kfsDocumentPdf: 'mockPdfUrl'
      }
    });
    renderComponent();
    expect(screen.getByText('1. Debit Consolidation Repayment Table')).toBeInTheDocument();
  });

  test('renders credit card details for product type 1282', () => {
    store = mockStore({
      stages: {
        stages: [
          {
            stageInfo: {
              products: [
                { product_type: '1282' }
              ]
            }
          }
        ]
      },
      preApproval: {
        kfsDocumentPdf: 'mockPdfUrl'
      }
    });
    renderComponent();
    expect(screen.getByText('Please click the Credit Card Application Declaration')).toBeInTheDocument();
  });

  test('renders credit card details for product type 1241', () => {
    store = mockStore({
      stages: {
        stages: [
          {
            stageInfo: {
              products: [
                { product_type: '1241' }
              ]
            }
          }
        ]
      },
      preApproval: {
        kfsDocumentPdf: 'mockPdfUrl'
      }
    });
    renderComponent();
    expect(screen.getByText('Please click the Credit Card Application Declaration')).toBeInTheDocument();
  });

  test('handles checkbox change', () => {
    const handleCheckboxChange = jest.fn();
    renderComponent({ handleCheckboxChange });
    const checkbox = screen.getByRole('checkbox');
    fireEvent.click(checkbox);
    expect(handleCheckboxChange).toHaveBeenCalled();
  });

  test('opens and closes KFS PDF popup', () => {
    renderComponent();
    const kfsLink = screen.getByText('KFS (including Fees and Charges).');
    fireEvent.click(kfsLink);
    expect(screen.getByText('mockPdfUrl')).toBeInTheDocument();

    const closeButton = screen.getByRole('button', { name: /close/i });
    fireEvent.click(closeButton);
    expect(screen.queryByText('mockPdfUrl')).not.toBeInTheDocument();
  });

  test('renders terms and conditions component', () => {
    renderComponent();
    expect(screen.getByText(/I confirm that/)).toBeInTheDocument();
  });
});
