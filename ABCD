import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import HeaderModel from './HeaderModel';
import { useSelector, useDispatch } from 'react-redux';

// Mock the necessary modules
jest.mock('react-redux', () => ({
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

jest.mock('../../../modules/preApproval/services/preApprovalServices', () => ({
  getData: jest.fn(),
  getPDFData: jest.fn(),
}));

jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn(),
  },
}));

jest.mock('../../../services/common-service', () => ({
  dispatchLoader: jest.fn(),
}));

jest.mock('../../../modules/preApproval/store/preApproval-slice', () => ({
  preApprovalAction: {
    setKfsDocumentPdf: jest.fn(),
  },
}));

describe('HeaderModel', () => {
  const mockDispatch = jest.fn();
  const mockUseSelector = useSelector as jest.Mock;
  const mockGetData = require('../../../modules/preApproval/services/preApprovalServices').getData as jest.Mock;
  const mockGetPDFData = require('../../../modules/preApproval/services/preApprovalServices').getPDFData as jest.Mock;
  const mockGetLanguageInfo = require('../../../utils/common/change.utils').getUrl.getLanguageInfo as jest.Mock;
  const mockDispatchLoader = require('../../../services/common-service').dispatchLoader as jest.Mock;
  const mockSetKfsDocumentPdf = require('../../../modules/preApproval/store/preApproval-slice').preApprovalAction.setKfsDocumentPdf as jest.Mock;

  const mockFormConfigmetaData = {
    products: [{ campaign: 'campaign1' }],
  };

  const mockPdfLinks = [
    { url: 'http://example.com/pdf1', Title: 'PDF 1' },
    { url: 'http://example.com/pdf2', Title: 'PDF 2' },
  ];

  const mockResponse = {
    data: {
      products: {
        campaign1: [{ pdfURL: 'http://example.com/pdf' }],
      },
      productsMob: {
        campaign1: [{ pdfURL: 'http://example.com/pdf-mobile' }],
      },
      tncLinkCampaignCode: {
        campaign1: [{ pdfLinks: mockPdfLinks }],
      },
    },
  };

  beforeEach(() => {
    mockUseSelector.mockImplementation((selector) =>
      selector({
        preApproval: {
          formConfigmetaData: mockFormConfigmetaData,
        },
      })
    );

    useDispatch.mockReturnValue(mockDispatch);
    mockGetLanguageInfo.mockReturnValue('en');
    mockGetData.mockResolvedValue(mockResponse);
    mockGetPDFData.mockResolvedValue('mockPDFData');
    mockDispatchLoader.mockReturnValue(true);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders the component correctly', async () => {
    render(
      <HeaderModel
        fileName="test.pdf"
        closepdf={jest.fn()}
        title="Test Title"
        footer="Test Footer"
      />
    );

    expect(screen.getByText('Test Title')).toBeInTheDocument();
    expect(screen.getByText('Test Footer')).toBeInTheDocument();

    await waitFor(() => {
      expect(mockGetData).toHaveBeenCalled();
      expect(mockGetPDFData).toHaveBeenCalled();
    });
  });

  it('handles language-specific PDF URLs', async () => {
    mockGetLanguageInfo.mockReturnValue('zh');

    render(
      <HeaderModel
        fileName="test.pdf"
        closepdf={jest.fn()}
        title="Test Title"
        footer="Test Footer"
      />
    );

    await waitFor(() => {
      expect(mockGetData).toHaveBeenCalled();
    });
  });

  it('handles mobile and desktop PDF URLs', async () => {
    Object.defineProperty(window, 'innerWidth', { writable: true, configurable: true, value: 500 });
    Object.defineProperty(navigator, 'userAgent', { writable: true, configurable: true, value: 'iphone' });

    render(
      <HeaderModel
        fileName="test.pdf"
        closepdf={jest.fn()}
        title="Test Title"
        footer="Test Footer"
      />
    );

    await waitFor(() => {
      expect(mockGetData).toHaveBeenCalled();
    });
  });

  it('handles localhost URL replacement', async () => {
    Object.defineProperty(window, 'location', {
      writable: true,
      value: { host: 'localhost:3000' },
    });

    render(
      <HeaderModel
        fileName="test.pdf"
        closepdf={jest.fn()}
        title="Test Title"
        footer="Test Footer"
      />
    );

    await waitFor(() => {
      expect(mockGetData).toHaveBeenCalled();
    });
  });

  it('handles PDF data fetching', async () => {
    render(
      <HeaderModel
        fileName="test.pdf"
        closepdf={jest.fn()}
        title="Test Title"
        footer="Test Footer"
      />
    );

    await waitFor(() => {
      expect(mockGetPDFData).toHaveBeenCalled();
      expect(mockSetKfsDocumentPdf).toHaveBeenCalledWith('mockPDFData');
    });
  });

  it('handles PDF link terms', async () => {
    render(
      <HeaderModel
        fileName="test.pdf"
        closepdf={jest.fn()}
        title="Test Title"
        footer="Test Footer"
      />
    );

    await waitFor(() => {
      expect(screen.getByText('PDF 1')).toBeInTheDocument();
      expect(screen.getByText('PDF 2')).toBeInTheDocument();
    });
  });

  it('handles the close button click', async () => {
    const mockClosePdf = jest.fn();

    render(
      <HeaderModel
        fileName="test.pdf"
        closepdf={mockClosePdf}
        title="Test Title"
        footer="Test Footer"
      />
    );

    userEvent.click(screen.getByRole('button', { name: /close/i }));
    expect(mockClosePdf).toHaveBeenCalled();
  });

  it('handles the spinner visibility', async () => {
    render(
      <HeaderModel
        fileName="test.pdf"
        closepdf={jest.fn()}
        title="Test Title"
        footer="Test Footer"
      />
    );

    await waitFor(() => {
      expect(mockDispatchLoader).toHaveBeenCalledWith(false);
    });
  });
});
