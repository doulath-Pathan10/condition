import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import HeaderRef from './HeaderRef';

const mockStore = configureStore([]);

describe('HeaderRef Component', () => {
  let store;

  beforeEach(() => {
    store = mockStore({
      preApproval: {
        kfsDocumentPdf: 'http://example.com/document.pdf',
      },
      stages: {
        stages: [
          {
            stageId: 'STAGE_1',
            stageInfo: {
              products: [
                {
                  campaign: 'HKBDC23PESTP10',
                },
              ],
            },
          },
        ],
      },
    });
  });

  test('renders the component with default props', () => {
    render(
      <Provider store={store}>
        <HeaderRef />
      </Provider>
    );

    expect(screen.getByText(/Ref No:/)).toBeInTheDocument();
  });

  test('renders the reference number correctly', () => {
    render(
      <Provider store={store}>
        <HeaderRef applicationNo="123456" />
      </Provider>
    );

    expect(screen.getByText(/Ref No: 123456/)).toBeInTheDocument();
  });

  test('renders the KFS section based on the stageIdSelector', () => {
    render(
      <Provider store={store}>
        <HeaderRef />
      </Provider>
    );

    expect(screen.getByText(/KFS \(including Fees and Charges\)/)).toBeInTheDocument();
  });

  test('handles the download PDF functionality', () => {
    render(
      <Provider store={store}>
        <HeaderRef />
      </Provider>
    );

    const downloadButton = screen.getByText(/Download/);
    fireEvent.click(downloadButton);

    // Add assertions to verify the download functionality
  });

  test('handles the view PDF functionality', () => {
    render(
      <Provider store={store}>
        <HeaderRef />
      </Provider>
    );

    const viewButton = screen.getByText(/Read/);
    fireEvent.click(viewButton);

    expect(screen.getByText(/Key Facts Statement/)).toBeInTheDocument();
  });

  test('closes the PDF popup', () => {
    render(
      <Provider store={store}>
        <HeaderRef />
      </Provider>
    );

    const viewButton = screen.getByText(/Read/);
    fireEvent.click(viewButton);

    const closeButton = screen.getByRole('button', { name: /close/ });
    fireEvent.click(closeButton);

    expect(screen.queryByText(/Key Facts Statement/)).not.toBeInTheDocument();
  });

  test('handles different campaign names for PDF filename replacement', () => {
    const storeWithDifferentCampaign = mockStore({
      preApproval: {
        kfsDocumentPdf: 'http://example.com/document.pdf',
      },
      stages: {
        stages: [
          {
            stageId: 'STAGE_1',
            stageInfo: {
              products: [
                {
                  campaign: 'HKPIL23PLSTP10',
                },
              ],
            },
          },
        ],
      },
    });

    render(
      <Provider store={storeWithDifferentCampaign}>
        <HeaderRef />
      </Provider>
    );

    const downloadButton = screen.getByText(/Download/);
    fireEvent.click(downloadButton);

    // Add assertions to verify the filename replacement
  });
});
