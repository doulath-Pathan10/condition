import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import HeaderModel from './HeaderModel';
import { useSelector, useDispatch } from 'react-redux';
import { getData, getPDFData } from '../../../modules/preApproval/services/preApprovalServices';
import { preApprovalAction } from '../../../modules/preApproval/store/preApproval-slice';
import { dispatchLoader } from '../../../services/common-service';

// Mock the necessary modules
jest.mock('react-redux', () => ({
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

jest.mock('../../../modules/preApproval/services/preApprovalServices', () => ({
  getData: jest.fn(),
  getPDFData: jest.fn(),
}));

jest.mock('../../../modules/preApproval/store/preApproval-slice', () => ({
  preApprovalAction: {
    setKfsDocumentPdf: jest.fn(),
  },
}));

jest.mock('../../../services/common-service', () => ({
  dispatchLoader: jest.fn(),
}));

describe('HeaderModel Component', () => {
  const mockDispatch = jest.fn();
  const mockUseSelector = useSelector as jest.Mock;
  const mockGetData = getData as jest.Mock;
  const mockGetPDFData = getPDFData as jest.Mock;

  beforeEach(() => {
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    mockUseSelector.mockImplementation((selector) =>
      selector({
        preApproval: {
          formConfigmetaData: {
            products: [{ campaign: 'campaign1' }],
          },
        },
      })
    );
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('Renders the component with the correct title and footer', () => {
    render(
      <HeaderModel
        fileName="test.pdf"
        closepdf={() => {}}
        title="Test Title"
        footer="Test Footer"
      />
    );

    expect(screen.getByText('Test Title')).toBeInTheDocument();
    expect(screen.getByText('Test Footer')).toBeInTheDocument();
  });

  test('Handles the PDF URL correctly based on the language', async () => {
    mockGetData.mockResolvedValue({
      data: {
        products: {
          campaign1: [{ pdfURL: 'https://pt.sc.com/test.pdf' }],
        },
        productsMob: {
          campaign1: [{ pdfURL: 'https://pt.sc.com/mobile/test.pdf' }],
        },
        tncLinkCampaignCode: {
          campaign1: [{ pdfLinks: [{ url: 'https://pt.sc.com/terms.pdf', Title: 'Terms' }] }],
        },
      },
    });

    render(
      <HeaderModel
        fileName="test.pdf"
        closepdf={() => {}}
        title="Test Title"
        footer="Test Footer"
      />
    );

    await waitFor(() => {
      expect(mockGetData).toHaveBeenCalledWith(expect.any(String));
      expect(mockDispatch).toHaveBeenCalledWith(dispatchLoader(false));
    });
  });

  test('Handles the PDF URL correctly for mobile devices', async () => {
    Object.defineProperty(window, 'innerWidth', { writable: true, configurable: true, value: 500 });
    Object.defineProperty(navigator, 'userAgent', {
      writable: true,
      configurable: true,
      value: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1',
    });

    mockGetData.mockResolvedValue({
      data: {
        products: {
          campaign1: [{ pdfURL: 'https://pt.sc.com/test.pdf' }],
        },
        productsMob: {
          campaign1: [{ pdfURL: 'https://pt.sc.com/mobile/test.pdf' }],
        },
        tncLinkCampaignCode: {
          campaign1: [{ pdfLinks: [{ url: 'https://pt.sc.com/terms.pdf', Title: 'Terms' }] }],
        },
      },
    });

    render(
      <HeaderModel
        fileName="test.pdf"
        closepdf={() => {}}
        title="Test Title"
        footer="Test Footer"
      />
    );

    await waitFor(() => {
      expect(mockGetData).toHaveBeenCalledWith(expect.any(String));
      expect(mockDispatch).toHaveBeenCalledWith(dispatchLoader(false));
    });
  });

  test('Handles the PDF URL correctly for localhost', async () => {
    Object.defineProperty(window, 'location', {
      writable: true,
      configurable: true,
      value: { host: 'localhost:3000' },
    });
