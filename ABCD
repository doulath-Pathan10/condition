import React from 'react';
import { render, screen, waitFor, fireEvent } from '@testing-library/react';
import HeaderModel from './HeaderModel';
import { useSelector, useDispatch } from 'react-redux';
import { getData, getPDFData } from '../../../modules/preApproval/services/preApprovalServices';
import { preApprovalAction } from '../../../modules/preApproval/store/preApproval-slice';

// Mock the necessary modules
jest.mock('react-redux', () => ({
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

jest.mock('../../../modules/preApproval/services/preApprovalServices', () => ({
  getData: jest.fn(),
  getPDFData: jest.fn(),
}));

jest.mock('../../../modules/preApproval/store/preApproval-slice', () => ({
  preApprovalAction: {
    setKfsDocumentPdf: jest.fn(),
  },
}));

jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn(),
  },
}));

describe('HeaderModel Component', () => {
  const mockDispatch = jest.fn();
  const mockUseSelector = useSelector as jest.Mock;
  const mockGetData = getData as jest.Mock;
  const mockGetPDFData = getPDFData as jest.Mock;
  const mockGetLanguageInfo = jest.fn();

  const mockFormConfigmetaData = {
    products: [
      {
        campaign: 'campaign1',
      },
    ],
  };

  beforeEach(() => {
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    mockUseSelector.mockImplementation((selector) =>
      selector({
        preApproval: {
          formConfigmetaData: mockFormConfigmetaData,
        },
      })
    );
    mockGetLanguageInfo.mockReturnValue('en');
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders without crashing', () => {
    render(<HeaderModel fileName="test.pdf" closepdf={() => {}} title="Test Title" footer="Test Footer" />);
    expect(screen.getByText('Test Title')).toBeInTheDocument();
  });

  it('displays the correct title', () => {
    render(<HeaderModel fileName="test.pdf" closepdf={() => {}} title="Test Title" footer="Test Footer" />);
    expect(screen.getByText('Test Title')).toBeInTheDocument();
  });

  it('displays the footer if provided', () => {
    render(<HeaderModel fileName="test.pdf" closepdf={() => {}} title="Test Title" footer="Test Footer" />);
    expect(screen.getByText('Test Footer')).toBeInTheDocument();
  });

  it('does not display the footer if not provided', () => {
    render(<HeaderModel fileName="test.pdf" closepdf={() => {}} title="Test Title" footer={null} />);
    expect(screen.queryByText('Test Footer')).toBeNull();
  });

  it('calls closepdf when the close button is clicked', () => {
    const mockClosepdf = jest.fn();
    render(<HeaderModel fileName="test.pdf" closepdf={mockClosepdf} title="Test Title" footer="Test Footer" />);
    fireEvent.click(screen.getByRole('button', { name: /close/i }));
    expect(mockClosepdf).toHaveBeenCalled();
  });

  it('fetches and sets the PDF link correctly', async () => {
    const mockPdfURL = 'http://example.com/test.pdf';
    const mockPdfResponse = { data: { products: { campaign1: [{ pdfURL: mockPdfURL }] } } };
    mockGetData.mockResolvedValue(mockPdfResponse);
    mockGetPDFData.mockResolvedValue(mockPdfURL);

    render(<HeaderModel fileName="test.pdf" closepdf={() => {}} title="Test Title" footer="Test Footer" />);

    await waitFor(() => expect(mockGetData).toHaveBeenCalled());
    await waitFor(() => expect(mockGetPDFData).toHaveBeenCalledWith(mockPdfURL));
    await waitFor(() => expect(mockDispatch).toHaveBeenCalledWith(preApprovalAction.setKfsDocumentPdf(mockPdfURL)));
  });

  it('handles mobile devices correctly', async () => {
    Object.defineProperty(window, 'innerWidth', { writable: true, configurable: true, value: 500 });
    Object.defineProperty(navigator, 'userAgent', { writable: true, configurable: true, value: 'iphone' });

    const mockPdfURL = 'http://example.com/test-mobile.pdf';
    const mockPdfResponse = { data: { productsMob: { campaign1: [{ pdfURL: mockPdfURL }] } } };
    mockGetData.mockResolvedValue(mockPdfResponse);
    mockGetPDFData.mockResolvedValue(mockPdfURL);

    render(<HeaderModel fileName="test.pdf" closepdf={() => {}} title="Test Title" footer="Test Footer" />);

    await waitFor(() => expect(mockGetData).toHaveBeenCalled());
    await waitFor(() => expect(mockGetPDFData).toHaveBeenCalledWith(mockPdfURL));
    await waitFor(() => expect(mockDispatch).toHaveBeenCalledWith(preApprovalAction.setKfsDocumentPdf(mockPdfURL)));
  });

  it('handles Chinese language correctly', async () => {
    mockGetLanguageInfo.mockReturnValue('zh');
    const mockPdfURL = 'http://example.com/test-chinese.pdf';
    const mockPdfResponse = { data: { products: { campaign1: [{ pdfURL: mockPdfURL }] } } };
    mockGetData.mockResolvedValue(mockPdfResponse);
    mockGetPDFData.mockResolvedValue(mockPdfURL);

    render(<HeaderModel fileName="test.pdf" closepdf={() => {}} title="Test Title" footer="Test Footer" />);

    await waitFor(() => expect(mockGetData).toHaveBeenCalled());
    await waitFor(() => expect(mockGetPDFData).toHaveBeenCalledWith(mockPdfURL));
    await waitFor(() => expect(mockDispatch).toHaveBeenCalledWith(preApprovalAction.setKfsDocumentPdf(mockPdfURL)));
  });
});
