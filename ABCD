import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import LoanDisbursement from './LoanDisbursement';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import { StoreModel } from '../../../../utils/model/common-model';
import { preApprovalAction } from '../../store/preApproval-slice';
import { stagesAction } from '../../../../utils/store/stages-slice';
import { errorAction } from '../../../../utils/store/error-slice';

// Mock the services
jest.mock('../../services/preApprovalServices', () => ({
  getOffer2: jest.fn(),
  getOfferCalulated: jest.fn(),
}));

jest.mock('../../services/preApprovalPostServices', () => ({
  postPdfPreview: jest.fn(),
}));

jest.mock('../../../../services/common-service', () => ({
  dispatchError: jest.fn(),
  dispatchLoader: jest.fn(),
}));

jest.mock('../../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn(() => 'en'),
  },
}));

const mockStore = configureStore([]);

describe('LoanDisbursement Component', () => {
  let store: any;

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [
          {
            stageInfo: {
              products: [
                {
                  offer_details: [
                    {
                      offer_status: '1001',
                      approved_amount: 10000,
                      approved_tenor: 60,
                      bestOffer: 'Y',
                      approved_amount_currency: 'HKD',
                      repaymentAmount: 2000,
                      flatRate: 1.5,
                      apr: 2.5,
                    },
                    {
                      offer_status: '1002',
                      approved_amount: 15000,
                      approved_tenor: 60,
                      bestOffer: 'N',
                      approved_amount_currency: 'HKD',
                      repaymentAmount: 2500,
                      flatRate: 1.8,
                      apr: 2.8,
                    },
                  ],
                  product_category: 'PL',
                },
              ],
              applicants: [
                {
                  requested_loan_amount_a_1: '10000',
                  requested_loan_tenor_a_1: '60',
                },
              ],
              application: {
                downshell: false,
              },
            },
          },
        ],
      },
    });

    store.dispatch = jest.fn();
  });

  it('renders without crashing', () => {
    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );
    expect(screen.getByText(/Continue/i)).toBeInTheDocument();
  });

  it('handles loan amount change', () => {
    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    const slider = screen.getByRole('slider');
    fireEvent.change(slider, { target: { value: 12000 } });
    expect(slider.value).toBe('12000');
  });

  it('handles tenor change', () => {
    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    const tenorButton = screen.getByText('60 months');
    fireEvent.click(tenorButton);
    expect(tenorButton).toHaveClass('selected');
  });

  it('calculates offer on loan amount and tenor change', async () => {
    const getOfferCalulated = require('../../services/preApprovalServices').getOfferCalulated;
    getOfferCalulated.mockResolvedValueOnce({
      status: 200,
      data: {
        apr: 2.5,
        monthly_flat_rate: 1.5,
        repayment_amount: 2000,
        response_indicator: 'SOFT',
        response_action: 'CONTINUE',
      },
    });

    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    const slider = screen.getByRole('slider');
    fireEvent.change(slider, { target: { value: 12000 } });

    const tenorButton = screen.getByText('60 months');
    fireEvent.click(tenorButton);

    await waitFor(() => {
      expect(getOfferCalulated).toHaveBeenCalledWith({
        requested_tenure: '60',
        requested_amount: '12000',
      });
      expect(screen.getByText('2.5%')).toBeInTheDocument();
    });
  });

  it('handles next stage with AIP3 call', async () => {
    const getOffer2 = require('../../services/preApprovalServices').getOffer2;
    getOffer2.mockResolvedValueOnce({
      status: 200,
      data: {
        application: {
          response_type: 'INFO',
          response_action: 'CONTINUE',
          error: {
            application_error: [],
            applicant_error: [],
            product_error: [],
          },
        },
        products: [
          {
            offer_details: [
              {
                service_type: 'ACD3',
                offer_status: '1001',
              },
            ],
          },
        ],
      },
    });

    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    const continueButton = screen.getByText('Continue');
    fireEvent.click(continueButton);

    await waitFor(() => {
      expect(getOffer2).toHaveBeenCalled();
      expect(store.dispatch).toHaveBeenCalledWith(stagesAction.updateStageId('ACD_4'));
    });
  });

  it('handles next stage with AIP4 call', async () => {
    const getOffer2 = require('../../services/preApprovalServices').getOffer2;
    getOffer2.mockResolvedValueOnce({
      status: 200,
      data: {
        application: {
          response_type: 'INFO',
          response_action: 'CONTINUE',
          error: {
            application_error: [],
            applicant_error: [],
            product_error: [],
          },
        },
        products: [
          {
            offer_details: [
              {
                service_type: 'ACD4',
                offer_status: '1001',
              },
            ],
          },
        ],
      },
    });

    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    const continueButton = screen.getByText('Continue');
    fireEvent.click(continueButton);

    await waitFor(() => {
      expect(getOffer2).toHaveBeenCalled();
      expect(store.dispatch).toHaveBeenCalledWith(stagesAction.updateStageId('ACD_4'));
    });
  });

  it('handles error in AIP3 call', async () => {
    const getOffer2 = require('../../services/preApprovalServices').getOffer2;
    getOffer2.mockResolvedValueOnce({
      status: 200,
      data: {
        application: {
          response_type: 'HARD',
          response_action: 'STOP',
          error: {
            application_error: [
              {
                error_description: 'Error occurred',
                rtobCode: '500',
              },
            ],
            applicant_error: [],
            product_error: [],
          },
        },
        products: [
          {
            offer_details: [
              {
                service_type: 'ACD3',
                offer_status: '1002',
              },
            ],
          },
        ],
      },
    });

    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    const continueButton = screen.getByText('Continue');
    fireEvent.click(continueButton);

    await waitFor(() => {
      expect(getOffer2).toHaveBeenCalled();
      expect(store.dispatch).toHaveBeenCalledWith(errorAction.getExceptionList([{
        statusCode: '500',
        statusText: 'Error occurred',
        responseAction: 'DECLINE',
        responseType: 'HARD',
      }]));
    });
  });

  it('handles error in AIP4 call', async () => {
    const getOffer2 = require('../../services/preApprovalServices').getOffer2;
    getOffer2.mockResolvedValueOnce({
      status: 200,
      data: {
        application: {
          response_type: 'HARD',
          response_action: 'STOP',
          error: {
            application_error: [
              {
                error_description: 'Error occurred',
                rtobCode: '500',
              },
            ],
            applicant_error: [],
            product_error: [],
          },
        },
        products: [
          {
            offer_details: [
              {
                service_type: 'ACD4',
                offer_status: '1002',
              },
            ],
          },
        ],
      },
    });

    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    const continueButton = screen.getByText('Continue');
    fireEvent.click(continueButton);

    await waitFor(() => {
      expect(getOffer2).toHaveBeenCalled();
      expect(store.dispatch).toHaveBeenCalledWith(errorAction.getExceptionList([{
        statusCode: '500',
        statusText: 'Error occurred',
        responseAction: 'DECLINE',
        responseType: 'HARD',
      }]));
    });
  });
});
