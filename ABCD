import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import ReviewPage from './ReviewPage';

const mockStore = configureStore([]);

describe('ReviewPage Component', () => {
  let store;

  beforeEach(() => {
    store = mockStore({
      preApproval: {
        downloadPdfData: 'http://example.com/sample.pdf',
      },
      stages: {
        stages: [
          {
            stageInfo: {
              products: [
                {
                  product_category: 'CC',
                  campaign: 'HKBDC23PESTP10',
                },
              ],
            },
          },
        ],
      },
    });
  });

  test('renders ReviewPage component', () => {
    render(
      <Provider store={store}>
        <ReviewPage fields={[]} confirmCheckboxStatus={jest.fn()} />
      </Provider>
    );

    expect(screen.getByText(/Just One Step/)).toBeInTheDocument();
  });

  test('toggles checkbox and calls confirmCheckboxStatus', () => {
    const confirmCheckboxStatusMock = jest.fn();
    render(
      <Provider store={store}>
        <ReviewPage fields={[]} confirmCheckboxStatus={confirmCheckboxStatusMock} />
      </Provider>
    );

    const checkbox = screen.getByRole('checkbox');
    fireEvent.click(checkbox);

    expect(confirmCheckboxStatusMock).toHaveBeenCalledWith(true);
  });

  test('downloads PDF with correct filename based on campaign', () => {
    render(
      <Provider store={store}>
        <ReviewPage fields={[]} confirmCheckboxStatus={jest.fn()} />
      </Provider>
    );

    const downloadButton = screen.getByText(/Download PDF/);
    fireEvent.click(downloadButton);

    // You can add assertions here to verify the download logic
  });

  test('opens and closes PDF popup', () => {
    render(
      <Provider store={store}>
        <ReviewPage fields={[]} confirmCheckboxStatus={jest.fn()} />
      </Provider>
    );

    const viewPdfButton = screen.getByText(/View PDF/);
    fireEvent.click(viewPdfButton);

    expect(screen.getByText(/Close/)).toBeInTheDocument();

    const closeButton = screen.getByText(/Close/);
    fireEvent.click(closeButton);

    expect(screen.queryByText(/Close/)).not.toBeInTheDocument();
  });

  test('scrolls to bottom and shows button', () => {
    render(
      <Provider store={store}>
        <ReviewPage fields={[]} confirmCheckboxStatus={jest.fn()} />
      </Provider>
    );

    const scrollableDiv = screen.getByTestId('scrollable-div');
    fireEvent.scroll(scrollableDiv, { target: { scrollY: 1000 } });

    expect(screen.getByText(/Next/)).toBeInTheDocument();
  });

  test('renders correct text based on language', () => {
    store = mockStore({
      preApproval: {
        downloadPdfData: 'http://example.com/sample.pdf',
      },
      stages: {
        stages: [
          {
            stageInfo: {
              products: [
                {
                  product_category: 'CC',
                  campaign: 'HKBDC23PESTP10',
                },
              ],
            },
          },
        ],
      },
    });

    render(
      <Provider store={store}>
        <ReviewPage fields={[]} confirmCheckboxStatus={jest.fn()} />
      </Provider>
    );

    expect(screen.getByText(/Just One Step/)).toBeInTheDocument();
  });

  test('renders copyright text based on language', () => {
    render(
      <Provider store={store}>
        <ReviewPage fields={[]} confirmCheckboxStatus={jest.fn()} />
      </Provider>
    );

    expect(screen.getByText(/Standard Chartered Bank \(Hong Kong\) Limited/)).toBeInTheDocument();
  });
});
