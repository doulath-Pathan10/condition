import { AxiosError } from "axios";
import "./document-type-dynamic.scss";
import React from "react";
import { useDispatch, useSelector } from "react-redux";
import "../documentUploadMain/document-upload-main-scr.scss";
import DocumentUpload from "../documentUpload/document-upload";
import { StoreModel } from "../../../../../utils/model/common-model";
import { stagesAction } from "../../../../../utils/store/stages-slice";
import { postQRCodeZOLO } from "../../../services/preApprovalPostServices";
import ColorIdentityProof from "../colourIdentityProof/colour-Identity-Proof";
import {
  dispatchError,
  dispatchLoader,
} from "../../../../../services/common-service";
import { errorAction } from "../../../../../utils/store/error-slice";

const DocumentTypeDynamic: React.FC<any> = ({
  setShowContinueBtn,
  setHKIDVersion,
  HKIDVersion,
  setHKIDQRCodeData
}) => {
  const dispatch = useDispatch();
  const stageSelector = useSelector((state: StoreModel) => state.stages.stages);
  const fileSectionData = useSelector((state: any) => state.stages.dynamicDocumentsUpload.fileSectionData);
  const channel_reference = useSelector((state: StoreModel) => state.stages && state.stages.stages[0].stageInfo.application.channel_reference);
  const documentList = useSelector((state: StoreModel) => state.stages && state.stages.stages[0].stageInfo.applicant_documents[0].document_list);
  const HKIDVersionValue = useSelector((state: any) => state.stages.dynamicDocumentsUpload.HKIDVersionValue);

  const callQRCodeAPI = () => {
    dispatch(dispatchLoader(true));
    postQRCodeZOLO(channel_reference, HKIDVersionValue).then((response: any) => {
      if (response.status === 200) {
        setHKIDQRCodeData(response.data);
        dispatch(stagesAction.updateHKIDQRCodeData(response.data));
        dispatch(dispatchLoader(false));
      }
      else {
        dispatch(
          errorAction.getError({
            statusCode: "error",
            statusText: "no response",
          })
        );
      }
    })
      .catch((error: AxiosError) => {
        dispatchError(error);
      });
  };

  return (
    <div className="row-start">
      <div>
        {fileSectionData === null &&
          documentList?.map((item: any, index: any) => {
            return (
              <div
                key={index}
                id="upload_fieldset_{{docCategory.document_category_code}}"
                className={stageSelector &&
                  stageSelector[0].stageInfo &&
                  stageSelector[0].stageInfo.applicant_documents &&
                  stageSelector[0].stageInfo.applicant_documents[0].document_list[index].document_options[0].document_types[0].uploaded_documents === null ? "form-field doc-select-box-child" : "form-field-checked doc-select-box-child"}
              >
                <p
                  role="button"
                  title={item.document_category}
                  className={
                    stageSelector &&
                      stageSelector[0].stageInfo &&
                      stageSelector[0].stageInfo.applicant_documents &&
                      stageSelector[0].stageInfo.applicant_documents[0]
                        .document_list[index].document_options[0]
                        .document_types[0].uploaded_documents === null
                      ? "doc-add"
                      : "doc-checked"
                  }
                  onClick={() => dispatch(stagesAction.updatefileSectionData(item))}
                  id="upload_fieldset_{{docCategory.document_category_code}}"
                ></p>
                <p
                  className="doc-field-name"
                  id="upload_fieldset_{{docCategory.document_category_code}}"
                >
                  {item.document_category}
                </p>
              </div>
            );
          })}
      </div>

      {fileSectionData !== null &&
        fileSectionData?.document_category_code === "R0001" ? (
        <ColorIdentityProof
          callQRCodeAPI={callQRCodeAPI}
          setHKIDVersion={setHKIDVersion}
          HKIDVersion={HKIDVersion}
        />
      ) : (
        fileSectionData !== null && (
          <DocumentUpload setShowContinueBtn={setShowContinueBtn} />
        )
      )}
    </div>
  );
};

export default DocumentTypeDynamic;
