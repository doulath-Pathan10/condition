import axios from 'axios';
import { getData, getPDFData } from './apiService'; // Adjust the import path as needed

// Mock axios
jest.mock('axios');

describe('API Service', () => {
  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('getData', () => {
    it('should fetch data successfully', async () => {
      const mockData = { data: 'test data' };
      axios.get.mockResolvedValue(mockData);

      const result = await getData('https://example.com/api/data');
      expect(result).toEqual(mockData);
      expect(axios.get).toHaveBeenCalledWith('https://example.com/api/data');
    });

    it('should handle fetch error', async () => {
      const mockError = new Error('Network Error');
      axios.get.mockRejectedValue(mockError);

      await expect(getData('https://example.com/api/data')).rejects.toThrow('Network Error');
      expect(axios.get).toHaveBeenCalledWith('https://example.com/api/data');
    });
  });

  describe('getPDFData', () => {
    it('should fetch PDF data successfully for Chrome', async () => {
      const mockData = new ArrayBuffer(8);
      const mockResponse = { status: 200, data: mockData };
      axios.get.mockResolvedValue(mockResponse);

      Object.defineProperty(window.navigator, 'userAgent', {
        value: 'Chrome',
        writable: true,
      });

      const result = await getPDFData('https://example.com/api/pdf');
      expect(result).toEqual(expect.any(String));
      expect(axios.get).toHaveBeenCalledWith('https://example.com/api/pdf', { responseType: 'blob' });
    });

    it('should fetch PDF data successfully for Safari', async () => {
      const mockData = new ArrayBuffer(8);
      const mockResponse = { status: 200, data: mockData };
      axios.get.mockResolvedValue(mockResponse);

      Object.defineProperty(window.navigator, 'userAgent', {
        value: 'Safari',
        writable: true,
      });

      const result = await getPDFData('https://example.com/api/pdf');
      expect(result).toEqual(expect.any(String));
      expect(axios.get).toHaveBeenCalledWith('https://example.com/api/pdf', { responseType: 'blob' });
    });

    it('should handle fetch error', async () => {
      const mockError = new Error('Network Error');
      axios.get.mockRejectedValue(mockError);

      await expect(getPDFData('https://example.com/api/pdf')).rejects.toThrow('Network Error');
      expect(axios.get).toHaveBeenCalledWith('https://example.com/api/pdf', { responseType: 'blob' });
    });
  });

  // Add more test cases for other functions like getDataFormConfig, getSessionByPreLogin, etc.
});
