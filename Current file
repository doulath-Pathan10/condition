import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import DocumentTypeDynamic from './DocumentTypeDynamic';
import { postQRCodeZOLO } from '../../../services/preApprovalPostServices';
import { dispatchError, dispatchLoader } from '../../../../../services/common-service';
import { stagesAction } from '../../../../../utils/store/stages-slice';
import { errorAction } from '../../../../../utils/store/error-slice';

// Mock child components
jest.mock('../colourIdentityProof/colour-Identity-Proof', () => (props: any) => (
  <div>
    ColorIdentityProof Mock
    <button onClick={() => props.callQRCodeAPI()}>Call QR Code API</button>
  </div>
));

jest.mock('../documentUpload/document-upload', () => () => <div>DocumentUpload Mock</div>);

// Mock services
jest.mock('../../../services/preApprovalPostServices', () => ({
  postQRCodeZOLO: jest.fn(),
}));

jest.mock('../../../../../services/common-service', () => ({
  dispatchError: jest.fn(),
  dispatchLoader: jest.fn(),
}));

describe('DocumentTypeDynamic Component', () => {
  const mockStore = configureStore([]);
  const mockSetShowContinueBtn = jest.fn();
  const mockSetHKIDVersion = jest.fn();
  const mockSetHKIDQRCodeData = jest.fn();

  const initialState = {
    stages: {
      stages: [
        {
          stageInfo: {
            application: {
              channel_reference: 'test-ref',
            },
            applicant_documents: [
              {
                document_list: [
                  {
                    document_category: 'HKID Card',
                    document_category_code: 'R0001',
                    document_options: [
                      {
                        document_types: [
                          {
                            uploaded_documents: null,
                          },
                        ],
                      },
                    ],
                  },
                  {
                    document_category: 'Proof of Address',
                    document_category_code: 'R0002',
                    document_options: [
                      {
                        document_types: [
                          {
                            uploaded_documents: { some: 'data' }, // Mark this as uploaded
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      dynamicDocumentsUpload: {
        fileSectionData: null,
        HKIDVersionValue: 'v1',
      },
    },
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders without crashing', () => {
    const store = mockStore(initialState);
    render(
      <Provider store={store}>
        <DocumentTypeDynamic
          setShowContinueBtn={mockSetShowContinueBtn}
          setHKIDVersion={mockSetHKIDVersion}
          HKIDVersion="v1"
          setHKIDQRCodeData={mockSetHKIDQRCodeData}
        />
      </Provider>
    );
    expect(screen.getByText('HKID Card')).toBeInTheDocument();
  });

  it('displays document list with correct styling based on upload status', () => {
    const store = mockStore(initialState);
    render(
      <Provider store={store}>
        <DocumentTypeDynamic
          setShowContinueBtn={mockSetShowContinueBtn}
          setHKIDVersion={mockSetHKIDVersion}
          HKIDVersion="v1"
          setHKIDQRCodeData={mockSetHKIDQRCodeData}
        />
      </Provider>
    );

    // HKID Card (not uploaded)
    const hkidCard = screen.getByText('HKID Card').closest('div');
    expect(hkidCard).toHaveClass('form-field');
    expect(hkidCard).toHaveClass('doc-select-box-child');

    // Proof of Address (uploaded)
    const poaCard = screen.getByText('Proof of Address').closest('div');
    expect(poaCard).toHaveClass('form-field-checked');
    expect(poaCard).toHaveClass('doc-select-box-child');
  });

  it('dispatches updatefileSectionData when document is clicked', () => {
    const store = mockStore(initialState);
    render(
      <Provider store={store}>
        <DocumentTypeDynamic
          setShowContinueBtn={mockSetShowContinueBtn}
          setHKIDVersion={mockSetHKIDVersion}
          HKIDVersion="v1"
          setHKIDQRCodeData={mockSetHKIDQRCodeData}
        />
      </Provider>
    );

    fireEvent.click(screen.getByText('HKID Card'));

    const actions = store.getActions();
    expect(actions).toContainEqual(
      stagesAction.updatefileSectionData(initialState.stages.stages[0].stageInfo.applicant_documents[0].document_list[0])
    );
  });

  describe('when fileSectionData is set', () => {
    it('renders ColorIdentityProof for R0001 document type', () => {
      const stateWithFileData = {
        ...initialState,
        stages: {
          ...initialState.stages,
          dynamicDocumentsUpload: {
            ...initialState.stages.dynamicDocumentsUpload,
            fileSectionData: {
              document_category_code: 'R0001',
              document_category: 'HKID Card',
            },
          },
        },
      };

      const store = mockStore(stateWithFileData);
      render(
        <Provider store={store}>
          <DocumentTypeDynamic
            setShowContinueBtn={mockSetShowContinueBtn}
            setHKIDVersion={mockSetHKIDVersion}
            HKIDVersion="v1"
            setHKIDQRCodeData={mockSetHKIDQRCodeData}
          />
        </Provider>
      );

      expect(screen.getByText('ColorIdentityProof Mock')).toBeInTheDocument();
    });

    it('renders DocumentUpload for non-R0001 document type', () => {
      const stateWithFileData = {
        ...initialState,
        stages: {
          ...initialState.stages,
          dynamicDocumentsUpload: {
            ...initialState.stages.dynamicDocumentsUpload,
            fileSectionData: {
              document_category_code: 'R0002',
              document_category: 'Proof of Address',
            },
          },
        },
      };

      const store = mockStore(stateWithFileData);
      render(
        <Provider store={store}>
          <DocumentTypeDynamic
            setShowContinueBtn={mockSetShowContinueBtn}
            setHKIDVersion={mockSetHKIDVersion}
            HKIDVersion="v1"
            setHKIDQRCodeData={mockSetHKIDQRCodeData}
          />
        </Provider>
      );

      expect(screen.getByText('DocumentUpload Mock')).toBeInTheDocument();
    });

    it('handles QR code API call through ColorIdentityProof', async () => {
      const mockResponse = { status: 200, data: { qrData: 'test' } };
      (postQRCodeZOLO as jest.Mock).mockResolvedValue(mockResponse);

      const stateWithFileData = {
        ...initialState,
        stages: {
          ...initialState.stages,
          dynamicDocumentsUpload: {
            ...initialState.stages.dynamicDocumentsUpload,
            fileSectionData: {
              document_category_code: 'R0001',
              document_category: 'HKID Card',
            },
          },
        },
      };

      const store = mockStore(stateWithFileData);
      render(
        <Provider store={store}>
          <DocumentTypeDynamic
            setShowContinueBtn={mockSetShowContinueBtn}
            setHKIDVersion={mockSetHKIDVersion}
            HKIDVersion="v1"
            setHKIDQRCodeData={mockSetHKIDQRCodeData}
          />
        </Provider>
      );

      // Click the button in the mocked ColorIdentityProof that calls callQRCodeAPI
      fireEvent.click(screen.getByText('Call QR Code API'));

      await Promise.resolve(); // Let the promise resolve

      expect(postQRCodeZOLO).toHaveBeenCalledWith('test-ref', 'v1');
      expect(dispatchLoader).toHaveBeenCalledWith(true);
      expect(mockSetHKIDQRCodeData).toHaveBeenCalledWith(mockResponse.data);
      
      const actions = store.getActions();
      expect(actions).toContainEqual(stagesAction.updateHKIDQRCodeData(mockResponse.data));
    });

    it('handles QR code API errors', async () => {
      const testError = new Error('Test error');
      (postQRCodeZOLO as jest.Mock).mockRejectedValue(testError);

      const stateWithFileData = {
        ...initialState,
        stages: {
          ...initialState.stages,
          dynamicDocumentsUpload: {
            ...initialState.stages.dynamicDocumentsUpload,
            fileSectionData: {
              document_category_code: 'R0001',
              document_category: 'HKID Card',
            },
          },
        },
      };

      const store = mockStore(stateWithFileData);
      render(
        <Provider store={store}>
          <DocumentTypeDynamic
            setShowContinueBtn={mockSetShowContinueBtn}
            setHKIDVersion={mockSetHKIDVersion}
            HKIDVersion="v1"
            setHKIDQRCodeData={mockSetHKIDQRCodeData}
          />
        </Provider>
      );

      fireEvent.click(screen.getByText('Call QR Code API'));

      await Promise.resolve();

      expect(dispatchError).toHaveBeenCalledWith(testError);
    });
  });
});
