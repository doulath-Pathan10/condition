import rulesUtils from './rulesUtils';
import { store } from '../../utils/store/store';

// Mock the store
jest.mock('../../utils/store/store', () => ({
  store: {
    getState: jest.fn()
  }
}));

describe('rulesUtils', () => {
  const mockProps = [
    [
      {
        fields: [
          { logical_field_name: 'embossed_name', default_visibility: 'Yes', editable: false, mandatory: 'No' },
          { logical_field_name: 'tin_hkid', default_visibility: 'Yes', editable: false, mandatory: 'No' },
          { logical_field_name: 'preferred_relationship_branch_EA', default_visibility: 'Yes', editable: false, mandatory: 'No' },
          { logical_field_name: 'rewards_choice_segment', default_visibility: 'Yes', editable: false, mandatory: 'No' },
          { logical_field_name: 'estatement_fee', default_visibility: 'Yes', editable: false, mandatory: 'No' },
          { logical_field_name: 'place_of_birth', default_visibility: 'Yes', editable: false, mandatory: 'No' },
          { logical_field_name: 'purpose_of_account', default_visibility: 'Yes', editable: false, mandatory: 'No' },
          { logical_field_name: 'currency', default_visibility: 'Yes', editable: false, mandatory: 'No' },
          { logical_field_name: 'office_phone_number', default_visibility: 'Yes', editable: false, mandatory: 'No' },
          { logical_field_name: 'monthly_installment_mortgage_payment', default_visibility: 'Yes', editable: false, mandatory: 'No' },
          { logical_field_name: 'oth_bank_name', default_visibility: 'Yes', editable: false, mandatory: 'No' },
          { logical_field_name: 'repayment_scb_bank_number', default_visibility: 'Yes', editable: false, mandatory: 'No' },
        ]
      }
    ]
  ];

  const validationObj = {
    nonEditable: [['embossed_name', 'tin_hkid']]
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should handle empty props', () => {
    const result = rulesUtils([], validationObj);
    expect(result).toEqual([]);
  });

  it('should set editable field correctly based on validationObj', () => {
    (store.getState as jest.Mock).mockReturnValue({
      stages: {
        stages: [{
          stageInfo: {
            products: [{ product_category: 'CC', product_type: '1313', campaign: 'HKSOZ00MCWB000' }],
            applicants: [{
              casaSegment: 'Y',
              asiaMilesCard: 'N',
              select_account: '',
              full_name_a_1: 'John Doe'
            }]
          }
        }]
      }
    });

    const result = rulesUtils(mockProps, validationObj);
    expect(result[0].fields[0].editable).toBe(true); // embossed_name should be editable
    expect(result[0].fields[1].editable).toBe(true); // tin_hkid should be editable
    expect(result[0].fields[2].editable).toBe(false); // preferred_relationship_branch_EA should not be editable
  });

  it('should set default_visibility to null for default_visibility_no_field items for CC product', () => {
    (store.getState as jest.Mock).mockReturnValue({
      stages: {
        stages: [{
          stageInfo: {
            products: [{ product_category: 'CC', product_type: '1313', campaign: 'HKSOZ00MCWB000' }],
            applicants: [{
              casaSegment: 'Y',
              asiaMilesCard: 'N',
              select_account: '',
              full_name_a_1: 'John Doe'
            }]
          }
        }]
      }
    });

    const result = rulesUtils(mockProps, validationObj);
    expect(result[0].fields.find(f => f.logical_field_name === 'estatement_fee')?.default_visibility).toBeNull();
  });

  it('should add embossed_name to default_visibility_no_field when name is long for CC product', () => {
    (store.getState as jest.Mock).mockReturnValue({
      stages: {
        stages: [{
          stageInfo: {
            products: [{ product_category: 'CC', product_type: '1313', campaign: 'HKSOZ00MCWB000' }],
            applicants: [{
              casaSegment: 'Y',
              asiaMilesCard: 'N',
              select_account: '',
              full_name_a_1: 'Very Long Name That Exceeds 19 Characters'
            }]
          }
        }]
      }
    });

    const result = rulesUtils(mockProps, validationObj);
    expect(result[0].fields.find(f => f.logical_field_name === 'embossed_name')?.default_visibility).toBeNull();
  });

  it('should handle preferred_relationship_branch based on campaign for CC product with casaSegment Y', () => {
    // Test for HKSOZ00MCWB000 campaign
    (store.getState as jest.Mock).mockReturnValue({
      stages: {
        stages: [{
          stageInfo: {
            products: [{ product_category: 'CC', product_type: '1313', campaign: 'HKSOZ00MCWB000' }],
            applicants: [{
              casaSegment: 'Y',
              asiaMilesCard: 'N',
              select_account: '',
              full_name_a_1: 'John Doe'
            }]
          }
        }]
      }
    });

    let result = rulesUtils(mockProps, validationObj);
    expect(result[0].fields.find(f => f.logical_field_name === 'preferred_relationship_branch_EA')?.default_visibility).toBeNull();

    // Test for HKSOZ01MCWB000 campaign
    (store.getState as jest.Mock).mockReturnValue({
      stages: {
        stages: [{
          stageInfo: {
            products: [{ product_category: 'CC', product_type: '1313', campaign: 'HKSOZ01MCWB000' }],
            applicants: [{
              casaSegment: 'Y',
              asiaMilesCard: 'N',
              select_account: '',
              full_name_a_1: 'John Doe'
            }]
          }
        }]
      }
    });

    result = rulesUtils(mockProps, validationObj);
    expect(result[0].fields.find(f => f.logical_field_name === 'preferred_relationship_branch_PB')?.default_visibility).toBeNull();

    // Test for HKSOZ02MCWB000 campaign
    (store.getState as jest.Mock).mockReturnValue({
      stages: {
        stages: [{
          stageInfo: {
            products: [{ product_category: 'CC', product_type: '1313', campaign: 'HKSOZ02MCWB000' }],
            applicants: [{
              casaSegment: 'Y',
              asiaMilesCard: 'N',
              select_account: '',
              full_name_a_1: 'John Doe'
            }]
          }
        }]
      }
    });

    result = rulesUtils(mockProps, validationObj);
    expect(result[0].fields.find(f => f.logical_field_name === 'preferred_relationship_branch_PP')?.default_visibility).toBeNull();
  });

  it('should add rewards_choice_segment for specific campaigns with casaSegment Y', () => {
    (store.getState as jest.Mock).mockReturnValue({
      stages: {
        stages: [{
          stageInfo: {
            products: [{ product_category: 'CC', product_type: '1313', campaign: 'HKSOZ01MCWB000' }],
            applicants: [{
              casaSegment: 'Y',
              asiaMilesCard: 'N',
              select_account: '',
              full_name_a_1: 'John Doe'
            }]
          }
        }]
      }
    });

    const result = rulesUtils(mockProps, validationObj);
    expect(result[0].fields.find(f => f.logical_field_name === 'rewards_choice_segment')?.default_visibility).toBeNull();
  });

  it('should set mandatory fields correctly', () => {
    (store.getState as jest.Mock).mockReturnValue({
      stages: {
        stages: [{
          stageInfo: {
            products: [{ product_category: 'CC', product_type: '1313', campaign: 'HKSOZ00MCWB000' }],
            applicants: [{
              casaSegment: 'Y',
              asiaMilesCard: 'N',
              select_account: '',
              full_name_a_1: 'John Doe'
            }]
          }
        }]
      }
    });

    const result = rulesUtils(mockProps, validationObj);
    expect(result[0].fields.find(f => f.logical_field_name === 'office_phone_number')?.mandatory).toBe('Yes');
  });

  it('should hide fields for CC product', () => {
    (store.getState as jest.Mock).mockReturnValue({
      stages: {
        stages: [{
          stageInfo: {
            products: [{ product_category: 'CC', product_type: '1313', campaign: 'HKSOZ00MCWB000' }],
            applicants: [{
              casaSegment: 'N',
              asiaMilesCard: 'N',
              select_account: '',
              full_name_a_1: 'John Doe'
            }]
          }
        }]
      }
    });

    const result = rulesUtils(mockProps, validationObj);
    expect(result[0].fields.find(f => f.logical_field_name === 'place_of_birth')?.default_visibility).toBe('No');
    expect(result[0].fields.find(f => f.logical_field_name === 'purpose_of_account')?.default_visibility).toBe('No');
  });

  it('should hide currency field for CC product with casaSegment Y', () => {
    (store.getState as jest.Mock).mockReturnValue({
      stages: {
        stages: [{
          stageInfo: {
            products: [{ product_category: 'CC', product_type: '1313', campaign: 'HKSOZ00MCWB000' }],
            applicants: [{
              casaSegment: 'Y',
              asiaMilesCard: 'N',
              select_account: '',
              full_name_a_1: 'John Doe'
            }]
          }
        }]
      }
    });

    const result = rulesUtils(mockProps, validationObj);
    expect(result[0].fields.find(f => f.logical_field_name === 'currency')?.default_visibility).toBe('No');
  });

  it('should hide different fields for non-CC product', () => {
    (store.getState as jest.Mock).mockReturnValue({
      stages: {
        stages: [{
          stageInfo: {
            products: [{ product_category: 'LOAN', product_type: '1234', campaign: '' }],
            applicants: [{
              casaSegment: 'N',
              asiaMilesCard: 'N',
              select_account: '',
              full_name_a_1: 'John Doe'
            }]
          }
        }]
      }
    });

    const result = rulesUtils(mockProps, validationObj);
    expect(result[0].fields.find(f => f.logical_field_name === 'place_of_birth')?.default_visibility).toBe('No');
    expect(result[0].fields.find(f => f.logical_field_name === 'purpose_of_account')?.default_visibility).toBe('No');
    expect(result[0].fields.find(f => f.logical_field_name === 'temp_cli_label')?.default_visibility).toBe('No');
  });

  it('should hide oth_bank_name and oth_bank_number when selectAccount is SER', () => {
    (store.getState as jest.Mock).mockReturnValue({
      stages: {
        stages: [{
          stageInfo: {
            products: [{ product_category: 'CC', product_type: '1313', campaign: 'HKSOZ00MCWB000' }],
            applicants: [{
              casaSegment: 'Y',
              asiaMilesCard: 'N',
              select_account: 'SER',
              full_name_a_1: 'John Doe'
            }]
          }
        }]
      }
    });

    const result = rulesUtils(mockProps, validationObj);
    expect(result[0].fields.find(f => f.logical_field_name === 'oth_bank_name')?.default_visibility).toBe('No');
    expect(result[0].fields.find(f => f.logical_field_name === 'oth_bank_number')?.default_visibility).toBe('No');
  });

  it('should hide repayment_scb_bank_number when selectAccount is OTH', () => {
    (store.getState as jest.Mock).mockReturnValue({
      stages: {
        stages: [{
          stageInfo: {
            products: [{ product_category: 'CC', product_type: '1313', campaign: 'HKSOZ00MCWB000' }],
            applicants: [{
              casaSegment: 'Y',
              asiaMilesCard: 'N',
              select_account: 'OTH',
              full_name_a_1: 'John Doe'
            }]
          }
        }]
      }
    });

    const result = rulesUtils(mockProps, validationObj);
    expect(result[0].fields.find(f => f.logical_field_name === 'repayment_scb_bank_number')?.default_visibility).toBe('No');
  });

  it('should filter out fields with default_visibility No', () => {
    (store.getState as jest.Mock).mockReturnValue({
      stages: {
        stages: [{
          stageInfo: {
            products: [{ product_category: 'CC', product_type: '1313', campaign: 'HKSOZ00MCWB000' }],
            applicants: [{
              casaSegment: 'Y',
              asiaMilesCard: 'N',
              select_account: 'OTH',
              full_name_a_1: 'John Doe'
            }]
          }
        }]
      }
    });

    const result = rulesUtils(mockProps, validationObj);
    const hiddenFields = ['place_of_birth', 'purpose_of_account', 'repayment_scb_bank_number'];
    hiddenFields.forEach(field => {
      expect(result[0].fields.some(f => f.logical_field_name === field)).toBe(false);
    });
  });
});
