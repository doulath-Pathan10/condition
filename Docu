describe('PILDashboard Error Handling and Edge Cases', () => {
  let store: any;
  const mockDispatch = jest.fn();
  const mockUseLocation = {
    pathname: '/test',
    search: '',
    hash: '',
    state: null,
  };

  beforeEach(() => {
    store = configureStore({
      reducer: {
        preApproval: () => ({
          formConfigmetaData: {
            fieldmetadata: {
              data: {
                stages: [{
                  fields: [{
                    field_set_name: 'Test Title',
                    rwb_label_name: 'Test Notes',
                  }],
                }],
              },
            },
          },
          currentStage: 'PD-1',
          previousStage: 'PD-0',
        }),
        auth: () => ({ sessionUid: null }), // Start with no session
        stages: () => ({
          otpOpen: false,
          stages: [{ stageId: 'pd-1', stageInfo: {} }],
        }),
        urlParam: () => ({ validUrl: true }),
      },
    });

    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    (useLocation as jest.Mock).mockReturnValue(mockUseLocation);
    (useSelector as jest.Mock).mockImplementation((selector) => selector(store.getState()));
    jest.clearAllMocks();
  });

  it('handles session creation failure with no response', async () => {
    const mockGetSessionByPreLogin = jest.requireMock('../services/preApprovalServices').getSessionByPreLogin;
    mockGetSessionByPreLogin.mockRejectedValue({});

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalledWith(
        errorAction.getError({
          statusCode: "error",
          statusText: "no response",
        })
      );
    });
  });

  it('handles resume flow with application error A20', async () => {
    const mockGetParameterByName = jest.requireMock('../../../utils/common/change.utils').getUrl.getParameterByName;
    mockGetParameterByName.mockImplementation((name: string) => 
      name === 'pageId' ? 'resume' : 'test-ref'
    );

    const mockGetResumeRequest = jest.requireMock('../services/preApprovalPostServices').getResumeRequest;
    mockGetResumeRequest.mockResolvedValue({
      status: 200,
      data: {
        applicants: [],
        application: {
          application_reference: 'test-ref',
          cos_ref_number: 'test-channel-ref',
          application_status: 'E01',
          response_type: 'HARD',
          response_action: 'RESUBMIT',
          error: {
            application_error: [{ rtobCode: 'A20', error_description: 'ID Validation Failed' }],
            applicant_error: [],
            product_error: [],
          },
        },
        products: [{ product_type: '1313', product_category: 'PL' }],
        stage: { page_id: 'bd-1a' },
        lov_desc: {},
      },
    });

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    await waitFor(() => {
      expect(screen.getByText('AlertModel - ErrorCode A20')).toBeInTheDocument();
    });
  });

  it('handles resume flow with CSL-REG-104 error', async () => {
    const mockGetParameterByName = jest.requireMock('../../../utils/common/change.utils').getUrl.getParameterByName;
    mockGetParameterByName.mockImplementation((name: string) => 
      name === 'pageId' ? 'resume' : 'test-ref'
    );

    const mockGetResumeRequest = jest.requireMock('../services/preApprovalPostServices').getResumeRequest;
    mockGetResumeRequest.mockResolvedValue({
      status: 200,
      data: {
        applicants: [],
        application: {
          application_reference: 'test-ref',
          cos_ref_number: 'test-channel-ref',
          application_status: 'E01',
          response_type: 'HARD',
          response_action: 'RESUBMIT',
          error: {
            application_error: [{ rtobCode: 'CSL-REG-104', error_description: 'Registration Failed' }],
            applicant_error: [],
            product_error: [],
          },
        },
        products: [{ product_type: '1313', product_category: 'PL' }],
        stage: { page_id: 'bd-1a' },
        lov_desc: {},
      },
    });

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    await waitFor(() => {
      expect(screen.getByText('AlertModel - ErrorCode CSL-REG-104')).toBeInTheDocument();
    });
  });

  it('handles resume flow with CORRECT RESUBMIT response action', async () => {
    const mockGetParameterByName = jest.requireMock('../../../utils/common/change.utils').getUrl.getParameterByName;
    mockGetParameterByName.mockImplementation((name: string) => 
      name === 'pageId' ? 'resume' : 'test-ref'
    );

    const mockGetResumeRequest = jest.requireMock('../services/preApprovalPostServices').getResumeRequest;
    mockGetResumeRequest.mockResolvedValue({
      status: 200,
      data: {
        applicants: [],
        application: {
          application_reference: 'test-ref',
          cos_ref_number: 'test-channel-ref',
          application_status: 'E01',
          response_type: 'HARD',
          response_action: 'CORRECT RESUBMIT',
          error: {
            application_error: [{ rtobCode: 'A30', error_description: 'Data Correction Needed' }],
            applicant_error: [],
            product_error: [],
          },
        },
        products: [{ product_type: '1313', product_category: 'PL' }],
        stage: { page_id: 'bd-1a' },
        lov_desc: {},
      },
    });

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalledWith(dispatchLoader(false));
    });
  });

  it('handles getDataFormConfig failure in resume flow', async () => {
    const mockGetParameterByName = jest.requireMock('../../../utils/common/change.utils').getUrl.getParameterByName;
    mockGetParameterByName.mockImplementation((name: string) => 
      name === 'pageId' ? 'resume' : 'test-ref'
    );

    const mockGetResumeRequest = jest.requireMock('../services/preApprovalPostServices').getResumeRequest;
    mockGetResumeRequest.mockResolvedValue({
      status: 200,
      data: {
        applicants: [],
        application: {
          application_reference: 'test-ref',
          cos_ref_number: 'test-channel-ref',
          application_status: 'A01',
          response_type: 'INFO',
          response_action: 'SUCCESS',
          error: {
            application_error: [],
            applicant_error: [],
            product_error: [],
          },
        },
        products: [{ product_type: '1313', product_category: 'PL' }],
        stage: { page_id: 'bd-1a' },
        lov_desc: {},
      },
    });

    const mockGetDataFormConfig = jest.requireMock('../services/preApprovalServices').getDataFormConfig;
    mockGetDataFormConfig.mockRejectedValue(new Error('API Error'));

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalledWith(dispatchLoader(false));
    });
  });

  it('handles getResumeRequest failure', async () => {
    const mockGetParameterByName = jest.requireMock('../../../utils/common/change.utils').getUrl.getParameterByName;
    mockGetParameterByName.mockImplementation((name: string) => 
      name === 'pageId' ? 'resume' : null
    );

    const mockGetResumeRequest = jest.requireMock('../services/preApprovalPostServices').getResumeRequest;
    mockGetResumeRequest.mockRejectedValue(new Error('Resume Failed'));

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalledWith(
        errorAction.getError({
          statusCode: "error",
          statusText: "no response",
        })
      );
    });
  });

  it('handles getProductMetaDataInfo failure', async () => {
    const mockGetSessionByPreLogin = jest.requireMock('../services/preApprovalServices').getSessionByPreLogin;
    mockGetSessionByPreLogin.mockResolvedValue({
      status: 201,
      headers: { sessionuid: 'test-session' },
    });

    const mockGetProductMetaDataInfo = jest.requireMock('../services/preApprovalServices').getProductMetaDataInfo;
    mockGetProductMetaDataInfo.mockRejectedValue(new Error('Product Info Failed'));

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalledWith(dispatchLoader(false));
    });
  });

  it('handles empty stage data in resume flow', async () => {
    const mockGetParameterByName = jest.requireMock('../../../utils/common/change.utils').getUrl.getParameterByName;
    mockGetParameterByName.mockImplementation((name: string) => 
      name === 'pageId' ? 'resume' : 'test-ref'
    );

    const mockGetResumeRequest = jest.requireMock('../services/preApprovalPostServices').getResumeRequest;
    mockGetResumeRequest.mockResolvedValue({
      status: 200,
      data: {
        applicants: [],
        application: {
          application_reference: 'test-ref',
          cos_ref_number: 'test-channel-ref',
          application_status: 'A01',
          response_type: 'INFO',
          response_action: 'SUCCESS',
          error: {
            application_error: [],
            applicant_error: [],
            product_error: [],
          },
        },
        products: [{ product_type: '1313', product_category: 'PL' }],
        stage: {},
        lov_desc: {},
      },
    });

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalledWith(stagesAction.updateStageId('bd-1a'));
    });
  });

  it('handles CC product category in resume flow', async () => {
    const mockGetParameterByName = jest.requireMock('../../../utils/common/change.utils').getUrl.getParameterByName;
    mockGetParameterByName.mockImplementation((name: string) => 
      name === 'pageId' ? 'resume' : 'test-ref'
    );

    const mockGetResumeRequest = jest.requireMock('../services/preApprovalPostServices').getResumeRequest;
    mockGetResumeRequest.mockResolvedValue({
      status: 200,
      data: {
        applicants: [],
        application: {
          application_reference: 'test-ref',
          cos_ref_number: 'test-channel-ref',
          application_status: 'A01',
          response_type: 'INFO',
          response_action: 'SUCCESS',
          error: {
            application_error: [],
            applicant_error: [],
            product_error: [],
          },
        },
        products: [{ product_type: '1313', product_category: 'CC' }],
        stage: {},
        lov_desc: {},
      },
    });

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalledWith(stagesAction.updateStageId('bd-1'));
    });
  });

  it('handles auth=resume parameter', async () => {
    const mockGetParameterByName = jest.requireMock('../../../utils/common/change.utils').getUrl.getParameterByName;
    mockGetParameterByName.mockImplementation((name: string) => 
      name === 'auth' ? 'resume' : null
    );

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.getStage({
          id: CONSTANTS.STAGE_NAMES.DECLARE,
        })
      );
    });
  });
});
