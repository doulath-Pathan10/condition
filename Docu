import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import Zoloz from './Zoloz';
import { CONSTANTS } from '../../../../../utils/common/constants';
import * as preApprovalServices from '../../../services/preApprovalPostServices';
import * as preApprovalGetServices from '../../../../preApproval/services/preApprovalServices';
import { stagesAction } from '../../../../../utils/store/stages-slice';
import { errorAction } from '../../../../../utils/store/error-slice';

const middlewares = [thunk];
const mockStore = configureMockStore(middlewares);

// Mock the services
jest.mock('../../../services/preApprovalPostServices', () => ({
  postDocuments: jest.fn(),
  postZOLOCheck: jest.fn(),
  postZolozAcknowledge: jest.fn(),
  postPdfPreview: jest.fn(),
  postQRCodeZOLO: jest.fn(),
}));

jest.mock('../../../../preApproval/services/preApprovalServices', () => ({
  getImagePreview: jest.fn(),
}));

describe('Zoloz Component', () => {
  let store: any;
  const mockSetHKIDVersion = jest.fn();
  
  const initialState = {
    stages: {
      stages: [{
        stageInfo: {
          application: {
            channel_reference: 'test123'
          },
          applicant_documents: [{
            document_list: [{
              document_category: 'R0001',
              document_options: [{
                document_types: [{
                  uploaded_documents: []
                }]
              }]
            }]
          }]
        },
        dynamicDocumentsUpload: {
          showUploadFileSuccess: false,
          HKIDQRCodeData: { qrCode: 'testQRCode', transactionId: 'trans123' },
          HKIDVersionValue: 'A001',
          fileSectionData: { document_category: 'R0001' },
          documentCount: 0
        }
      }]
    },
    preApproval: {
      imgPrevURL: 'testImageURL',
      documentZoloCheckRes: [{
        docId: 'doc123',
        documentName: 'testDoc.png',
        documentTypeCode: 'A001',
        documentCategoryCode: 'R0001',
        responseStatus: 'SUCCESS'
      }]
    }
  };

  beforeEach(() => {
    store = mockStore(initialState);
    
    // Mock successful API responses
    (preApprovalServices.postQRCodeZOLO as jest.Mock).mockResolvedValue({
      status: 200,
      data: { qrCode: 'testQRCode', transactionId: 'trans123' }
    });
    
    (preApprovalServices.postZOLOCheck as jest.Mock).mockResolvedValue({
      status: 200,
      data: {
        documents: [{
          docId: 'doc123',
          documentName: 'testDoc.png',
          documentTypeCode: 'A001',
          documentCategoryCode: 'R0001',
          responseStatus: 'SUCCESS'
        }]
      }
    });
    
    (preApprovalServices.postZolozAcknowledge as jest.Mock).mockResolvedValue({
      data: [{ responseStatus: 'Success' }]
    });
    
    (preApprovalGetServices.getImagePreview as jest.Mock).mockResolvedValue({
      status: 200,
      data: new Blob()
    });
    
    (preApprovalServices.postPdfPreview as jest.Mock).mockResolvedValue({
      status: 200,
      data: { statusCode: 'OK', documents: [] }
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders without crashing', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    expect(screen.getByText(/Colour Identity Proof/i)).toBeInTheDocument();
  });

  it('displays QR code section when showUploadFileSuccess is false', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    expect(screen.getByText('Submit')).toBeInTheDocument();
    expect(screen.getByRole('button', { name: 'submit-button' })).toBeInTheDocument();
  });

  it('displays success section when showUploadFileSuccess is true', () => {
    const successState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        stages: [{
          ...initialState.stages.stages[0],
          stageInfo: {
            ...initialState.stages.stages[0].stageInfo
          },
          dynamicDocumentsUpload: {
            ...initialState.stages.stages[0].dynamicDocumentsUpload,
            showUploadFileSuccess: true
          }
        }]
      }
    };
    
    const successStore = mockStore(successState);
    
    render(
      <Provider store={successStore}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    expect(screen.getByText('Upload completed')).toBeInTheDocument();
    expect(screen.getByText('Continue')).toBeInTheDocument();
  });

  it('calls closeFileUpload when close button is clicked', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByText('Close'));
    
    const actions = store.getActions();
    expect(actions).toContainEqual(stagesAction.updatefileSectionData(null));
    expect(actions).toContainEqual(stagesAction.updateshowUploadFileSuccess(false));
  });

  it('calls callSubmit when submit button is clicked', async () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByRole('button', { name: 'submit-button' }));
    
    await waitFor(() => {
      expect(preApprovalServices.postZOLOCheck).toHaveBeenCalled();
    });
  });

  it('handles successful document check and shows success modal', async () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByRole('button', { name: 'submit-button' }));
    
    await waitFor(() => {
      expect(preApprovalServices.postZolozAcknowledge).toHaveBeenCalled();
      expect(preApprovalGetServices.getImagePreview).toHaveBeenCalled();
      expect(preApprovalServices.postPdfPreview).toHaveBeenCalled();
    });
  });

  it('shows error popup when no documents are returned from ZOLO check', async () => {
    (preApprovalServices.postZOLOCheck as jest.Mock).mockResolvedValue({
      status: 200,
      data: { documents: [] }
    });
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByRole('button', { name: 'submit-button' }));
    
    await waitFor(() => {
      expect(screen.queryByText('Error')).toBeInTheDocument();
    });
  });

  it('handles API errors gracefully', async () => {
    (preApprovalServices.postZOLOCheck as jest.Mock).mockRejectedValue({
      response: { status: 500 }
    });
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByRole('button', { name: 'submit-button' }));
    
    await waitFor(() => {
      const actions = store.getActions();
      expect(actions).toContainEqual(errorAction.getError({
        statusCode: 'error',
        statusText: 'no response'
      }));
    });
  });

  it('calls okBtnClick and updates store when continue button is clicked', async () => {
    const successState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        stages: [{
          ...initialState.stages.stages[0],
          stageInfo: {
            ...initialState.stages.stages[0].stageInfo
          },
          dynamicDocumentsUpload: {
            ...initialState.stages.stages[0].dynamicDocumentsUpload,
            showUploadFileSuccess: true
          }
        }]
      }
    };
    
    const successStore = mockStore(successState);
    
    render(
      <Provider store={successStore}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByText('Continue'));
    
    await waitFor(() => {
      const actions = successStore.getActions();
      expect(actions).toContainEqual(stagesAction.updateDocumentCount(1));
      expect(actions).toContainEqual(stagesAction.updatefileSectionData(null));
      expect(mockSetHKIDVersion).toHaveBeenCalledWith('');
    });
  });

  it('opens image preview modal when image is clicked', () => {
    const successState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        stages: [{
          ...initialState.stages.stages[0],
          stageInfo: {
            ...initialState.stages.stages[0].stageInfo
          },
          dynamicDocumentsUpload: {
            ...initialState.stages.stages[0].dynamicDocumentsUpload,
            showUploadFileSuccess: true
          }
        }]
      }
    };
    
    const successStore = mockStore(successState);
    
    render(
      <Provider store={successStore}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('image-preview'));
    expect(screen.getByText('testDoc.png')).toBeInTheDocument();
  });

  it('displays different language text based on language setting', () => {
    const cnState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        stages: [{
          ...initialState.stages.stages[0],
          stageInfo: {
            ...initialState.stages.stages[0].stageInfo,
            application: {
              ...initialState.stages.stages[0].stageInfo.application,
              language: CONSTANTS.LANG_CN
            }
          }
        }]
      }
    };
    
    const cnStore = mockStore(cnState);
    
    render(
      <Provider store={cnStore}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    expect(screen.getByText('提交')).toBeInTheDocument();
  });

  it('calls callQRCodeAPI when error modal is closed', async () => {
    (preApprovalServices.postZOLOCheck as jest.Mock).mockResolvedValue({
      status: 200,
      data: { documents: [] }
    });
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByRole('button', { name: 'submit-button' }));
    
    await waitFor(() => {
      expect(screen.queryByText('Error')).toBeInTheDocument();
    });
    
    fireEvent.click(screen.getByText('OK'));
    
    await waitFor(() => {
      expect(preApprovalServices.postQRCodeZOLO).toHaveBeenCalled();
    });
  });
});
