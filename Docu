import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Amount from './Amount';
import { CONSTANTS } from '../../../utils/common/constants';

const mockStore = configureStore([]);

describe('Amount Component', () => {
  let store: any;
  const mockProps = {
    data: {
      logical_field_name: 'requested_loan_amount',
      rwb_label_name: 'Loan Amount',
      mandatory: 'Yes',
      min_length: 4,
      length: 7,
      regex: '^[0-9]*$',
      editable: false
    },
    handleCallback: jest.fn()
  };

  beforeEach(() => {
    store = mockStore({
      lov: { lov: [] },
      stages: {
        stages: [{ stageId: 'ad-1', stageInfo: { applicants: [{}] } }],
        userInput: { applicants: [{}] }
      },
      fielderror: { error: [], mandatoryFields: [] },
      preApproval: { resumeAllowed: 'N' },
      lastAccessed: { field: '' }
    });
  });

  test('renders without crashing', () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );
    
    expect(screen.getByLabelText('Loan Amount')).toBeInTheDocument();
  });

  test('displays the correct label', () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );
    
    expect(screen.getByText('Loan Amount')).toBeInTheDocument();
  });

  test('shows error when value is below minimum amount (5000)', () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByPlaceholderText('Loan Amount');
    fireEvent.change(input, { target: { value: '4999' } });
    
    expect(screen.getByText(/Loan amount must be between HKD 5,000 and HKD 2,000,000/)).toBeInTheDocument();
  });

  test('shows error when value is above maximum amount (2000000)', () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByPlaceholderText('Loan Amount');
    fireEvent.change(input, { target: { value: '2000001' } });
    
    expect(screen.getByText(/Loan amount must be between HKD 5,000 and HKD 2,000,000/)).toBeInTheDocument();
  });

  test('shows error when value is not in multiples of 1000', () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByPlaceholderText('Loan Amount');
    fireEvent.change(input, { target: { value: '5500' } });
    
    expect(screen.getByText(/Loan amount must be in multiples of HKD 1,000/)).toBeInTheDocument();
  });

  test('shows error when value is below min length', () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByPlaceholderText('Loan Amount');
    fireEvent.change(input, { target: { value: '123' } });
    
    expect(screen.getByText(/Minimum length is 4 digits/)).toBeInTheDocument();
  });

  test('shows tick mark when valid value is entered', () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByPlaceholderText('Loan Amount');
    fireEvent.change(input, { target: { value: '10000' } });
    
    expect(document.querySelector('.tick-class')).toBeInTheDocument();
  });

  test('dispatches correct actions on valid input', () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByPlaceholderText('Loan Amount');
    fireEvent.change(input, { target: { value: '10000' } });
    
    const actions = store.getActions();
    expect(actions.some((action: any) => action.type === 'fieldError/removeFieldError')).toBeTruthy();
  });

  test('disables input when editable is true', () => {
    const disabledProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        editable: true
      }
    };
    
    render(
      <Provider store={store}>
        <Amount {...disabledProps} />
      </Provider>
    );
    
    const input = screen.getByPlaceholderText('Loan Amount');
    expect(input).toBeDisabled();
  });

  test('handles annual income validation correctly', () => {
    const annualIncomeProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'annual_income_pl',
        rwb_label_name: 'Annual Income'
      }
    };
    
    render(
      <Provider store={store}>
        <Amount {...annualIncomeProps} />
      </Provider>
    );
    
    const input = screen.getByPlaceholderText('Annual Income');
    fireEvent.change(input, { target: { value: '95999' } });
    
    expect(screen.getByText(/Annual income must be at least HKD 96,000/)).toBeInTheDocument();
  });

  test('shows HKD label for annual income field', () => {
    const annualIncomeProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'annual_income_pl',
        rwb_label_name: 'Annual Income'
      }
    };
    
    render(
      <Provider store={store}>
        <Amount {...annualIncomeProps} />
      </Provider>
    );
    
    expect(screen.getByText('HKD')).toBeInTheDocument();
  });

  test('clears value when other loans is N in ad-6 stage', () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        stages: [{ stageId: 'ad-6', stageInfo: { applicants: [{}] }],
        userInput: { applicants: [{ other_loans: 'N' }] }
      }
    });
    
    const { rerender } = render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );
    
    // Simulate other_loans changing to 'N'
    store = mockStore({
      ...store.getState(),
      stages: {
        stages: [{ stageId: 'ad-6', stageInfo: { applicants: [{}] }],
        userInput: { applicants: [{ other_loans: 'N' }] }
      }
    });
    
    rerender(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByPlaceholderText('Loan Amount') as HTMLInputElement;
    expect(input.value).toBe('');
  });

  test('shows other loans fields when other_loans is Y', () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        stages: [{ stageId: 'ad-6', stageInfo: { applicants: [{}] }],
        userInput: { applicants: [{ other_loans: 'Y' }] }
      }
    });
    
    const otherLoansProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'monthly_installment_mortgage_payment'
      }
    };
    
    render(
      <Provider store={store}>
        <Amount {...otherLoansProps} />
      </Provider>
    );
    
    expect(screen.getByLabelText('Monthly Installment Mortgage Payment')).toBeInTheDocument();
  });

  test('handles resume data correctly', () => {
    store = mockStore({
      ...store.getState(),
      preApproval: { resumeAllowed: 'Y' },
      stages: {
        stages: [{
          stageId: 'ad-1',
          stageInfo: {
            applicants: [{
              requested_loan_amount_a_1: '15000'
            }]
          }
        }],
        userInput: { applicants: [{}] }
      }
    });
    
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByPlaceholderText('Loan Amount') as HTMLInputElement;
    expect(input.value).toBe('15000');
  });

  test('shows error message in different languages', () => {
    // Mock language to CN
    jest.spyOn(require('../../../utils/common/change.utils'), 'getUrl').mockImplementation(() => ({
      getLanguageInfo: () => CONSTANTS.LANG_CN
    }));
    
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByPlaceholderText('Loan Amount');
    fireEvent.change(input, { target: { value: '123' } });
    
    expect(screen.getByText(/最少需要4位数字/)).toBeInTheDocument();
  });

  test('handles tab key press validation', () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByPlaceholderText('Loan Amount');
    fireEvent.keyDown(input, { key: 'Tab' });
    
    // Should show required error if empty
    expect(screen.getByText(/Loan Amount is required/)).toBeInTheDocument();
  });
});
