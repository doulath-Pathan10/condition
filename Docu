import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import HeaderRef from './HeaderRef';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import { CONSTANTS } from '../../../utils/common/constants';

const mockStore = configureMockStore();

describe('HeaderRef Component', () => {
  const mockDownloadPdfData = 'http://example.com/kfs.pdf';
  const mockStageInfo = {
    stages: [{
      stageId: 'STAGE_1',
      stageInfo: {
        products: [{
          campaign: 'HKBDC23PESTP10'
        }]
      }
    }]
  };

  const setup = (props = {}, state = {}) => {
    const store = mockStore({
      preApproval: { kfsDocumentPdf: mockDownloadPdfData },
      stages: mockStageInfo,
      ...state
    });

    return render(
      <Provider store={store}>
        <HeaderRef applicationNo="TEST123" {...props} />
      </Provider>
    );
  };

  beforeEach(() => {
    jest.spyOn(URL, 'createObjectURL').mockImplementation(() => 'mock-url');
    jest.spyOn(document, 'createElement').mockImplementation((tagName) => {
      if (tagName === 'a') {
        return {
          href: '',
          download: '',
          click: jest.fn(),
          setAttribute: jest.fn(),
        } as unknown as HTMLAnchorElement;
      }
      return document.createElement(tagName);
    });
  });

  afterEach(() => {
    jest.restoreAllMocks();
  });

  test('renders with default props', () => {
    setup();
    expect(screen.getByText(/Ref No: TEST123/)).toBeInTheDocument();
  });

  test('displays fallback reference number when applicationNo is not provided', () => {
    setup({ applicationNo: undefined });
    expect(screen.getByText(/Ref No: HK24101700230315/)).toBeInTheDocument();
  });

  test('displays Chinese text when language is CN', () => {
    // Mock getLanguageInfo to return CN
    jest.spyOn(require('../../../utils/common/change.utils'), 'getUrl').mockReturnValue({
      getLanguageInfo: () => CONSTANTS.LANG_CN
    });
    
    setup();
    expect(screen.getByText('參考編號:')).toBeInTheDocument();
    expect(screen.getByText('產品資料概要(包括收費及費用)')).toBeInTheDocument();
  });

  test('displays English text when language is EN', () => {
    // Mock getLanguageInfo to return EN
    jest.spyOn(require('../../../utils/common/change.utils'), 'getUrl').mockReturnValue({
      getLanguageInfo: () => CONSTANTS.LANG_EN
    });
    
    setup();
    expect(screen.getByText('Ref No:')).toBeInTheDocument();
    expect(screen.getByText('KFS (including Fees and Charges)')).toBeInTheDocument();
  });

  test('does not display KFS section when stageId is in excluded stages', () => {
    const excludedStages = [
      CONSTANTS.STAGE_NAMES.ACD_1,
      CONSTANTS.STAGE_NAMES.ACD_2,
      CONSTANTS.STAGE_NAMES.ACD_3,
      CONSTANTS.STAGE_NAMES.ACD_4,
      CONSTANTS.STAGE_NAMES.DOC_3,
      CONSTANTS.STAGE_NAMES.FFD_1,
      CONSTANTS.STAGE_NAMES.FFD_2
    ];

    excludedStages.forEach(stageId => {
      const { queryByText } = setup({}, {
        stages: {
          stages: [{ stageId }]
        }
      });
      expect(queryByText('KFS (including Fees and Charges)')).not.toBeInTheDocument();
    });
  });

  test('opens popup when Read button is clicked', () => {
    setup();
    fireEvent.click(screen.getByText('Read'));
    expect(screen.getByText('Key Facts Statement')).toBeInTheDocument();
  });

  test('closes popup when closepdf is called', () => {
    setup();
    fireEvent.click(screen.getByText('Read')); // Open popup
    fireEvent.click(screen.getByLabelText('close')); // Close popup
    expect(screen.queryByText('Key Facts Statement')).not.toBeInTheDocument();
  });

  test('downloads PDF with correct filename based on campaign', () => {
    const campaigns = [
      { campaign: 'HKBDC23PESTP10', expected: 'DC_KFS_Desktop_0421_E.pdf' },
      { campaign: 'HKPIL23PLSTP10', expected: 'PIL_KFS_Desktop_0421_E.pdf' },
      { campaign: 'HKSOG20VAWV000', expected: 'SCB_SMART_KFS_Desktop_0421_E.pdf' },
      { campaign: 'HKSPB17VAWV000', expected: 'SCB_SC_KFS_Desktop_0421_E.pdf' },
      { campaign: 'HKSPG17VAWV000', expected: 'SCB_SC_KFS_Desktop_0421_E.pdf' },
      { campaign: 'HKSOA16VAWP000', expected: 'SCB_PLAT_KFS_Desktop_0421_E.pdf' },
      { campaign: 'HKSOA16MCWP000', expected: 'SCB_PLAT_KFS_Desktop_0421_E.pdf' },
      { campaign: 'UNKNOWN', expected: 'kfs.pdf' } // Default case
    ];

    campaigns.forEach(({ campaign, expected }) => {
      const store = mockStore({
        preApproval: { kfsDocumentPdf: mockDownloadPdfData },
        stages: {
          stages: [{
            stageId: 'STAGE_1',
            stageInfo: {
              products: [{ campaign }]
            }
          }]
        }
      });

      render(
        <Provider store={store}>
          <HeaderRef applicationNo="TEST123" />
        </Provider>
      );

      const downloadSpy = jest.spyOn(document, 'createElement');
      fireEvent.click(screen.getByText('Download'));
      
      expect(downloadSpy).toHaveBeenCalledWith('a');
      const anchor = downloadSpy.mock.results[0].value as HTMLAnchorElement;
      expect(anchor.download).toBe(expected);
      
      downloadSpy.mockClear();
    });
  });
});
