import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import AlertModel from './AlertModel';
import { CONSTANTS } from '../../../utils/common/constants';
import { StoreModel } from '../../../utils/model/common-model';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';

const mockStore = configureStore([]);

describe('AlertModel Component', () => {
  const defaultProps = {
    goBack: jest.fn(),
    exit: jest.fn(),
    alertType: '',
    message: '',
    errorCode: ''
  };

  const mockState = {
    stages: {
      stages: [{
        stageInfo: {
          application: {
              cos_ref_number: 'TEST12345'
          },
          products: [{
              campaign: 'HKSOZ01MCWB000'
          }]
        }
      }]
    },
    preApproval: {
      formConfigmetaData: {}
    }
  };

  const renderComponent = (props = {}, state = mockState) => {
    const store = mockStore(state);
    return render(
      <Provider store={store}>
        <AlertModel {...defaultProps} {...props} />
      </Provider>
    );
  };

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('DECLINERLS alert type', () => {
    it('should render DECLINERLS alert with English content', () => {
      renderComponent({ alertType: 'DECLINERLS' });
      
      expect(screen.getByText(CONSTANTS.headerText)).toBeInTheDocument();
      expect(screen.getByText(CONSTANTS.nextTextRLS)).toBeInTheDocument();
      expect(screen.getByText(CONSTANTS.regretTextRLS)).toBeInTheDocument();
      expect(screen.getByText(CONSTANTS.enquiryContentRLS)).toBeInTheDocument();
      expect(screen.getByText('(+852) 2886-8868')).toBeInTheDocument();
      expect(screen.getByText(`${CONSTANTS.refNoText} TEST12345`)).toBeInTheDocument();
      expect(screen.getByText(CONSTANTS.futureRefQuote)).toBeInTheDocument();
      expect(screen.getByText(CONSTANTS.OK)).toBeInTheDocument();
    });

    it('should call goBack when OK button is clicked', () => {
      renderComponent({ alertType: 'DECLINERLS' });
      fireEvent.click(screen.getByText(CONSTANTS.OK));
      expect(defaultProps.goBack).toHaveBeenCalled();
    });
  });

  describe('DECLINE alert type', () => {
    it('should render DECLINE alert for PL product', () => {
      const state = {
        ...mockState,
        stages: {
          stages: [{
            stageInfo: {
              application: {
                  cos_ref_number: 'TEST12345'
              },
              products: [{
                  campaign: 'HKSOZ01MCWB000',
                  product_category: 'PL'
              }]
            }
          }]
        }
      };
      
      renderComponent({ alertType: 'DECLINE' }, state);
      
      expect(screen.getByText(CONSTANTS.cardDeclineText)).toBeInTheDocument();
      expect(screen.getByText(CONSTANTS.regretTextPL)).toBeInTheDocument();
    });

    it('should render DECLINE alert for CC product', () => {
      const state = {
        ...mockState,
        stages: {
          stages: [{
            stageInfo: {
              application: {
                  cos_ref_number: 'TEST12345'
              },
              products: [{
                  campaign: 'HKSOZ01MCWB000',
                  product_category: 'CC'
              }]
            }
          }]
        }
      };
      
      renderComponent({ alertType: 'DECLINE' }, state);
      
      expect(screen.getByText(CONSTANTS.cardDeclineText)).toBeInTheDocument();
      expect(screen.getByText(CONSTANTS.regretTextCC)).toBeInTheDocument();
    });
  });

  describe('RESUBMIT alert type', () => {
    it('should render RESUBMIT alert with message', () => {
      const testMessage = '<p>Test message</p>';
      renderComponent({ 
        alertType: 'RESUBMIT',
        message: testMessage
      });
      
      expect(screen.getByText('Test message')).toBeInTheDocument();
      expect(screen.getByText(CONSTANTS.RETRY)).toBeInTheDocument();
    });
  });

  describe('OTPNot alert type', () => {
    it('should render OTPNot alert', () => {
      renderComponent({ alertType: 'OTPNot' });
      
      expect(screen.getByText(CONSTANTS.otpNotAvailable)).toBeInTheDocument();
      expect(screen.getByText(CONSTANTS.OK)).toBeInTheDocument();
    });
  });

  describe('ErrorCode alert type', () => {
    it('should render A02 error code alert', () => {
      const state = {
        ...mockState,
        stages: {
          stages: [{
            stageInfo: {
              application: {
                  cos_ref_number: 'TEST12345'
              },
              products: [{
                  campaign: 'HKSOZ01MCWB000',
                  name: 'TestProduct'
              }]
            }
          }]
        }
      };
      
      renderComponent({ 
        alertType: 'ErrorCode',
        errorCode: 'A02'
      }, state);
      
      expect(screen.getByText(CONSTANTS.errorCodeA02Header)).toBeInTheDocument();
      expect(screen.getByText(CONSTANTS.errorCodeA02Content)).toBeInTheDocument();
    });

    it('should render service error icon for A20 error code', () => {
      renderComponent({ 
        alertType: 'ErrorCode',
        errorCode: 'A20'
      });
      
      expect(screen.getByAltText('service error')).toBeInTheDocument();
      expect(screen.getByText(CONSTANTS.serviceErrorCodeContent)).toBeInTheDocument();
    });
  });

  describe('Success alert type', () => {
    it('should render Success alert', () => {
      renderComponent({ alertType: 'Success' });
      
      expect(screen.getByText(CONSTANTS.zolozText)).toBeInTheDocument();
      expect(screen.getByText(CONSTANTS.OK)).toBeInTheDocument();
    });
  });

  describe('invalideimagesize alert type', () => {
    it('should render invalideimagesize alert', () => {
      renderComponent({ alertType: 'invalideimagesize' });
      
      expect(screen.getByText(CONSTANTS.fileSizeExceed)).toBeInTheDocument();
      expect(screen.getByText(CONSTANTS.OK)).toBeInTheDocument();
    });
  });

  describe('zoloError alert type', () => {
    it('should render zoloError alert', () => {
      renderComponent({ alertType: 'zoloError' });
      
      expect(screen.getByText(CONSTANTS.zoloErrorMsg)).toBeInTheDocument();
      expect(screen.getByText('OK')).toBeInTheDocument();
    });
  });

  describe('PriorityOrPrivate alert type', () => {
    it('should render priority banking content for HKSOZ01MCWB000 campaign', () => {
      renderComponent({ alertType: 'PriorityOrPrivate' });
      
      // Assuming CONSTANTS.priorityBanking contains some expected text
      expect(screen.getByText(/priority banking/i)).toBeInTheDocument();
    });

    it('should render private banking content for HKSOZ02MCWB000 campaign', () => {
      const state = {
        ...mockState,
        stages: {
          stages: [{
            stageInfo: {
              application: {
                  cos_ref_number: 'TEST12345'
              },
              products: [{
                  campaign: 'HKSOZ02MCWB000'
              }]
            }
          }]
        }
      };
      
      renderComponent({ alertType: 'PriorityOrPrivate' }, state);
      
      // Assuming CONSTANTS.privateBanking contains some expected text
      expect(screen.getByText(/private banking/i)).toBeInTheDocument();
    });
  });

  describe('PriorityOrPrivateReview alert type', () => {
    it('should render private banking review content', () => {
      renderComponent({ alertType: 'PriorityOrPrivateReview' });
      
      // Assuming CONSTANTS.privateBankingReview contains some expected text
      expect(screen.getByText(/review/i)).toBeInTheDocument();
    });
  });

  it('should not render anything when no alertType is provided', () => {
    const { container } = renderComponent();
    expect(container.firstChild).toBeNull();
  });
});
