import React from 'react';
import { render, screen, waitFor, fireEvent } from '@testing-library/react';
import HeaderModal from './HeaderModal';
import { useSelector, useDispatch } from 'react-redux';

// Mock the modules and hooks
jest.mock('react-redux', () => ({
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

jest.mock('../../../modules/preApproval/services/preApprovalServices', () => ({
  getData: jest.fn(),
  getPDFData: jest.fn(),
}));

jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn(),
  },
}));

describe('HeaderModal Component', () => {
  const mockDispatch = jest.fn();
  const mockClosePdf = jest.fn();
  const mockFormConfigmetaData = {
    products: [{
      campaign: 'test-campaign'
    }]
  };

  beforeEach(() => {
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    (useSelector as jest.Mock).mockImplementation((selector) => {
      if (selector.toString().includes('formConfigmetaData')) {
        return mockFormConfigmetaData;
      }
      return {};
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  const defaultProps = {
    fileName: 'test.pdf',
    closepdf: mockClosePdf,
    title: 'Test Title',
    footer: 'Test Footer',
  };

  it('renders without crashing', () => {
    render(<HeaderModal {...defaultProps} />);
    expect(screen.getByText('Test Title')).toBeInTheDocument();
  });

  it('displays the correct title', () => {
    render(<HeaderModal {...defaultProps} />);
    expect(screen.getByText('Test Title')).toBeInTheDocument();
  });

  it('calls closepdf when close button is clicked', () => {
    render(<HeaderModal {...defaultProps} />);
    fireEvent.click(screen.getByRole('button', { name: /close/i }));
    expect(mockClosePdf).toHaveBeenCalled();
  });

  it('renders Pdf component with correct fileName', () => {
    render(<HeaderModal {...defaultProps} />);
    // Assuming Pdf component has some identifiable attribute
    expect(screen.getByTestId('pdf-component')).toHaveAttribute('data-filename', 'test.pdf');
  });

  it('displays footer content when footer prop is provided', () => {
    render(<HeaderModal {...defaultProps} />);
    expect(screen.getByText('Test Footer')).toBeInTheDocument();
  });

  it('does not display footer section when footer prop is not provided', () => {
    const { queryByText } = render(<HeaderModal {...defaultProps} footer={undefined} />);
    expect(queryByText('Test Footer')).not.toBeInTheDocument();
  });

  describe('PDF link handling', () => {
    beforeEach(() => {
      const mockResponse = {
        data: {
          products: {
            'test-campaign': [{ pdfURL: 'https://test.com/document.pdf' }]
          },
          productsMob: {
            'test-campaign': [{ pdfURL: 'https://test.com/mobile-document.pdf' }]
          },
          tncLinkCampaignCode: {
            'test-campaign': [{
              pdfLinks: [
                { url: 'https://test.com/terms.pdf', Title: 'Terms and Conditions' },
                { url: 'https://test.com/privacy.pdf', Title: 'Privacy Policy' }
              ]
            }]
          }
        }
      };

      const mockPdfData = new Blob(['test'], { type: 'application/pdf' });

      (require('../../../modules/preApproval/services/preApprovalServices').getData as jest.Mock)
        .mockResolvedValue(mockResponse);

      (require('../../../modules/preApproval/services/preApprovalServices').getPDFData as jest.Mock)
        .mockResolvedValue(mockPdfData);
    });

    it('fetches and displays PDF links', async () => {
      render(<HeaderModal {...defaultProps} />);
      
      await waitFor(() => {
        expect(screen.getByText('Terms and Conditions')).toBeInTheDocument();
        expect(screen.getByText('Privacy Policy')).toBeInTheDocument();
      });
    });

    it('sets up correct PDF download links', async () => {
      render(<HeaderModal {...defaultProps} />);
      
      await waitFor(() => {
        const termsLink = screen.getByText('Terms and Conditions');
        expect(termsLink).toHaveAttribute('href', 'https://test.com/terms.pdf');
        expect(termsLink).toHaveAttribute('download');
        expect(termsLink).toHaveAttribute('target', '_blank');
      });
    });
  });

  describe('language handling', () => {
    it('uses Chinese document URL when language is zh', async () => {
      (require('../../../utils/common/change.utils').getUrl.getLanguageInfo as jest.Mock)
        .mockReturnValue('zh');

      render(<HeaderModal {...defaultProps} />);
      
      await waitFor(() => {
        expect(require('../../../modules/preApproval/services/preApprovalServices').getData)
          .toHaveBeenCalledWith(process.env.REACT_APP_KFS_DOC_URL_Chinees);
      });
    });

    it('uses English document URL when language is not zh', async () => {
      (require('../../../utils/common/change.utils').getUrl.getLanguageInfo as jest.Mock)
        .mockReturnValue('en');

      render(<HeaderModal {...defaultProps} />);
      
      await waitFor(() => {
        expect(require('../../../modules/preApproval/services/preApprovalServices').getData)
          .toHaveBeenCalledWith(process.env.REACT_APP_KFS_DOC_URL);
      });
    });
  });

  describe('mobile detection', () => {
    beforeEach(() => {
      Object.defineProperty(window, 'innerWidth', {
        writable: true,
        configurable: true,
        value: 500,
      });

      Object.defineProperty(navigator, 'userAgent', {
        writable: true,
        configurable: true,
        value: 'iphone',
      });

      Object.defineProperty(navigator, 'maxTouchPoints', {
        writable: true,
        configurable: true,
        value: 1,
      });
    });

    it('uses mobile PDF URL when on mobile device', async () => {
      const mockResponse = {
        data: {
          products: {
            'test-campaign': [{ pdfURL: 'https://test.com/document.pdf' }]
          },
          productsMob: {
            'test-campaign': [{ pdfURL: 'https://test.com/mobile-document.pdf' }]
          },
          tncLinkCampaignCode: {
            'test-campaign': [{
              pdfLinks: []
            }]
          }
        }
      };

      (require('../../../modules/preApproval/services/preApprovalServices').getData as jest.Mock)
        .mockResolvedValue(mockResponse);

      render(<HeaderModal {...defaultProps} />);
      
      await waitFor(() => {
        expect(require('../../../modules/preApproval/services/preApprovalServices').getPDFData)
          .toHaveBeenCalledWith('https://test.com/mobile-document.pdf');
      });
    });
  });
});
