import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import { BrowserRouter as Router } from 'react-router-dom';
import configureStore from 'redux-mock-store';
import FFDSubmission from './FFDSubmission';
import submissionConstant from "../../../assets/_json/submission.json";

// Mock the URL utilities
jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn(),
    getChannelRefNo: jest.fn(),
    getParameterByName: jest.fn(),
  }
}));

// Mock window.location
const mockWindowLocation = {
  pathname: '/hk/ffd-casa',
  href: '',
  assign: jest.fn(),
};
Object.defineProperty(window, 'location', {
  value: mockWindowLocation,
  writable: true,
});

describe('FFDSubmission Component', () => {
  const mockStore = configureStore([]);
  let store: any;

  beforeEach(() => {
    store = mockStore({
      preApproval: {
        formConfigmetaData: {}
      },
      stages: {
        stages: [{
          stageInfo: {
            products: [{
              product_type: '1313'
            }]
          }
        }]
      }
    });

    // Default mocks
    (require('../../../utils/common/change.utils').getUrl.getLanguageInfo as jest.Mock).mockReturnValue('en');
    (require('../../../utils/common/change.utils').getUrl.getChannelRefNo as jest.Mock).mockReturnValue({ channelRefNo: 'TEST123' });
    (require('../../../utils/common/change.utils').getUrl.getParameterByName as jest.Mock).mockReturnValue(null);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('renders without crashing', () => {
    render(
      <Provider store={store}>
        <Router>
          <FFDSubmission />
        </Router>
      </Provider>
    );
    
    expect(screen.getByText(submissionConstant.CCProducts.ffdMainText)).toBeInTheDocument();
  });

  test('displays reference number from URL', () => {
    render(
      <Provider store={store}>
        <Router>
          <FFDSubmission />
        </Router>
      </Provider>
    );
    
    expect(screen.getByText(/TEST123/)).toBeInTheDocument();
  });

  test('displays fallback reference number when not in URL', () => {
    (require('../../../utils/common/change.utils').getUrl.getChannelRefNo as jest.Mock).mockReturnValue({ channelRefNo: null });
    
    render(
      <Provider store={store}>
        <Router>
          <FFDSubmission />
        </Router>
      </Provider>
    );
    
    expect(screen.getByText(/HK24101700230315/)).toBeInTheDocument();
  });

  test('displays English content by default', () => {
    render(
      <Provider store={store}>
        <Router>
          <FFDSubmission />
        </Router>
      </Provider>
    );
    
    expect(screen.getByText(submissionConstant.EN.refNoText)).toBeInTheDocument();
  });

  test('displays Chinese content when language is zh', () => {
    (require('../../../utils/common/change.utils').getUrl.getLanguageInfo as jest.Mock).mockReturnValue('zh');
    
    render(
      <Provider store={store}>
        <Router>
          <FFDSubmission />
        </Router>
      </Provider>
    );
    
    expect(screen.getByText(submissionConstant.CN.refNoText)).toBeInTheDocument();
  });

  test('displays Chinese content when language is zh-hk', () => {
    (require('../../../utils/common/change.utils').getUrl.getLanguageInfo as jest.Mock).mockReturnValue('zh-hk');
    
    render(
      <Provider store={store}>
        <Router>
          <FFDSubmission />
        </Router>
      </Provider>
    );
    
    expect(screen.getByText(submissionConstant.CN.refNoText)).toBeInTheDocument();
  });

  test('displays feedback section for product type 1313', () => {
    render(
      <Provider store={store}>
        <Router>
          <FFDSubmission />
        </Router>
      </Provider>
    );
    
    expect(screen.getByText("We'd like your feedback!")).toBeInTheDocument();
  });

  test('does not display feedback section for other product types', () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        stages: [{
          stageInfo: {
            products: [{
              product_type: '9999'
            }]
          }
        }]
      }
    });
    
    render(
      <Provider store={store}>
        <Router>
          <FFDSubmission />
        </Router>
      </Provider>
    );
    
    expect(screen.queryByText("We'd like your feedback!")).not.toBeInTheDocument();
  });

  test('navigates to home page when back button is clicked (mobile)', () => {
    render(
      <Provider store={store}>
        <Router>
          <FFDSubmission />
        </Router>
      </Provider>
    );
    
    const backButton = screen.getByText(submissionConstant.EN.btnMobileText);
    fireEvent.click(backButton);
    
    expect(window.location.href).toBe(process.env.REACT_APP_HOME_PAGE_URL);
  });

  test('navigates to home page when back button is clicked (desktop)', () => {
    // Mock desktop view by changing pathname
    mockWindowLocation.pathname = '/some-other-path';
    
    render(
      <Provider store={store}>
        <Router>
          <FFDSubmission />
        </Router>
      </Provider>
    );
    
    const backButton = screen.getByText(submissionConstant.CCProducts.btnPLText);
    fireEvent.click(backButton);
    
    expect(window.location.href).toBe(process.env.REACT_APP_HOME_PAGE_URL);
  });

  test('displays different main text for FFD-CASA path', () => {
    mockWindowLocation.pathname = '/hk/ffd-casa';
    
    render(
      <Provider store={store}>
        <Router>
          <FFDSubmission />
        </Router>
      </Provider>
    );
    
    expect(screen.getByText(submissionConstant.CCProducts.ffdMainText)).toBeInTheDocument();
  });

  test('displays standard main text for non-FFD-CASA path', () => {
    mockWindowLocation.pathname = '/some-other-path';
    
    render(
      <Provider store={store}>
        <Router>
          <FFDSubmission />
        </Router>
      </Provider>
    );
    
    expect(screen.getByText(submissionConstant.CCProducts.mainText)).toBeInTheDocument();
  });

  test('displays contact information in desktop view', () => {
    mockWindowLocation.pathname = '/some-other-path';
    
    render(
      <Provider store={store}>
        <Router>
          <FFDSubmission />
        </Router>
      </Provider>
    );
    
    expect(screen.getByText(submissionConstant.EN.contactText)).toBeInTheDocument();
    expect(screen.getByText(submissionConstant.phone)).toBeInTheDocument();
  });

  test('displays notification text in desktop view', () => {
    mockWindowLocation.pathname = '/some-other-path';
    
    render(
      <Provider store={store}>
        <Router>
          <FFDSubmission />
        </Router>
      </Provider>
    );
    
    expect(screen.getByText(submissionConstant.CCProducts.ffdNotifeidText)).toBeInTheDocument();
  });
});
