import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import AddressSearch from './AddressSearch';
import { CONSTANTS } from '../../../utils/common/constants';
import * as commonService from '../../../services/common-service';

// Mock the services and utilities
jest.mock('../../../services/common-service');
jest.mock('../../../services/validation-service');
jest.mock('../../../utils/common/change.utils');

const mockStore = configureStore([]);

describe('AddressSearch Component', () => {
  const mockProps = {
    data: {
      logical_field_name: 'res_building_estate_pt',
      rwb_label_name: 'Building/Estate Name',
      mandatory: 'Yes',
      length: 100,
      editable: false,
    },
    handleCallback: jest.fn(),
    handleFieldDispatch: jest.fn(),
  };

  const initialState = {
    stages: {
      stages: [{
        stageId: 'bd-1',
        stageInfo: {
          applicants: [{
            res_building_estate_pt_a_1: 'Test Building',
          }]
        }
      }],
      userInput: {
        applicants: [{
          res_building_estate_pt: 'Test Building',
        }]
      }
    },
    fielderror: {
      error: []
    },
    preApproval: {
      resumeAllowed: 'N'
    }
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders without crashing', () => {
    const store = mockStore(initialState);
    render(
      <Provider store={store}>
        <AddressSearch {...mockProps} />
      </Provider>
    );
    
    expect(screen.getByLabelText('Building/Estate Name')).toBeInTheDocument();
  });

  it('displays the default value from userInputSelector', () => {
    const store = mockStore(initialState);
    render(
      <Provider store={store}>
        <AddressSearch {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Building/Estate Name') as HTMLInputElement;
    expect(input.value).toBe('Test Building');
  });

  it('displays the default value from stageSelector when resumeAllowed is Y', () => {
    const resumeState = {
      ...initialState,
      preApproval: { resumeAllowed: 'Y' }
    };
    const store = mockStore(resumeState);
    
    render(
      <Provider store={store}>
        <AddressSearch {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Building/Estate Name') as HTMLInputElement;
    expect(input.value).toBe('Test Building');
  });

  it('handles change event and clears error', () => {
    const store = mockStore(initialState);
    render(
      <Provider store={store}>
        <AddressSearch {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Building/Estate Name');
    fireEvent.change(input, { target: { value: 'New Building' } });
    
    expect(mockProps.handleCallback).toHaveBeenCalled();
    expect(mockProps.handleFieldDispatch).toHaveBeenCalled();
  });

  it('sets error when mandatory field is empty', () => {
    const store = mockStore(initialState);
    render(
      <Provider store={store}>
        <AddressSearch {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Building/Estate Name');
    fireEvent.change(input, { target: { value: '' } });
    
    expect(screen.getByText(/Building\/Estate Name is required/)).toBeInTheDocument();
  });

  it('sets error for invalid characters', () => {
    const store = mockStore(initialState);
    render(
      <Provider store={store}>
        <AddressSearch {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Building/Estate Name');
    fireEvent.change(input, { target: { value: 'Invalid@Building' } });
    
    expect(screen.getByText(/Special characters are not allowed/)).toBeInTheDocument();
  });

  it('triggers address search for valid English input', async () => {
    const mockResponse = {
      getElementsByTagName: jest.fn().mockReturnValue([{
        getElementsByTagName: jest.fn().mockReturnValue([{
          querySelector: jest.fn().mockReturnValue({ textContent: 'Test Estate' })
        }])
      }])
    };
    
    (commonService.addressSearchRequest as jest.Mock).mockResolvedValue(mockResponse);
    
    const store = mockStore(initialState);
    render(
      <Provider store={store}>
        <AddressSearch {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Building/Estate Name');
    fireEvent.change(input, { target: { value: 'Test' } });
    
    await waitFor(() => {
      expect(commonService.addressSearchRequest).toHaveBeenCalled();
    });
  });

  it('triggers address search for valid Chinese input', async () => {
    const mockResponse = {
      getElementsByTagName: jest.fn().mockReturnValue([{
        getElementsByTagName: jest.fn().mockReturnValue([{
          querySelector: jest.fn().mockReturnValue({ textContent: '測試屋苑' })
        }])
      }])
    };
    
    (commonService.addressSearchRequest as jest.Mock).mockResolvedValue(mockResponse);
    
    const store = mockStore(initialState);
    render(
      <Provider store={store}>
        <AddressSearch {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Building/Estate Name');
    fireEvent.change(input, { target: { value: '測試' } });
    
    await waitFor(() => {
      expect(commonService.addressSearchRequest).toHaveBeenCalled();
    });
  });

  it('handles blur event with valid input', () => {
    const store = mockStore(initialState);
    render(
      <Provider store={store}>
        <AddressSearch {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Building/Estate Name');
    fireEvent.blur(input, { target: { value: 'Valid Building', validity: { valid: true } } });
    
    expect(mockProps.handleFieldDispatch).toHaveBeenCalled();
  });

  it('handles blur event with invalid input', () => {
    const store = mockStore(initialState);
    render(
      <Provider store={store}>
        <AddressSearch {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Building/Estate Name');
    fireEvent.blur(input, { target: { value: 'Invalid@Building', validity: { valid: false } } });
    
    expect(screen.getByText(/Special characters are not allowed/)).toBeInTheDocument();
  });

  it('handles focus event', () => {
    const store = mockStore(initialState);
    render(
      <Provider store={store}>
        <AddressSearch {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Building/Estate Name');
    fireEvent.focus(input);
    
    const actions = store.getActions();
    expect(actions).toContainEqual(expect.objectContaining({
      type: 'lastAccessed/getField',
      payload: 'res_building_estate_pt'
    }));
  });

  it('handles key down event with Tab', () => {
    const store = mockStore(initialState);
    render(
      <Provider store={store}>
        <AddressSearch {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Building/Estate Name');
    fireEvent.keyDown(input, { key: 'Tab', target: { value: '' } });
    
    expect(screen.getByText(/Building\/Estate Name is required/)).toBeInTheDocument();
  });

  it('displays tick mark when there is a value and no error', () => {
    const store = mockStore(initialState);
    render(
      <Provider store={store}>
        <AddressSearch {...mockProps} />
      </Provider>
    );
    
    expect(document.querySelector('.tick-class')).toBeInTheDocument();
  });

  it('displays datalist options when lovData is available', async () => {
    const mockResponse = {
      getElementsByTagName: jest.fn().mockReturnValue([{
        getElementsByTagName: jest.fn().mockReturnValue([{
          querySelector: jest.fn().mockReturnValue({ textContent: 'Test Estate' })
        }])
      }])
    };
    
    (commonService.addressSearchRequest as jest.Mock).mockResolvedValue(mockResponse);
    
    const store = mockStore(initialState);
    render(
      <Provider store={store}>
        <AddressSearch {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Building/Estate Name');
    fireEvent.change(input, { target: { value: 'Test' } });
    
    await waitFor(() => {
      expect(document.querySelector('datalist')).toBeInTheDocument();
      expect(document.querySelectorAll('option').length).toBeGreaterThan(0);
    });
  });

  it('handles office address fields when stage is ad-3', async () => {
    const officeState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        stages: [{
          stageId: 'ad-3',
          stageInfo: {
            applicants: [{
              off_building_estate_pt_a_1: 'Office Building',
            }]
          }
        }]
      }
    };
    
    const mockResponse = {
      getElementsByTagName: jest.fn().mockReturnValue([{
        getElementsByTagName: jest.fn().mockReturnValue([{
          querySelector: jest.fn().mockReturnValue({ textContent: 'Office Street' }),
          querySelectorAll: jest.fn().mockReturnValue([{ textContent: 'Central' }])
        }])
      }])
    };
    
    (commonService.addressSearchRequest as jest.Mock).mockResolvedValue(mockResponse);
    
    const officeProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'off_building_estate_pt'
      }
    };
    
    const store = mockStore(officeState);
    render(
      <Provider store={store}>
        <AddressSearch {...officeProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Building/Estate Name');
    fireEvent.change(input, { target: { value: 'Office' } });
    
    await waitFor(() => {
      expect(commonService.addressSearchRequest).toHaveBeenCalled();
    });
  });
});
