import { render, screen, fireEvent, act } from '@testing-library/react';
import CasaTNC from './CasaTNC';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import { StoreModel } from '../../../../utils/model/common-model';

// Mock necessary modules
jest.mock('../../../../shared/components/pdf/pdf', () => () => <div>PDF Viewer</div>);
jest.mock('../../services/preApprovalServices', () => ({
  getData: jest.fn(() => Promise.resolve({
    data: {
      products: { "campaignID": [{ pdfURL: "http://example.com/kfs.pdf" }] },
      productsMob: { "campaignID": [{ pdfURL: "http://example.com/kfs-mob.pdf" }] },
      tncLinkCampaignCode: { isCasa: [{ pdfLinks: [{ Title: "Test TnC", url: "http://example.com/tnc.pdf" }] }] },
    },
  })),
  getPDFData: jest.fn(() => Promise.resolve("PDF_DATA")),
}));
jest.mock('../../../../services/common-service', () => ({
  dispatchLoader: jest.fn(),
}));
jest.mock('../../store/preApproval-slice', () => ({
  preApprovalAction: {
    setKfsDocumentPdf: jest.fn(() => ({})),
  },
}));

// Mock global fetch for download
global.fetch = jest.fn(() =>
  Promise.resolve({
    data: "mocked_pdf_data",
  })
) as jest.Mock;

// Setup mock store
const middlewares = [thunk];
const mockStore = configureStore(middlewares);

const store = mockStore({
  preApproval: {
    currentStage: '',
    formConfigmetaData: {
      products: [{ campaign: "campaignID" }]
    }
  },
});

describe('CasaTNC Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should render Spinner initially', async () => {
    await act(async () => {
      render(
        <Provider store={store}>
          <CasaTNC isVisible={true} onScrollEnd={jest.fn()} stageID={undefined} />
        </Provider>
      );
    });

    expect(screen.getByText('Spinner')).toBeInTheDocument;
  });

  it('should render Title and Download button after loading', async () => {
    await act(async () => {
      render(
        <Provider store={store}>
          <CasaTNC isVisible={true} onScrollEnd={jest.fn()} stageID={undefined} />
        </Provider>
      );
    });

    expect(await screen.findByText('Before you start your application:')).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /download/i })).toBeInTheDocument();
  });

  it('should download PDF on download button click', async () => {
    await act(async () => {
      render(
        <Provider store={store}>
          <CasaTNC isVisible={true} onScrollEnd={jest.fn()} stageID={undefined} />
        </Provider>
      );
    });

    const downloadButton = await screen.findByRole('button', { name: /download/i });
    fireEvent.click(downloadButton);

    expect(global.fetch).toHaveBeenCalled();
  });

  it('should show Accept button after scrolling to bottom', async () => {
    await act(async () => {
      render(
        <Provider store={store}>
          <CasaTNC isVisible={true} onScrollEnd={jest.fn()} stageID={undefined} />
        </Provider>
      );
    });

    const scrollContainer = screen.getByText('PDF Viewer').parentElement;

    if (scrollContainer) {
      fireEvent.scroll(scrollContainer, {
        target: { scrollTop: 1000 },
      });

      await act(async () => {
        fireEvent.scroll(scrollContainer, { target: { scrollTop: 2000 } });
      });

      expect(await screen.findByText('I ACCEPT')).toBeInTheDocument();
    }
  });

  it('should render TnC links', async () => {
    await act(async () => {
      render(
        <Provider store={store}>
          <CasaTNC isVisible={true} onScrollEnd={jest.fn()} stageID={undefined} />
        </Provider>
      );
    });

    expect(await screen.findByText('Test TnC')).toBeInTheDocument();
  });
});
