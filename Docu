import MockAdapter from 'axios-mock-adapter';
import axios from 'axios';
import {
  postSaveData,
  postPeserveData,
  getResumeRequest,
  postDocSaveData,
  getCASADetails,
  postBasicData,
  postAditionalData,
  postDocuments,
  postQRCodeZOLO,
  postZOLOCheck,
  postZolozAcknowledge,
  postFinalAcknowledge,
  postPdfPreview,
  postTMXUserSession,
  postFulFilmentData
} from './services'; // Adjust the path to your services file
import { store } from './__mocks__/store';
import PreApprovalUtil from './__mocks__/preApprovalUtils';
import { dispatchError } from './__mocks__/common-service';
import { getUrl } from './__mocks__/change.utils';
import { getData } from './__mocks__/preApprovalServices';

describe('API Service Functions', () => {
  let mockAxios;

  beforeEach(() => {
    mockAxios = new MockAdapter(axios);
    jest.clearAllMocks();
  });

  afterEach(() => {
    mockAxios.reset();
  });

  describe('postSaveData', () => {
    it('should post data successfully and return response', async () => {
      const url = `${process.env.REACT_APP_RTOB_BASE_URL}${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}12345`;
      const mockResponse = { data: { success: true } };
      mockAxios.onPost(url).reply(200, mockResponse);

      const response = await postSaveData();

      expect(response).toEqual(mockResponse);
      expect(PreApprovalUtil.getFormConfigPayload).toHaveBeenCalled();
      expect(PreApprovalUtil.getAckMetaData).toHaveBeenCalledWith('12345');
      expect(mockAxios.history.post[0].headers['Sc-Client-Context']).toBe('mocked-ack-metadata');
    });

    it('should handle error and dispatch error', async () => {
      const url = `${process.env.REACT_APP_RTOB_BASE_URL}${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}12345`;
      const mockError = { message: 'Network Error' };
      mockAxios.onPost(url).reply(500, mockError);

      const response = await postSaveData();

      expect(response).toEqual(mockError);
      expect(dispatchError).toHaveBeenCalledWith(mockError);
    });
  });

  describe('postPeserveData', () => {
    it('should post preserve data successfully', async () => {
      const url = `${process.env.REACT_APP_RTOB_BASE_URL}${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}12345`;
      const mockResponse = { data: { success: true } };
      mockAxios.onPost(url).reply(200, mockResponse);

      const response = await postPeserveData();

      expect(response).toEqual(mockResponse);
      expect(PreApprovalUtil.getFormConfigPayload).toHaveBeenCalled();
      expect(mockAxios.history.post[0].data).toContain('"ekycdocId":"DOC123"');
    });

    it('should handle error and reject promise', async () => {
      const url = `${process.env.REACT_APP_RTOB_BASE_URL}${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}12345`;
      const mockError = { message: 'Network Error' };
      mockAxios.onPost(url).reply(500, mockError);

      await expect(postPeserveData()).rejects.toEqual(mockError);
      expect(dispatchError).toHaveBeenCalledWith(mockError);
    });
  });

  describe('getResumeRequest', () => {
    it('should fetch resume data successfully', async () => {
      const url = `${process.env.REACT_APP_RTOB_BASE_URL}${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}APP123`;
      const mockResponse = { data: { application: {} } };
      mockAxios.onGet(url).reply(200, mockResponse);

      const response = await getResumeRequest('APP123');

      expect(response).toEqual(mockResponse);
    });

    it('should handle error and reject promise', async () => {
      const url = `${process.env.REACT_APP_RTOB_BASE_URL}${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}APP123`;
      const mockError = { message: 'Not Found' };
      mockAxios.onGet(url).reply(404, mockError);

      await expect(getResumeRequest('APP123')).rejects.toEqual(mockError);
      expect(dispatchError).toHaveBeenCalledWith(mockError);
    });
  });

  describe('postDocSaveData', () => {
    it('should post document data successfully', async () => {
      const url = `${process.env.REACT_APP_RTOB_BASE_URL}${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}12345`;
      const mockResponse = { data: { success: true } };
      mockAxios.onPost(url).reply(200, mockResponse);

      const response = await postDocSaveData([], { transactionId: 'TX123', result: { resultMessage: 'Success' } });

      expect(response).toEqual(mockResponse);
      expect(PreApprovalUtil.getFormConfigPayload).toHaveBeenCalled();
    });
  });

  describe('getCASADetails', () => {
    it('should fetch CASA details successfully', async () => {
      const url = `${process.env.REACT_APP_CASA_SEGMENT}?rnd=`;
      const mockResponse = { data: { details: {} } };
      getData.mockResolvedValue(mockResponse);

      const response = await getCASADetails();

      expect(response).toEqual(mockResponse);
      expect(getData).toHaveBeenCalledWith(expect.stringContaining(url));
    });
  });

  describe('postBasicData', () => {
    it('should post basic data for CC product category', async () => {
      const url = `${process.env.REACT_APP_RTOB_BASE_URL}${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}12345${process.env.REACT_APP_RTOB_BASIC_DATA_END_POINT}`;
      const mockResponse = { data: { success: true } };
      mockAxios.onPost(url).reply(200, mockResponse);

      const response = await postBasicData();

      expect(response).toEqual(mockResponse);
      expect(getUrl.getParameterByName).toHaveBeenCalledWith('affiliation');
      expect(mockAxios.history.post[0].data).toContain('"affiliation_a_1":"AFF123"');
    });
  });

  describe('postAditionalData', () => {
    it('should post additional data successfully', async () => {
      const url = `${process.env.REACT_APP_RTOB_BASE_URL}${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}12345${process.env.REACT_APP_RTOB_ADDITIONAL_DATA_END_POINT}`;
      const mockResponse = { data: { success: true } };
      mockAxios.onPost(url).reply(200, mockResponse);

      const response = await postAditionalData();

      expect(response).toEqual(mockResponse);
      expect(PreApprovalUtil.getADFormConfigPayload).toHaveBeenCalled();
    });
  });

  describe('postDocuments', () => {
    it('should post document file successfully', async () => {
      const url = `${process.env.REACT_APP_RTOB_BASE_URL}${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}12345${process.env.REACT_APP_RTOB_DOCUMENTS_END_POINT}`;
      const mockResponse = { data: { success: true } };
      mockAxios.onPost(url).reply(200, mockResponse);

      const file = new Blob(['file content'], { type: 'image/png' });
      const response = await postDocuments('12345', file);

      expect(response).toEqual(mockResponse);
      expect(mockAxios.history.post[0].headers['Content-Type']).toContain('multipart/form-data');
    });
  });

  describe('postQRCodeZOLO', () => {
    it('should post QR code data successfully', async () => {
      const url = `${process.env.REACT_APP_RTOB_BASE_URL}${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}12345${process.env.REACT_APP_RTOB_QRCODE_SMART_HKID_END_POINT}`;
      const mockResponse = { data: { qrCode: 'generated' } };
      mockAxios.onPost(url).reply(200, mockResponse);

      const response = await postQRCodeZOLO('12345', 'HKID');

      expect(response).toEqual(mockResponse);
      expect(mockAxios.history.post[0].data).toContain('"docType":"HKID"');
    });
  });

  describe('postZOLOCheck', () => {
    it('should post ZOLO check data successfully', async () => {
      const url = `${process.env.REACT_APP_RTOB_BASE_URL}${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}12345${process.env.REACT_APP_RTOB_ZOLO_CHECK_RESULT_END_POINT}`;
      const mockResponse = { data: { result: 'verified' } };
      mockAxios.onPost(url).reply(200, mockResponse);

      const response = await postZOLOCheck('12345', 'TX123', 'HKID');

      expect(response).toEqual(mockResponse);
      expect(mockAxios.history.post[0].data).toContain('"transactionId":"TX123"');
    });
  });

  describe('postZolozAcknowledge', () => {
    it('should post Zoloz acknowledge data successfully', async () => {
      const url = `${process.env.REACT_APP_RTOB_BASE_URL}${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}12345${process.env.REACT_APP_RTOB_DOCUMENTS_END_POINT}${process.env.REACT_APP_RTOB_ACKNOWLEDGE_END_POINT}`;
      const mockResponse = { data: { success: true } };
      mockAxios.onPost(url).reply(200, mockResponse);

      const response = await postZolozAcknowledge('12345', []);

      expect(response).toEqual(mockResponse);
      expect(mockAxios.history.post[0].data).toContain('"stage":"Zoloz_ACK"');
    });
  });

  describe('postFinalAcknowledge', () => {
    it('should post final acknowledge data successfully', async () => {
      const url = `${process.env.REACT_APP_RTOB_BASE_URL}${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}12345${process.env.REACT_APP_RTOB_DOCUMENTS_END_POINT}${process.env.REACT_APP_RTOB_ACKNOWLEDGE_END_POINT}`;
      const mockResponse = { data: { success: true } };
      mockAxios.onPost(url).reply(200, mockResponse);

      const response = await postFinalAcknowledge('12345');

      expect(response).toEqual(mockResponse);
      expect(mockAxios.history.post[0].data).toContain('"stage":"Final_ACK"');
    });
  });

  describe('postPdfPreview', () => {
    it('should post PDF preview data successfully', async () => {
      const url = `${process.env.REACT_APP_RTOB_BASE_URL}${process.env.REACT_APP_RTOB_DYNAMIC_DOCUMENT}12345${process.env.REACT_APP_RTOB_PDF_PREVIEW}`;
      const mockResponse = { data: { pdf: 'generated' } };
      mockAxios.onPost(url).reply(200, mockResponse);

      const response = await postPdfPreview('12345');

      expect(response).toEqual(mockResponse);
      expect(mockAxios.history.post[0].data).toContain('"action":"generate"');
    });
  });

  describe('postTMXUserSession', () => {
    it('should post TMX user session data successfully', async () => {
      const url = `${process.env.REACT_APP_RTOB_BASE_URL}${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}12345${process.env.REACT_APP_RTOB_VERIFY_TMX_USER_SESSION}`;
      const mockResponse = { data: { session: 'verified' } };
      mockAxios.onPost(url).reply(200, mockResponse);

      const response = await postTMXUserSession('12345');

      expect(response).toEqual(mockResponse);
      expect(PreApprovalUtil.generateUUID).toHaveBeenCalled();
    });
  });

  describe('postFulFilmentData', () => {
    it('should post fulfillment data successfully', async () => {
      const url = `${process.env.REACT_APP_RTOB_BASE_URL}${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}12345${process.env.REACT_APP_RTOB_FULFILMENT_DATA}`;
      const mockResponse = { data: { success: true } };
      mockAxios.onPost(url).reply(200, mockResponse);

      const payload = {
        applicants: [{ requested_loan_amount_a_1: 10000, oth_bank_name_a_1: 'Bank', oth_bank_number_a_1: '123456' }],
        stage: {},
        application: {}
      };
      const response = await postFulFilmentData(payload);

      expect(response).toEqual(mockResponse);
      expect(mockAxios.history.post[0].data).toContain('"draw_down_amount_a_1":10000');
    });
  });
});
