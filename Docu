import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import OnboardingBeforeStart from './OnboardingBeforeStart';
import { getData, getPDFData } from '../../services/preApprovalServices';
import { useDispatch, useSelector } from 'react-redux';
import { getUrl } from '../../../../utils/common/change.utils';
import { CONSTANTS } from '../../../../utils/common/constants';

// Mock the external dependencies
jest.mock('../../services/preApprovalServices');
jest.mock('react-redux');
jest.mock('../../../../utils/common/change.utils');
jest.mock('../../../../utils/common/constants');

// Mock the PDF component since it's complex and we don't need to test it here
jest.mock('../../../../shared/components/pdf/pdf', () => () => <div>Mock PDF</div>);

// Mock the Spinner component
jest.mock('../../../../shared/components/spinner/spinner', () => () => <div>Loading...</div>);

describe('OnboardingBeforeStart Component', () => {
  const mockDispatch = jest.fn();
  const mockOnScrollEnd = jest.fn();
  const mockNextPage = jest.fn();

  const mockStore = {
    stages: {
      stages: [{
        stageId: 'some-stage',
        stageInfo: {
          products: [{
            campaign: 'HKPIL23PLSTP10'
          }]
        }
      }]
    },
    preApproval: {
      formConfigmetaData: {
        products: [{
          campaign: 'HKPIL23PLSTP10'
        }]
      }
    }
  };

  beforeEach(() => {
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    (useSelector as jest.Mock).mockImplementation((selector) => selector(mockStore));
    (getUrl.getLanguageInfo as jest.Mock).mockReturnValue('en');
    (getData as jest.Mock).mockResolvedValue({
      data: {
        productsMob: {
          HKPIL23PLSTP10: [{ pdfURL: 'https://pt.sc.com/mock-pdf-url' }]
        },
        products: {
          HKPIL23PLSTP10: [{ pdfURL: 'https://pt.sc.com/mock-pdf-url' }]
        },
        CampaignTnCMob: {
          HKPIL23PLSTP10: [{ pdfURL: 'https://pt.sc.com/mock-tnc-url' }]
        },
        CampaignTnC: {
          HKPIL23PLSTP10: [{ pdfURL: 'https://pt.sc.com/mock-tnc-url' }]
        },
        tncLinkCampaignCode: {
          HKPIL23PLSTP10: [{
            pdfLinks: [
              { Title: 'II. Personal Loan Terms', url: 'mock-url-1' },
              { Title: 'III. Client Terms', url: 'mock-url-2' },
              { Title: 'Welcome Offers', url: 'mock-url-3' }
            ]
          }]
        }
      }
    });
    (getPDFData as jest.Mock).mockResolvedValue('mock-pdf-data');
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders spinner initially', () => {
    render(
      <OnboardingBeforeStart
        isVisible={true}
        onScrollEnd={mockOnScrollEnd}
        stageID={0}
        nextPage={mockNextPage}
      />
    );
    expect(screen.getByText('Loading...')).toBeInTheDocument();
  });

  describe('Stage 0 (KFS Document)', () => {
    it('loads and displays KFS document for desktop', async () => {
      Object.defineProperty(window.navigator, 'userAgent', {
        value: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',
        writable: true
      });

      render(
        <OnboardingBeforeStart
          isVisible={true}
          onScrollEnd={mockOnScrollEnd}
          stageID={0}
          nextPage={mockNextPage}
        />
      );

      await waitFor(() => {
        expect(getData).toHaveBeenCalled();
        expect(getPDFData).toHaveBeenCalledWith('https://pt.sc.com/mock-pdf-url');
        expect(mockDispatch).toHaveBeenCalled();
        expect(mockOnScrollEnd).toHaveBeenCalledWith(true);
        expect(screen.getByText('Mock PDF')).toBeInTheDocument();
      });
    });

    it('loads and displays KFS document for mobile', async () => {
      Object.defineProperty(window.navigator, 'userAgent', {
        value: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)',
        writable: true
      });

      render(
        <OnboardingBeforeStart
          isVisible={true}
          onScrollEnd={mockOnScrollEnd}
          stageID={0}
          nextPage={mockNextPage}
        />
      );

      await waitFor(() => {
        expect(getData).toHaveBeenCalled();
        expect(getPDFData).toHaveBeenCalledWith('https://pt.sc.com/mock-pdf-url');
      });
    });

    it('handles localhost URL replacement', async () => {
      Object.defineProperty(window, 'location', {
        value: { host: 'localhost:3000' },
        writable: true
      });

      render(
        <OnboardingBeforeStart
          isVisible={true}
          onScrollEnd={mockOnScrollEnd}
          stageID={0}
          nextPage={mockNextPage}
        />
      );

      await waitFor(() => {
        expect(getPDFData).toHaveBeenCalledWith('http://localhost:3000/mock-pdf-url');
      });
    });

    it('downloads KFS PDF when download button is clicked', async () => {
      const createElementSpy = jest.spyOn(document, 'createElement');
      const appendChildSpy = jest.spyOn(document.body, 'appendChild');
      const removeChildSpy = jest.spyOn(document.body, 'removeChild');

      render(
        <OnboardingBeforeStart
          isVisible={true}
          onScrollEnd={mockOnScrollEnd}
          stageID={0}
          nextPage={mockNextPage}
        />
      );

      await waitFor(() => {
        const downloadButton = screen.getByText('Download');
        fireEvent.click(downloadButton);

        expect(createElementSpy).toHaveBeenCalledWith('a');
        expect(appendChildSpy).toHaveBeenCalled();
        expect(removeChildSpy).toHaveBeenCalled();
      });
    });

    it('handles Safari browser for PDF download', async () => {
      Object.defineProperty(window.navigator, 'userAgent', {
        value: 'Safari',
        writable: true
      });

      render(
        <OnboardingBeforeStart
          isVisible={true}
          onScrollEnd={mockOnScrollEnd}
          stageID={0}
          nextPage={mockNextPage}
        />
      );

      await waitFor(() => {
        const downloadButton = screen.getByText('Download');
        fireEvent.click(downloadButton);
      });
    });
  });

  describe('Stage 1 (Terms and Conditions)', () => {
    it('loads and displays T&C document', async () => {
      render(
        <OnboardingBeforeStart
          isVisible={true}
          onScrollEnd={mockOnScrollEnd}
          stageID={1}
          nextPage={mockNextPage}
        />
      );

      await waitFor(() => {
        expect(getData).toHaveBeenCalled();
        expect(getPDFData).toHaveBeenCalledWith('https://pt.sc.com/mock-tnc-url');
        expect(screen.getByText('Mock PDF')).toBeInTheDocument();
        expect(screen.getByText('Download')).toBeInTheDocument();
      });
    });

    it('displays terms and conditions table', async () => {
      render(
        <OnboardingBeforeStart
          isVisible={true}
          onScrollEnd={mockOnScrollEnd}
          stageID={1}
          nextPage={mockNextPage}
        />
      );

      await waitFor(() => {
        expect(screen.getByText('II. Personal Loan Terms')).toBeInTheDocument();
        expect(screen.getByText('III. Client Terms')).toBeInTheDocument();
        expect(screen.getByText('Welcome Offers')).toBeInTheDocument();
      });
    });

    it('downloads terms PDF when download link is clicked', async () => {
      render(
        <OnboardingBeforeStart
          isVisible={true}
          onScrollEnd={mockOnScrollEnd}
          stageID={1}
          nextPage={mockNextPage}
        />
      );

      await waitFor(() => {
        const downloadLinks = screen.getAllByText('Download');
        fireEvent.click(downloadLinks[0]);
      });
    });

    it('handles different campaign IDs for PDF downloads', async () => {
      const mockStoreCC = {
        ...mockStore,
        stages: {
          stages: [{
            stageId: 'some-stage',
            stageInfo: {
              products: [{
                campaign: 'HKSOG20VAWV000'
              }]
            }
          }]
        },
        preApproval: {
          formConfigmetaData: {
            products: [{
              campaign: 'HKSOG20VAWV000'
            }]
          }
        }
      };

      (useSelector as jest.Mock).mockImplementation((selector) => selector(mockStoreCC));

      render(
        <OnboardingBeforeStart
          isVisible={true}
          onScrollEnd={mockOnScrollEnd}
          stageID={1}
          nextPage={mockNextPage}
        />
      );

      await waitFor(() => {
        const downloadLinks = screen.getAllByText('Download');
        fireEvent.click(downloadLinks[0]);
      });
    });
  });

  describe('Language Handling', () => {
    it('displays Chinese text when language is zh', async () => {
      (getUrl.getLanguageInfo as jest.Mock).mockReturnValue('zh');

      render(
        <OnboardingBeforeStart
          isVisible={true}
          onScrollEnd={mockOnScrollEnd}
          stageID={0}
          nextPage={mockNextPage}
        />
      );

      await waitFor(() => {
        // Assuming CONSTANTS.DownloadBtn_CN is '下载' for Chinese
        expect(screen.getByText('下载')).toBeInTheDocument();
      });
    });

    it('displays Hong Kong text when language is hk', async () => {
      (getUrl.getLanguageInfo as jest.Mock).mockReturnValue('hk');

      render(
        <OnboardingBeforeStart
          isVisible={true}
          onScrollEnd={mockOnScrollEnd}
          stageID={0}
          nextPage={mockNextPage}
        />
      );

      await waitFor(() => {
        // Assuming CONSTANTS.DownloadBtn_HK is '下載' for Hong Kong
        expect(screen.getByText('下載')).toBeInTheDocument();
      });
    });
  });

  describe('Scroll Behavior', () => {
    it('calls onScrollEnd when scrolled to bottom', async () => {
      const mockRef = {
        current: {
          addEventListener: jest.fn(),
          removeEventListener: jest.fn(),
          scrollTop: 100,
          scrollHeight: 200,
          clientHeight: 100
        }
      };

      jest.spyOn(React, 'useRef').mockReturnValue(mockRef);

      render(
        <OnboardingBeforeStart
          isVisible={true}
          onScrollEnd={mockOnScrollEnd}
          stageID={0}
          nextPage={mockNextPage}
        />
      );

      await waitFor(() => {
        // Simulate scroll event
        const scrollEvent = new Event('scroll');
        mockRef.current.dispatchEvent(scrollEvent);
        
        expect(mockOnScrollEnd).toHaveBeenCalledWith(false);
      });
    });

    it('scrolls down when footer button is clicked', async () => {
      const mockScrollBy = jest.fn();
      const mockRef = {
        current: {
          addEventListener: jest.fn(),
          removeEventListener: jest.fn(),
          scrollBy: mockScrollBy
        }
      };

      jest.spyOn(React, 'useRef').mockReturnValue(mockRef);

      render(
        <OnboardingBeforeStart
          isVisible={true}
          onScrollEnd={mockOnScrollEnd}
          stageID={0}
          nextPage={mockNextPage}
        />
      );

      await waitFor(() => {
        const scrollButton = screen.getByRole('button', { name: /scroll/i });
        fireEvent.click(scrollButton);
        expect(mockScrollBy).toHaveBeenCalledWith({ top: 200, behavior: 'smooth' });
      });
    });

    it('shows accept button when not visible', async () => {
      render(
        <OnboardingBeforeStart
          isVisible={false}
          onScrollEnd={mockOnScrollEnd}
          stageID={0}
          nextPage={mockNextPage}
        />
      );

      await waitFor(() => {
        const acceptButton = screen.getByText('Accept');
        fireEvent.click(acceptButton);
        expect(mockNextPage).toHaveBeenCalled();
      });
    });
  });

  describe('Device Detection', () => {
    it('detects iPhone Safari browser', () => {
      Object.defineProperty(window.navigator, 'userAgent', {
        value: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1',
        writable: true
      });

      render(
        <OnboardingBeforeStart
          isVisible={true}
          onScrollEnd={mockOnScrollEnd}
          stageID={0}
          nextPage={mockNextPage}
        />
      );

      // Check if the appropriate class would be applied
      // This would need to be verified in the actual DOM
    });

    it('detects Android browser', () => {
      Object.defineProperty(window.navigator, 'userAgent', {
        value: 'Mozilla/5.0 (Linux; Android 10) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36',
        writable: true
      });

      render(
        <OnboardingBeforeStart
          isVisible={true}
          onScrollEnd={mockOnScrollEnd}
          stageID={0}
          nextPage={mockNextPage}
        />
      );
    });

    it('detects desktop browser', () => {
      Object.defineProperty(window.navigator, 'userAgent', {
        value: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        writable: true
      });

      render(
        <OnboardingBeforeStart
          isVisible={true}
          onScrollEnd={mockOnScrollEnd}
          stageID={0}
          nextPage={mockNextPage}
        />
      );
    });
  });

  describe('Error Handling', () => {
    it('handles API errors gracefully', async () => {
      (getData as jest.Mock).mockRejectedValue(new Error('API Error'));

      render(
        <OnboardingBeforeStart
          isVisible={true}
          onScrollEnd={mockOnScrollEnd}
          stageID={0}
          nextPage={mockNextPage}
        />
      );

      await waitFor(() => {
        expect(mockDispatch).toHaveBeenCalledWith(expect.any(Function));
      });
    });
  });
});
