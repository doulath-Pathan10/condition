import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import { BrowserRouter as Router } from 'react-router-dom';
import axios from 'axios';
import Submission from './Submission';

// Mock redux store
const mockStore = createStore(() => ({
  preApproval: {
    formConfigmetaData: {}
  },
  stages: {
    stages: [{
      stageInfo: {
        products: [{
          product_category: 'CC',
          product_type: '1241',
          campaign: 'HKSJG20VAWC000',
          offer_details: [{ offer_status: '1001' }]
        }],
        application: {
          application_reference: 'TEST123',
          channel_reference: 'REF123'
        },
        applicants: [{
          casaSegment: 'N',
          asiaMilesCard: 'N',
          aof_doc_id: 'DOC123'
        }]
      }
    }]
  }
}));

// Mock axios
jest.mock('axios');
const mockedAxios = axios as jest.Mocked<typeof axios>;

// Mock react-router-dom hooks
const mockNavigate = jest.fn();
jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useNavigate: () => mockNavigate,
  useLocation: () => ({
    pathname: '/hk/cc'
  })
}));

// Mock getUrl utility
jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn().mockReturnValue('en'),
    getParameterByName: jest.fn().mockReturnValue('3264')
  }
}));

describe('Submission Component', () => {
  beforeEach(() => {
    // Mock successful PDF download
    mockedAxios.get.mockResolvedValueOnce({
      status: 200,
      data: new ArrayBuffer(8)
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders without crashing', () => {
    render(
      <Provider store={mockStore}>
        <Router>
          <Submission />
        </Router>
      </Provider>
    );
    
    expect(screen.getByText(/Thank you for your application/i)).toBeInTheDocument();
  });

  it('displays the correct reference number', () => {
    render(
      <Provider store={mockStore}>
        <Router>
          <Submission />
        </Router>
      </Provider>
    );
    
    expect(screen.getByText(/Reference number: REF123/i)).toBeInTheDocument();
  });

  it('shows the correct card image for SimplyCash horizontal', () => {
    render(
      <Provider store={mockStore}>
        <Router>
          <Submission />
        </Router>
      </Provider>
    );
    
    const cardImage = screen.getByRole('img');
    expect(cardImage).toHaveAttribute('width', '412');
  });

  it('handles download AOF button click', async () => {
    render(
      <Provider store={mockStore}>
        <Router>
          <Submission />
        </Router>
      </Provider>
    );
    
    const downloadButton = screen.getByText(/Save your application/i);
    fireEvent.click(downloadButton);
    
    await waitFor(() => {
      expect(mockedAxios.get).toHaveBeenCalled();
    });
  });

  it('handles back button click', () => {
    render(
      <Provider store={mockStore}>
        <Router>
          <Submission />
        </Router>
      </Provider>
    );
    
    const backButton = screen.getByText(/Back to homepage/i);
    fireEvent.click(backButton);
    
    expect(window.location.href).toBe('http://localhost/');
  });

  it('displays PL success screen when product is PL', () => {
    const plStore = createStore(() => ({
      stages: {
        stages: [{
          stageInfo: {
            products: [{
              product_category: 'PL',
              product_type: '1241',
              offer_details: [{ offer_status: '1001' }]
            }],
            application: {
              application_reference: 'TEST123',
              channel_reference: 'REF123'
            },
            applicants: [{}]
          }
        }]
      }
    }));
    
    render(
      <Provider store={plStore}>
        <Router>
          <Submission />
        </Router>
      </Provider>
    );
    
    expect(screen.getByText(/We will notify you once your application is approved/i)).toBeInTheDocument();
  });

  it('displays FFD submission when path is /hk/ffd-casa and casaSegment is Y', () => {
    const ffdStore = createStore(() => ({
      stages: {
        stages: [{
          stageInfo: {
            products: [{
              product_category: 'CC',
              product_type: '1241'
            }],
            application: {
              application_reference: 'TEST123'
            },
            applicants: [{
              casaSegment: 'Y'
            }]
          }
        }]
      }
    }));
    
    jest.spyOn(window, 'location', 'get').mockReturnValue({
      ...window.location,
      pathname: '/hk/ffd-casa'
    } as any);
    
    render(
      <Provider store={ffdStore}>
        <Router>
          <Submission />
        </Router>
      </Provider>
    );
    
    expect(screen.getByText(/Thank you for your application/i)).toBeInTheDocument();
  });

  it('displays survey link for Asia Miles card', () => {
    const asiaMilesStore = createStore(() => ({
      stages: {
        stages: [{
          stageInfo: {
            products: [{
              product_category: 'CC',
              product_type: '1313',
              campaign: 'HKSOZ01MCWB000'
            }],
            application: {
              application_reference: 'TEST123'
            },
            applicants: [{
              casaSegment: 'N',
              asiaMilesCard: 'Y'
            }]
          }
        }]
      }
    }));
    
    render(
      <Provider store={asiaMilesStore}>
        <Router>
          <Submission />
        </Router>
      </Provider>
    );
    
    expect(screen.getByText(/We'd like your feedback!/i)).toBeInTheDocument();
  });

  it('handles PDF download error', async () => {
    mockedAxios.get.mockRejectedValueOnce(new Error('Download failed'));
    
    render(
      <Provider store={mockStore}>
        <Router>
          <Submission />
        </Router>
      </Provider>
    );
    
    const downloadButton = screen.getByText(/Save your application/i);
    fireEvent.click(downloadButton);
    
    await waitFor(() => {
      expect(mockedAxios.get).toHaveBeenCalled();
    });
  });
});
