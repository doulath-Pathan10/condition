import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import Close from './Close'; // Adjust the import path as needed
import * as preApprovalPostServices from '../../../modules/preApproval/services/preApprovalPostServices';
import trackEvents from '../../../services/track-events';

// Mock dependencies
jest.mock('../../../services/track-events', () => ({
  triggerAdobeEvent: jest.fn(),
}));

jest.mock('../../../modules/preApproval/services/preApprovalPostServices', () => ({
  postPeserveData: jest.fn(),
}));

describe('Close Component', () => {
  const mockStore = configureStore([thunk]);
  let initialState: any;
  let store: any;

  beforeEach(() => {
    // Setup initial state that mimics the Redux store
    initialState = {
      stages: {
        stages: [
          {
            stageId: 'test-stage',
            stageInfo: {
              stage: {
                page_id: 'test-page',
                stage_id: 'TEST',
              },
            },
            userInput: {
              applicants: [{ id: 'test-applicant' }],
            },
          },
        ],
        journeyType: 'test-journey',
        userInput: {
          applicants: [{ id: 'test-applicant' }],
        },
      },
      lov: {},
      valueUpdate: {},
      error: {},
    };

    store = mockStore(initialState);

    // Mock window.location
    delete (window as any).location;
    (window as any).location = { href: '' };

    // Mock environment variables
    process.env.REACT_APP_HOME_PAGE_URL = 'http://test-home-page';
  });

  // Test rendering of close button
  test('renders close button when stage is not ad-9', () => {
    render(
      <Provider store={store}>
        <Close />
      </Provider>
    );

    const closeButton = screen.getByTestId('logout-button');
    expect(closeButton).toBeInTheDocument();
  });

  // Test opening popup
  test('opens popup when close button is clicked', () => {
    render(
      <Provider store={store}>
        <Close />
      </Provider>
    );

    const closeButton = screen.getByTestId('logout-button');
    fireEvent.click(closeButton);

    // Check if popup modal appears
    const modalHeader = screen.getByText(/Back to Home/i);
    expect(modalHeader).toBeInTheDocument();
  });

  // Test cancel button in popup
  test('closes popup when cancel button is clicked', () => {
    render(
      <Provider store={store}>
        <Close />
      </Provider>
    );

    // Open popup first
    const closeButton = screen.getByTestId('logout-button');
    fireEvent.click(closeButton);

    // Find and click cancel button
    const cancelButton = screen.getByTestId('otpExit-close-popup');
    fireEvent.click(cancelButton);

    // Verify Adobe event was triggered
    expect(trackEvents.triggerAdobeEvent).toHaveBeenCalledWith(
      "ctaClick", 
      "Cancel: Back to Home"
    );
  });

  // Test save and exit functionality
  test('saves and exits application successfully', async () => {
    // Mock successful save response
    (preApprovalPostServices.postPeserveData as jest.Mock).mockResolvedValue({
      status: 200,
      data: {
        application: {
          response_type: 'INFO',
          response_action: 'CONTINUE',
        },
        applicants: [{ id: 'test-applicant' }],
      },
    });

    render(
      <Provider store={store}>
        <Close />
      </Provider>
    );

    // Open popup
    const closeButton = screen.getByTestId('logout-button');
    fireEvent.click(closeButton);

    // Find and click save & exit button (for non-pd-1 stage)
    const saveExitButton = screen.getByText(/Save & Exit/i);
    fireEvent.click(saveExitButton);

    // Wait for asynchronous operations
    await screen.findByTestId('logout-button');

    // Verify location change and save operation
    expect(window.location.href).toBe(process.env.REACT_APP_HOME_PAGE_URL);
    expect(preApprovalPostServices.postPeserveData).toHaveBeenCalled();
  });

  // Test exit without save for pd-1 stage
  test('exits without save for pd-1 stage', () => {
    // Modify initial state to simulate pd-1 stage
    initialState.stages.stages[0].stageId = 'pd-1';
    store = mockStore(initialState);

    render(
      <Provider store={store}>
        <Close />
      </Provider>
    );

    // Open popup
    const closeButton = screen.getByTestId('logout-button');
    fireEvent.click(closeButton);

    // Find and click Yes, Exit button
    const exitButton = screen.getByText(/Yes, Exit/i);
    fireEvent.click(exitButton);

    // Verify location change
    expect(window.location.href).toBe(process.env.REACT_APP_HOME_PAGE_URL);
  });

  // Test error handling for save and exit
  test('handles error during save and exit', async () => {
    // Mock failed save response
    (preApprovalPostServices.postPeserveData as jest.Mock).mockRejectedValue(
      new Error('Save failed')
    );

    render(
      <Provider store={store}>
        <Close />
      </Provider>
    );

    // Open popup
    const closeButton = screen.getByTestId('logout-button');
    fireEvent.click(closeButton);

    // Find and click save & exit button
    const saveExitButton = screen.getByText(/Save & Exit/i);
    fireEvent.click(saveExitButton);

    // Wait for error handling
    await screen.findByTestId('logout-button');

    // You might want to add specific assertions about error handling
    // This could include checking dispatch actions or error messages
  });
});
