import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import DucumentUploadMainSCR from './DocumentUploadMainSCR';
import { postTMXUserSession, postFinalAcknowledge, postDocSaveData, postFulFilmentData } from '../../services/preApprovalPostServices';
import { CONSTANTS } from '../../utils/common/constants';

// Mock all external dependencies
jest.mock('../../services/preApprovalPostServices');
jest.mock('../../services/common-service');
jest.mock('../../utils/common/change.utils');
jest.mock('../documentType/document-type-dynamic', () => () => <div data-testid="document-type-dynamic">DocumentTypeDynamic</div>);
jest.mock('../../shared/components/spinner/spinner', () => () => <div data-testid="spinner">Spinner</div>);
jest.mock('../../shared/components/close/close', () => () => <div data-testid="close-button">Close</div>);

const mockStore = configureStore([]);

describe('DocumentUploadMainSCR Component', () => {
  let store: any;

  const baseState = {
    stages: {
      stages: [{
        stageId: 'doc-upload',
        stageInfo: {
          applicant_documents: [{
            document_list: [
              {
                document_options: [{
                  document_types: [
                    { uploaded_documents: null },
                    { uploaded_documents: { id: 1 } }
                  ]
                }]
              }
            ]
          }],
          application: {
            channel_reference: 'test-ref-123'
          },
          products: [{
            product_category: 'CC'
          }]
        }
      }],
      dynamicDocumentsUpload: {
        documentData: {},
        HKIDQRCodeData: null,
        documentCount: 1,
        success: true,
        fileSectionData: null,
        changeIconColorIdentityProof: false
      }
    },
    preApproval: {
      resumeAllowed: 'N',
      currentStage: 'PD-3'
    }
  };

  beforeEach(() => {
    store = mockStore(baseState);
    
    // Reset all mocks
    jest.clearAllMocks();
    
    // Default mock implementations
    (postTMXUserSession as jest.Mock).mockResolvedValue({ 
      status: 200, 
      data: { review_status: 'pass' } 
    });
    (postFinalAcknowledge as jest.Mock).mockResolvedValue({ status: 202 });
    (postDocSaveData as jest.Mock).mockResolvedValue({ 
      status: 200, 
      data: { 
        application: { 
          response_type: 'INFO', 
          response_action: 'CONTINUE' 
        },
        applicants: [{}],
        applicant_documents: [{}]
      } 
    });
    (postFulFilmentData as jest.Mock).mockResolvedValue({ 
      status: 200, 
      data: { 
        application: { 
          response_type: 'INFO', 
          response_action: 'CONTINUE' 
        },
        applicants: [{}]
      } 
    });
  });

  // Basic rendering tests
  it('should render the component with default props', () => {
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );

    expect(screen.getByTestId('document-type-dynamic')).toBeInTheDocument();
    expect(screen.getByText(/upload doc/i)).toBeInTheDocument();
    expect(screen.getByText('1/2')).toBeInTheDocument();
    expect(screen.getByTestId('close-button')).toBeInTheDocument();
  });

  // Document count tests
  it('should show correct document count when some documents are uploaded', () => {
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );

    expect(screen.getByText('1/2')).toBeInTheDocument();
  });

  it('should show complete document count when all documents are uploaded', () => {
    const customState = {
      ...baseState,
      stages: {
        ...baseState.stages,
        dynamicDocumentsUpload: {
          ...baseState.stages.dynamicDocumentsUpload,
          documentCount: 2
        }
      }
    };
    store = mockStore(customState);

    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );

    expect(screen.getByText('2/2')).toBeInTheDocument();
  });

  // Continue button tests
  it('should disable continue button when not all documents are uploaded', () => {
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );

    const continueButton = screen.getByRole('button', { name: /continue/i });
    expect(continueButton).toBeDisabled();
  });

  it('should enable continue button when all documents are uploaded', () => {
    const customState = {
      ...baseState,
      stages: {
        ...baseState.stages,
        dynamicDocumentsUpload: {
          ...baseState.stages.dynamicDocumentsUpload,
          documentCount: 2
        }
      }
    };
    store = mockStore(customState);

    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );

    const continueButton = screen.getByRole('button', { name: /continue/i });
    expect(continueButton).not.toBeDisabled();
  });

  it('should not show continue button when success is false', () => {
    const customState = {
      ...baseState,
      stages: {
        ...baseState.stages,
        dynamicDocumentsUpload: {
          ...baseState.stages.dynamicDocumentsUpload,
          success: false
        }
      }
    };
    store = mockStore(customState);

    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );

    expect(screen.queryByRole('button', { name: /continue/i })).not.toBeInTheDocument();
  });

  // Spinner tests
  it('should show spinner when stage is ld-1 and showSpinner is true', () => {
    const customState = {
      ...baseState,
      stages: {
        ...baseState.stages,
        stages: [{
          ...baseState.stages.stages[0],
          stageId: 'ld-1'
        }]
      }
    };
    store = mockStore(customState);

    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );

    expect(screen.getByTestId('spinner')).toBeInTheDocument();
  });

  // API call tests
  it('should call postTMXUserSession when continue button is clicked', async () => {
    const customState = {
      ...baseState,
      stages: {
        ...baseState.stages,
        dynamicDocumentsUpload: {
          ...baseState.stages.dynamicDocumentsUpload,
          documentCount: 2
        }
      }
    };
    store = mockStore(customState);

    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );

    const continueButton = screen.getByRole('button', { name: /continue/i });
    fireEvent.click(continueButton);

    await waitFor(() => {
      expect(postTMXUserSession).toHaveBeenCalledWith('test-ref-123');
    });
  });

  it('should handle CC product flow when continue button is clicked', async () => {
    const customState = {
      ...baseState,
      stages: {
        ...baseState.stages,
        dynamicDocumentsUpload: {
          ...baseState.stages.dynamicDocumentsUpload,
          documentCount: 2
        }
      }
    };
    store = mockStore(customState);

    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );

    const continueButton = screen.getByRole('button', { name: /continue/i });
    fireEvent.click(continueButton);

    await waitFor(() => {
      expect(postTMXUserSession).toHaveBeenCalled();
      expect(postFinalAcknowledge).toHaveBeenCalled();
      expect(postDocSaveData).toHaveBeenCalled();
      expect(postFulFilmentData).toHaveBeenCalled();
    });
  });

  it('should handle non-CC product flow when continue button is clicked', async () => {
    const customState = {
      ...baseState,
      stages: {
        stages: [{
          stageId: 'doc-upload',
          stageInfo: {
            applicant_documents: [{
              document_list: [
                {
                  document_options: [{
                    document_types: [
                      { uploaded_documents: null },
                      { uploaded_documents: { id: 1 } }
                    ]
                  }]
                }
              ]
            }],
            application: {
              channel_reference: 'test-ref-123'
            },
            products: [{
              product_category: 'LOAN'
            }]
          }
        }],
        dynamicDocumentsUpload: {
          documentData: {},
          HKIDQRCodeData: null,
          documentCount: 2,
          success: true,
          fileSectionData: null,
          changeIconColorIdentityProof: false
        }
      },
      preApproval: {
        resumeAllowed: 'N',
        currentStage: 'PD-3'
      }
    };
    store = mockStore(customState);

    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );

    const continueButton = screen.getByRole('button', { name: /continue/i });
    fireEvent.click(continueButton);

    await waitFor(() => {
      expect(postTMXUserSession).toHaveBeenCalled();
      expect(postFinalAcknowledge).toHaveBeenCalled();
      expect(postDocSaveData).toHaveBeenCalled();
      expect(postFulFilmentData).not.toHaveBeenCalled();
    });
  });

  // Error handling tests
  it('should handle error in postTMXUserSession', async () => {
    (postTMXUserSession as jest.Mock).mockRejectedValue(new Error('API Error'));
    const customState = {
      ...baseState,
      stages: {
        ...baseState.stages,
        dynamicDocumentsUpload: {
          ...baseState.stages.dynamicDocumentsUpload,
          documentCount: 2
        }
      }
    };
    store = mockStore(customState);

    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );

    const continueButton = screen.getByRole('button', { name: /continue/i });
    fireEvent.click(continueButton);

    await waitFor(() => {
      expect(postTMXUserSession).toHaveBeenCalled();
    });
  });

  it('should handle non-pass review_status in postTMXUserSession', async () => {
    (postTMXUserSession as jest.Mock).mockResolvedValue({ 
      status: 200, 
      data: { review_status: 'fail' } 
    });
    const customState = {
      ...baseState,
      stages: {
        ...baseState.stages,
        dynamicDocumentsUpload: {
          ...baseState.stages.dynamicDocumentsUpload,
          documentCount: 2
        }
      }
    };
    store = mockStore(customState);

    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );

    const continueButton = screen.getByRole('button', { name: /continue/i });
    fireEvent.click(continueButton);

    await waitFor(() => {
      expect(postTMXUserSession).toHaveBeenCalled();
    });
  });

  // Resume allowed tests
  it('should handle resumeAllowed case correctly', () => {
    const customState = {
      ...baseState,
      preApproval: {
        ...baseState.preApproval,
        resumeAllowed: 'Y'
      }
    };
    store = mockStore(customState);

    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );

    // Add assertions for resume allowed behavior
    expect(screen.getByText('1/2')).toBeInTheDocument();
  });

  // File section data tests
  it('should render correctly when fileSectionData is present', () => {
    const customState = {
      ...baseState,
      stages: {
        ...baseState.stages,
        dynamicDocumentsUpload: {
          ...baseState.stages.dynamicDocumentsUpload,
          fileSectionData: { someKey: 'someValue' }
        }
      }
    };
    store = mockStore(customState);

    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );

    expect(screen.getByTestId('document-type-dynamic')).toBeInTheDocument();
    expect(screen.queryByText(/upload doc/i)).not.toBeInTheDocument();
  });
});
