import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import LoanDisbursement from './LoanDisbursement';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import axios from 'axios';

jest.mock('axios');
const mockedAxios = axios as jest.Mocked<typeof axios>;

const mockStore = configureStore([thunk]);

describe('LoanDisbursement Component - 80% Coverage', () => {
  let store: any;

  const initialState = {
    stages: {
      stages: [{
        stageInfo: {
          products: [{
            product_category: 'PL',
            product_type: '1258',
            offer_details: [{
              approved_amount: '50000',
              approved_amount_currency: 'HKD',
              approved_tenor: 12,
              apr: '5.5',
              flatRate: '0.5',
              repaymentAmount: '4200',
              offer_status: '1001',
              bestOffer: 'N'
            }, {
              approved_amount: '100000',
              approved_amount_currency: 'HKD',
              approved_tenor: 24,
              apr: '6.5',
              flatRate: '0.6',
              repaymentAmount: '4400',
              offer_status: '1001',
              bestOffer: 'Y'
            }]
          }],
          applicants: [{
            requested_loan_amount_a_1: '50000',
            requested_loan_tenor_a_1: '12'
          }]
        }
      }],
      userInput: {
        downshell: false
      }
    },
    error: {},
    lovDesc: {}
  };

  beforeEach(() => {
    store = mockStore(initialState);
    mockedAxios.get.mockReset();
    mockedAxios.post.mockReset();
  });

  test('renders component with initial values', () => {
    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    expect(screen.getByText('Congratulations!')).toBeInTheDocument();
    expect(screen.getByText('Preliminary approved loan amount')).toBeInTheDocument();
  });

  test('handles loan amount slider change', async () => {
    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    const slider = screen.getByRole('slider');
    fireEvent.change(slider, { target: { value: '60000' } });

    await waitFor(() => {
      expect(slider).toHaveValue('60000');
    });
  });

  test('handles tenor selection change', async () => {
    mockedAxios.post.mockResolvedValueOnce({
      status: 200,
      data: {
        apr: '6.0',
        monthly_flat_rate: '0.55',
        repayment_amount: '4500',
        response_indicator: 'SOFT',
        response_action: 'CONTINUE'
      }
    });

    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    const tenorButton = screen.getByText('24 Months');
    fireEvent.click(tenorButton);

    await waitFor(() => {
      expect(mockedAxios.post).toHaveBeenCalled();
    });
  });

  test('handles next stage with best offer', async () => {
    mockedAxios.post.mockResolvedValueOnce({
      status: 200,
      data: {
        application: {
          response_type: 'INFO',
          response_action: 'SUCCESS',
          channel_reference: '12345',
          error: {
            application_error: [],
            applicant_error: [],
            product_error: []
          }
        },
        products: [{
          offer_details: [{
            service_type: 'ACD4',
            offer_status: '1001'
          }]
        }],
        applicants: {}
      }
    });

    mockedAxios.post.mockResolvedValueOnce({
      status: 200,
      data: {
        statusCode: 'OK',
        docId: 'doc123'
      }
    });

    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    const continueButton = screen.getByText('Continue');
    fireEvent.click(continueButton);

    await waitFor(() => {
      expect(mockedAxios.post).toHaveBeenCalledTimes(2);
    });
  });

  test('renders Chinese content when language is zh', () => {
    const customState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        stages: [{
          stageInfo: {
            ...initialState.stages.stages[0].stageInfo,
            application: {
              acquisition_channel: 'SC',
              language: 'zh'
            }
          }
        }
