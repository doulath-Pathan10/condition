import React from 'react';
import { render, screen, fireEvent, act } from '@testing-library/react';
import Model from './Model';
import '@testing-library/jest-dom';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import { StoreModel } from '../../../utils/model/common-model';

// Mock all external dependencies thoroughly
jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn().mockReturnValue('EN'),
    getChannelRefNo: jest.fn().mockReturnValue({ channelRefNo: 'TEST123' }),
    getProductInfo: jest.fn().mockReturnValue([{ product_category: 'CC' }])
  }
}));

jest.mock('../../../services/track-events', () => ({
  triggerAdobeEvent: jest.fn()
}));

jest.mock('../../../modules/preApproval/store/preApproval-slice', () => ({
  preApprovalAction: {
    setCurrentStage: jest.fn().mockReturnValue({ type: 'SET_CURRENT_STAGE' })
  }
}));

// Mock window.URL.createObjectURL
global.URL.createObjectURL = jest.fn(() => 'mock-url');

// Mock model.json data with all required fields
const mockModelData = {
  techincalissue: {
    name: 'techincalissue',
    header_content: 'Technical Issue',
    header_content_CN: '技术问题',
    header_content_HK: '技術問題',
    body_content: ['We are experiencing technical difficulties'],
    body_content_CN: ['我们遇到技术困难'],
    body_content_HK: ['我們遇到技術困難'],
    buttons: ['OK', 'Cancel'],
    buttons_CN: ['确定', '取消'],
    buttons_HK: ['確定', '取消']
  },
  saveSuccess: {
    name: 'saveSuccess',
    header_content: 'Success',
    header_content_CN: '成功',
    header_content_HK: '成功',
    body_content_1: 'Your application has been saved',
    body_content_1_CN: '您的申请已保存',
    body_content_1_HK: '您的申請已保存',
    body_content_2: 'Reference Number:',
    body_content_2_CN: '参考编号:',
    body_content_2_HK: '參考編號:'
  },
  preApprovedBanner: {
    name: 'preApprovedBanner',
    preAprvlHeading: 'Congratulations!',
    preAprvlHeading_CN: '恭喜！',
    preAprvlHeading_HK: '恭喜！',
    creditLimit: 'Your credit limit is',
    creditLimit_CN: '您的信用额度是',
    creditLimit_HK: '您的信用額度是',
    uploadMsg: 'Please upload the following documents',
    uploadMsg_CN: '请上传以下文件',
    uploadMsg_HK: '請上傳以下文件',
    uploadButton: 'Upload Documents',
    uploadButton_CN: '上传文件',
    uploadButton_HK: '上傳文件',
    refNo: 'Ref No:',
    refNo_CN: '参考编号:',
    refNo_HK: '參考編號:',
    footerMsg: 'Your reference number is'
  },
  idleTimeOut: {
    name: 'idleTimeOut',
    buttons: ['Continue'],
    buttons_CN: ['继续'],
    buttons_HK: ['繼續']
  }
};

jest.mock('../../../assets/_json/model.json', () => Object.values(mockModelData), { virtual: true });

// Mock the PDF component with props
jest.mock('../pdf/pdf', () => (props: { fileName: string }) => (
  <div>Mock PDF Viewer: {props.fileName}</div>
));

const mockStore = configureMockStore();
const initialState = {
  stages: {
    stages: [{
      stageInfo: {
        application: { cos_ref_number: 'APP123' },
        products: [{
          campaign: 'TEST_CAMPAIGN',
          offer_details: [{ approved_amount: 10000 }],
          name: 'Credit Card'
        }],
        applicant_documents: [{
          document_list: [
            { document_category: 'ID Proof' },
            { document_category: 'Address Proof' }
          ]
        }]
      }
    }]
  },
  preApproval: {
    formConfigmetaData: {
      products: [{ campaign: 'TEST_CAMPAIGN' }]
    }
  }
};

describe('Model Component - High Coverage Tests', () => {
  const mockClosePopup = jest.fn();
  const mockHandlebuttonClick = jest.fn();
  const mockHandleChooseClick = jest.fn();
  const mockAgreePDF = jest.fn();
  const mockClosePDF = jest.fn();
  
  let store: any;
  
  beforeEach(() => {
    store = mockStore(initialState);
    jest.clearAllMocks();
  });

  // Test all modal variants
  describe.each([
    ['techincalissue', 'Technical Issue'],
    ['saveSuccess', 'Success'],
    ['preApprovedBanner', 'Congratulations!'],
    ['idleTimeOut', 'Continue']
  ])('%s modal', (modalName, expectedHeader) => {
    it(`should render ${modalName} modal with correct content`, () => {
      render(
        <Provider store={store}>
          <Model name={modalName} closePopup={mockClosePopup} />
        </Provider>
      );
      
      expect(screen.getByText(expectedHeader)).toBeInTheDocument();
    });

    it(`should handle interactions in ${modalName} modal`, () => {
      render(
        <Provider store={store}>
          <Model name={modalName} closePopup={mockClosePopup} />
        </Provider>
      );

      if (modalName === 'techincalissue') {
        fireEvent.click(screen.getByText('OK'));
        expect(mockClosePopup).toHaveBeenCalled();
      } else if (modalName === 'idleTimeOut') {
        fireEvent.click(screen.getByText('Continue'));
        expect(mockClosePopup).toHaveBeenCalled();
      }
    });
  });

  // PDF Declaration Modal tests
  describe('PDF Declaration Modal', () => {
    const pdfProps = {
      name: 'declaration',
      data: {
        title: 'terms.pdf',
        textContent: 'Terms and Conditions',
        target: {
          title: 'terms.pdf',
          name: 'Terms',
          checked: false,
          innerText: 'Download Terms'
        }
      },
      closepdf: mockClosePDF,
      agreePDF: mockAgreePDF,
      stageId: 'rp'
    };

    it('should render PDF modal with all interactive elements', () => {
      render(
        <Provider store={store}>
          <Model {...pdfProps} />
        </Provider>
      );
      
      expect(screen.getByText('Terms and Conditions')).toBeInTheDocument();
      expect(screen.getByText('Mock PDF Viewer: terms.pdf')).toBeInTheDocument();
      expect(screen.getByText('Download PDF')).toBeInTheDocument();
      expect(screen.getByText('Scroll')).toBeInTheDocument();
    });

    it('should handle PDF download', () => {
      global.fetch = jest.fn().mockResolvedValue({
        blob: jest.fn().mockResolvedValue(new Blob())
      });

      render(
        <Provider store={store}>
          <Model {...pdfProps} />
        </Provider>
      );
      
      fireEvent.click(screen.getByText('Download PDF'));
      expect(global.fetch).toHaveBeenCalledWith('terms.pdf');
    });

    it('should show agree button after scrolling to bottom', () => {
      render(
        <Provider store={store}>
          <Model {...pdfProps} />
        </Provider>
      );
      
      const scrollContainer = screen.getByTestId('pdf-scroll-btm');
      fireEvent.scroll(scrollContainer, {
        target: { scrollTop: 1000, clientHeight: 500, scrollHeight: 1500 }
      });
      
      expect(screen.getByText('Agree')).toBeInTheDocument();
    });

    it('should call agreePDF when agree button is clicked', () => {
      render(
        <Provider store={store}>
          <Model {...pdfProps} />
        </Provider>
      );
      
      // Trigger scroll to show agree button
      fireEvent.scroll(screen.getByTestId('pdf-scroll-btm'), {
        target: { scrollTop: 1000, clientHeight: 500, scrollHeight: 1500 }
      });
      
      fireEvent.click(screen.getByText('Agree'));
      expect(mockAgreePDF).toHaveBeenCalledWith(false, pdfProps.data);
    });
  });

  // Language variations tests
  describe('Language Variations', () => {
    it.each([
      ['CN', '技术问题', '我们遇到技术困难', '确定'],
      ['HK', '技術問題', '我們遇到技術困難', '確定']
    ])('should render correct content for %s language', (lang, header, content, button) => {
      require('../../../utils/common/change.utils').getUrl.getLanguageInfo.mockReturnValue(lang);
      
      render(
        <Provider store={store}>
          <Model name="techincalissue" closePopup={mockClosePopup} />
        </Provider>
      );
      
      expect(screen.getByText(header)).toBeInTheDocument();
      expect(screen.getByText(content)).toBeInTheDocument();
      expect(screen.getByText(button)).toBeInTheDocument();
    });
  });

  // Edge cases
  describe('Edge Cases', () => {
    it('should handle empty check modal with two buttons', () => {
      render(
        <Provider store={store}>
          <Model 
            name="empty_check" 
            handlebuttonClick={mockHandlebuttonClick}
            handleChooseClick={mockHandleChooseClick}
          />
        </Provider>
      );
      
      const buttons = screen.getAllByRole('button');
      expect(buttons).toHaveLength(2);
      
      fireEvent.click(buttons[0]);
      expect(mockHandlebuttonClick).toHaveBeenCalled();
      
      fireEvent.click(buttons[1]);
      expect(mockHandleChooseClick).toHaveBeenCalled();
    });

    it('should handle info tooltips with custom content', () => {
      const customContent = 'This is a custom tooltip message';
      render(
        <Provider store={store}>
          <Model 
            name="info_tooltips" 
            body_content={customContent}
            btnTxt="Got it"
            closePopup={mockClosePopup}
          />
        </Provider>
      );
      
      expect(screen.getByText(customContent)).toBeInTheDocument();
      fireEvent.click(screen.getByText('Got it'));
      expect(mockClosePopup).toHaveBeenCalled();
    });

    it('should redirect to home page when save success modal is closed', () => {
      delete window.location;
      window.location = { href: '' } as any;
      
      render(
        <Provider store={store}>
          <Model name="saveSuccess" />
        </Provider>
      );
      
      fireEvent.click(screen.getByTestId('successClose-btn'));
      expect(window.location.href).toBe('http://localhost/');
    });

    it('should dispatch setCurrentStage when upload documents is clicked', () => {
      render(
        <Provider store={store}>
          <Model name="preApprovedBanner" />
        </Provider>
      );
      
      fireEvent.click(screen.getByText('Upload Documents'));
      expect(require('../../../modules/preApproval/store/preApproval-slice').preApprovalAction.setCurrentStage)
        .toHaveBeenCalledWith('DC');
    });
  });

  // Additional coverage for untested paths
  describe('Additional Coverage', () => {
    it('should handle product category PL in decline modal', () => {
      require('../../../utils/common/change.utils').getUrl.getProductInfo.mockReturnValue([{ product_category: 'PL' }]);
      
      render(
        <Provider store={store}>
          <Model name="decline" />
        </Provider>
      );
      
      // Verify PL specific content would be rendered
    });

    it('should handle missing stageInfo in preApprovedBanner', () => {
      const customStore = mockStore({
        ...initialState,
        stages: {
          stages: [{}] // Empty stage info
        }
      });
      
      render(
        <Provider store={customStore}>
          <Model name="preApprovedBanner" />
        </Provider>
      );
      
      // Verify component handles missing data gracefully
      expect(screen.queryByText('Your credit limit is')).not.toBeInTheDocument();
    });

    it('should handle scroll button click', () => {
      const pdfProps = {
        name: 'declaration',
        data: {
          title: 'terms.pdf',
          textContent: 'Terms'
        },
        closepdf: mockClosePDF,
        agreePDF: mockAgreePDF
      };
      
      render(
        <Provider store={store}>
          <Model {...pdfProps} />
        </Provider>
      );
      
      fireEvent.click(screen.getByText('Scroll'));
      // Verify scroll behavior would be triggered
    });
  });
});
