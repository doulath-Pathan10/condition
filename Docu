import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Close from './Close';
import '@testing-library/jest-dom';

// Mock the modules that are causing issues
jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn().mockReturnValue('EN')
  },
  homePage: jest.fn()
}));

jest.mock('../../../modules/preApproval/services/preApprovalPostServices', () => ({
  postPeserveData: jest.fn().mockResolvedValue({
    status: 200,
    data: {
      application: {
        response_type: "INFO",
        response_action: "CONTINUE"
      },
      applicants: {}
    }
  })
}));

jest.mock('../../../services/track-events', () => ({
  triggerAdobeEvent: jest.fn()
}));

const mockStore = configureStore([]);

describe('Close Component', () => {
  let store: any;

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [{ stageId: 'ad-1', stageInfo: { applicants: [{}] } }],
        userInput: { applicants: [{}] },
        journeyType: 'application'
      },
      lov: { lov: [] },
      error: {},
      preApproval: {}
    });

    // Reset all mocks
    jest.clearAllMocks();
  });

  test('renders close button', () => {
    render(
      <Provider store={store}>
        <Close />
      </Provider>
    );
    expect(screen.getByTestId('logout-button')).toBeInTheDocument();
  });

  test('opens popup when close button is clicked', () => {
    render(
      <Provider store={store}>
        <Close />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    expect(screen.getByText('Back to Home')).toBeInTheDocument();
  });

  test('displays correct buttons for non-pd1 stage', () => {
    render(
      <Provider store={store}>
        <Close />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    expect(screen.getByText('Save & Exit')).toBeInTheDocument();
    expect(screen.getByText('Cancel')).toBeInTheDocument();
  });

  test('displays correct buttons for pd1 stage', () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        ...store.getState().stages,
        stages: [{ stageId: 'pd-1', stageInfo: { applicants: [{}] } }]
      }
    });

    render(
      <Provider store={store}>
        <Close />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    expect(screen.getByText('Yes, Exit')).toBeInTheDocument();
    expect(screen.getByText('Cancel')).toBeInTheDocument();
  });

  test('closes popup when cancel is clicked', () => {
    render(
      <Provider store={store}>
        <Close />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    fireEvent.click(screen.getByText('Cancel'));
    expect(screen.queryByText('Back to Home')).not.toBeInTheDocument();
  });

  test('calls homePage when Yes, Exit is clicked', () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        ...store.getState().stages,
        stages: [{ stageId: 'pd-1', stageInfo: { applicants: [{}] } }]
      }
    });

    const { homePage } = require('../../../utils/common/change.utils');
    
    render(
      <Provider store={store}>
        <Close />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    fireEvent.click(screen.getByText('Yes, Exit'));
    expect(homePage).toHaveBeenCalled();
  });

  test('does not render in ad-9 stage', () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        ...store.getState().stages,
        stages: [{ stageId: 'ad-9', stageInfo: { applicants: [{}] } }]
      }
    });

    render(
      <Provider store={store}>
        <Close />
      </Provider>
    );
    
    expect(screen.queryByTestId('logout-button')).not.toBeInTheDocument();
  });
});

describe('withSaveAndExit functionality', () => {
  let store: any;

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [{ stageId: 'ad-1', stageInfo: { applicants: [{}] } }],
        userInput: { applicants: [{}] },
        journeyType: 'application'
      },
      lov: { lov: [] },
      error: {},
      preApproval: {}
    });

    jest.clearAllMocks();
  });

  test('successfully calls postPeserveData', async () => {
    const { postPeserveData } = require('../../../modules/preApproval/services/preApprovalPostServices');
    
    render(
      <Provider store={store}>
        <Close />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    fireEvent.click(screen.getByText('Save & Exit'));
    
    await Promise.resolve(); // Allow promises to resolve
    
    expect(postPeserveData).toHaveBeenCalled();
  });

  test('handles API error', async () => {
    const { postPeserveData } = require('../../../modules/preApproval/services/preApprovalPostServices');
    postPeserveData.mockRejectedValue(new Error('API error'));
    
    render(
      <Provider store={store}>
        <Close />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    fireEvent.click(screen.getByText('Save & Exit'));
    
    await Promise.resolve(); // Allow promises to resolve
    
    const actions = store.getActions();
    expect(actions.some((action: any) => action.type === 'error/getError')).toBe(true);
  });
});
