import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import DocumentUpload from './DocumentUpload';
import '@testing-library/jest-dom';

// Mock the dependencies
jest.mock('../../../services/preApprovalPostServices', () => ({
  postDocuments: jest.fn().mockResolvedValue({
    status: 200,
    data: {
      docId: '123',
      documentStatus: 'UPLOADED'
    }
  })
}));

jest.mock('../../../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn().mockReturnValue('EN')
  }
}));

jest.mock('../../../../../services/common-service', () => ({
  dispatchLoader: jest.fn()
}));

const mockStore = configureStore([]);

describe('DocumentUpload Component', () => {
  let store: any;
  const mockSetShowContinueBtn = jest.fn();

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'DOC_3',
          stageInfo: {
            applicant_documents: [{
              document_list: [{
                document_category: 'Income Proof',
                document_options: [{
                  document_types: [{
                    uploaded_documents: []
                  }]
                }]
              }]
            }],
            application: {
              channel_reference: 'test123'
            }
          }
        }],
        dynamicDocumentsUpload: {
          documentCount: 0,
          fileSectionData: {
            document_category: 'Income Proof'
          },
          uploadedDocuments: []
        }
      }
    });

    // Mock URL.createObjectURL
    global.URL.createObjectURL = jest.fn(() => 'mock-url');
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('renders without crashing', () => {
    render(
      <Provider store={store}>
        <DocumentUpload setShowContinueBtn={mockSetShowContinueBtn} />
      </Provider>
    );
    expect(screen.getByText(/Upload/)).toBeInTheDocument();
  });

  test('displays upload button', () => {
    render(
      <Provider store={store}>
        <DocumentUpload setShowContinueBtn={mockSetShowContinueBtn} />
      </Provider>
    );
    expect(screen.getByLabelText(/Upload/)).toBeInTheDocument();
  });

  test('handles file upload successfully', async () => {
    const { postDocuments } = require('../../../services/preApprovalPostServices');
    
    render(
      <Provider store={store}>
        <DocumentUpload setShowContinueBtn={mockSetShowContinueBtn} />
      </Provider>
    );

    const file = new File(['test'], 'test.png', { type: 'image/png' });
    const input = screen.getByLabelText(/Upload/);
    
    fireEvent.change(input, { target: { files: [file] } });
    
    await waitFor(() => {
      expect(postDocuments).toHaveBeenCalled();
      expect(screen.getByText('Upload completed !')).toBeInTheDocument();
    });
  });

  test('shows error for large file size', async () => {
    render(
      <Provider store={store}>
        <DocumentUpload setShowContinueBtn={mockSetShowContinueBtn} />
      </Provider>
    );

    const largeFile = new File(['test'], 'large.png', { type: 'image/png' });
    Object.defineProperty(largeFile, 'size', { value: 6 * 1024 * 1024 }); // 6MB
    
    const input = screen.getByLabelText(/Upload/);
    fireEvent.change(input, { target: { files: [largeFile] } });
    
    expect(screen.getByText(/invalideimagesize/)).toBeInTheDocument();
  });

  test('opens image preview when image is clicked', async () => {
    const { postDocuments } = require('../../../services/preApprovalPostServices');
    
    render(
      <Provider store={store}>
        <DocumentUpload setShowContinueBtn={mockSetShowContinueBtn} />
      </Provider>
    );

    const file = new File(['test'], 'test.png', { type: 'image/png' });
    const input = screen.getByLabelText(/Upload/);
    
    fireEvent.change(input, { target: { files: [file] } });
    
    await waitFor(() => {
      const image = screen.getByTestId('image-preview-id');
      fireEvent.click(image);
      expect(screen.getByText(/Image Preview/)).toBeInTheDocument();
    });
  });

  test('deletes uploaded file', async () => {
    const { postDocuments } = require('../../../services/preApprovalPostServices');
    
    render(
      <Provider store={store}>
        <DocumentUpload setShowContinueBtn={mockSetShowContinueBtn} />
      </Provider>
    );

    const file = new File(['test'], 'test.png', { type: 'image/png' });
    const input = screen.getByLabelText(/Upload/);
    
    fireEvent.change(input, { target: { files: [file] } });
    
    await waitFor(() => {
      const deleteBtn = screen.getByTestId('delete-btn');
      fireEvent.click(deleteBtn);
      expect(screen.queryByText('test.png')).not.toBeInTheDocument();
    });
  });

  test('opens tips modal when help link is clicked', () => {
    render(
      <Provider store={store}>
        <DocumentUpload setShowContinueBtn={mockSetShowContinueBtn} />
      </Provider>
    );

    const tipsLink = screen.getByText(/here/);
    fireEvent.click(tipsLink);
    expect(screen.getByText(/Tips for uploading/)).toBeInTheDocument();
  });

  test('disables continue button when no files are uploaded', () => {
    render(
      <Provider store={store}>
        <DocumentUpload setShowContinueBtn={mockSetShowContinueBtn} />
      </Provider>
    );

    const continueBtn = screen.getByText(/Continue/);
    expect(continueBtn).toBeDisabled();
  });

  test('enables continue button when files are uploaded', async () => {
    const { postDocuments } = require('../../../services/preApprovalPostServices');
    
    render(
      <Provider store={store}>
        <DocumentUpload setShowContinueBtn={mockSetShowContinueBtn} />
      </Provider>
    );

    const file = new File(['test'], 'test.png', { type: 'image/png' });
    const input = screen.getByLabelText(/Upload/);
    
    fireEvent.change(input, { target: { files: [file] } });
    
    await waitFor(() => {
      const continueBtn = screen.getByText(/Continue/);
      expect(continueBtn).not.toBeDisabled();
    });
  });

  test('handles back button click', () => {
    render(
      <Provider store={store}>
        <DocumentUpload setShowContinueBtn={mockSetShowContinueBtn} />
      </Provider>
    );

    const backBtn = screen.getByText(/Back/);
    fireEvent.click(backBtn);
    
    const actions = store.getActions();
    expect(actions.some(action => action.type === 'stages/updatefileSectionData')).toBe(true);
  });

  test('displays correct text for different languages', () => {
    const { getUrl } = require('../../../../../utils/common/change.utils');
    
    // Test Chinese language
    getUrl.getLanguageInfo.mockReturnValue('CN');
    const { rerender } = render(
      <Provider store={store}>
        <DocumentUpload setShowContinueBtn={mockSetShowContinueBtn} />
      </Provider>
    );
    expect(screen.getByText(/上传/)).toBeInTheDocument();

    // Test Hong Kong language
    getUrl.getLanguageInfo.mockReturnValue('HK');
    rerender(
      <Provider store={store}>
        <DocumentUpload setShowContinueBtn={mockSetShowContinueBtn} />
      </Provider>
    );
    expect(screen.getByText(/上傳/)).toBeInTheDocument();
  });
});
