import React from "react";
import { render, fireEvent, screen, waitFor } from "@testing-library/react";
import CasaTNC from "../path/to/CasaTNC"; // adjust path
import { useSelector, useDispatch } from "react-redux";
import * as services from "../../services/preApprovalServices";
import * as commonService from "../../../../services/common-service";

// Mock Redux
jest.mock("react-redux", () => ({
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));

// Mock services
jest.mock("../../services/preApprovalServices", () => ({
  getData: jest.fn(),
  getPDFData: jest.fn(),
}));

// Mock dispatchLoader
jest.mock("../../../../services/common-service", () => ({
  dispatchLoader: jest.fn(),
}));

// Mock PDF component
jest.mock("../../../../shared/components/pdf/pdf", () => () => <div>Mock PDF Viewer</div>);

// Mock Spinner component
jest.mock("../../../../shared/components/spinner/spinner", () => () => <div>Loading Spinner...</div>);

// Dummy constants
const mockStore = {
  preApproval: {
    currentStage: 1,
    formConfigmetaData: {
      products: [{ campaign: "testCampaign" }],
    },
  },
};

describe("CasaTNC Component", () => {
  const mockDispatch = jest.fn();

  beforeEach(() => {
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    (useSelector as jest.Mock).mockImplementation((selectorFn) => selectorFn(mockStore));

    jest.clearAllMocks();
  });

  it("renders Spinner initially", () => {
    render(<CasaTNC isVisible={true} stageID={undefined} onScrollEnd={jest.fn()} />);
    expect(screen.getByText("Loading Spinner...")).toBeInTheDocument();
  });

  it("renders PDF and buttons after loading", async () => {
    (services.getData as jest.Mock).mockResolvedValue({
      data: {
        products: {
          testCampaign: [{ pdfURL: "http://example.com/sample.pdf" }],
        },
        productsMob: {
          testCampaign: [{ pdfURL: "http://example.com/sampleMobile.pdf" }],
        },
        tncLinkCampaignCode: {
          isCasa: [
            {
              pdfLinks: [
                { url: "http://example.com/tnc1.pdf", Title: "Terms 1" },
                { url: "http://example.com/tnc2.pdf", Title: "Terms 2" },
              ],
            },
          ],
        },
      },
    });

    (services.getPDFData as jest.Mock).mockResolvedValue("mocked-pdf-data");

    render(<CasaTNC isVisible={true} stageID={undefined} onScrollEnd={jest.fn()} />);

    await waitFor(() => expect(screen.getByText("Before you start your application:")).toBeInTheDocument());
    expect(screen.getByText("TAP TO SCROLL AND READ")).toBeInTheDocument();
    expect(screen.getByText("Mock PDF Viewer")).toBeInTheDocument();
    expect(screen.getByText("Download")).toBeInTheDocument();

    // Check dynamic T&C Links rendered
    expect(screen.getByText("Terms 1")).toBeInTheDocument();
    expect(screen.getByText("Terms 2")).toBeInTheDocument();
  });

  it("handles Download PDF button click", async () => {
    render(<CasaTNC isVisible={true} stageID={undefined} onScrollEnd={jest.fn()} />);

    const downloadButton = screen.getByText("Download");

    fireEvent.click(downloadButton);

    // Since it's creating and clicking anchor tag dynamically,
    // you can only check if button is in document
    expect(downloadButton).toBeInTheDocument();
  });

  it("shows Accept button after scrolling", async () => {
    (services.getData as jest.Mock).mockResolvedValue({
      data: {
        products: {
          testCampaign: [{ pdfURL: "http://example.com/sample.pdf" }],
        },
        productsMob: {
          testCampaign: [{ pdfURL: "http://example.com/sampleMobile.pdf" }],
        },
        tncLinkCampaignCode: {
          isCasa: [
            {
              pdfLinks: [],
            },
          ],
        },
      },
    });

    (services.getPDFData as jest.Mock).mockResolvedValue("mocked-pdf-data");

    render(<CasaTNC isVisible={true} stageID={undefined} onScrollEnd={jest.fn()} />);

    await waitFor(() => expect(screen.getByText("TAP TO SCROLL AND READ")).toBeInTheDocument());

    const scrollableDiv = document.querySelector(".react-pdf__Page__canvas1") as HTMLElement;

    fireEvent.scroll(scrollableDiv, { target: { scrollTop: 5000 } });

    // wait for scroll effect
    await waitFor(() => expect(screen.getByText("I ACCEPT")).toBeInTheDocument());
  });
});
