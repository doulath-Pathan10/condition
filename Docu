import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import InfoTooltips from './InfoTooltips';
import * as changeUtils from '../../../utils/common/change.utils';

// Mock the getLanguageInfo function
jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn(),
  },
}));

// Mock the Model component since it's a child component
jest.mock('../model/model', () => {
  return function MockModel(props: any) {
    return (
      <div data-testid="mock-model">
        <button onClick={props.closePopup}>Close</button>
        {props.body_content}
      </div>
    );
  };
});

describe('InfoTooltips Component', () => {
  const mockProps = {
    infoTooltips: 'This is a test tooltip content',
  };

  beforeEach(() => {
    // Default mock implementation
    (changeUtils.getUrl.getLanguageInfo as jest.Mock).mockReturnValue('en');
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders without crashing', () => {
    render(<InfoTooltips {...mockProps} />);
    expect(screen.getByRole('button')).toBeInTheDocument();
  });

  it('displays the tooltip icon', () => {
    render(<InfoTooltips {...mockProps} />);
    expect(screen.getByRole('button')).toHaveClass('tool-tip__icon');
  });

  it('shows the Model component when icon is clicked', () => {
    render(<InfoTooltips {...mockProps} />);
    
    // Initially not shown
    expect(screen.queryByTestId('mock-model')).not.toBeInTheDocument();
    
    // Click the icon
    fireEvent.click(screen.getByRole('button'));
    
    // Now should be visible
    expect(screen.getByTestId('mock-model')).toBeInTheDocument();
  });

  it('hides the Model component when closePopup is called', () => {
    render(<InfoTooltips {...mockProps} />);
    
    // Open the popup
    fireEvent.click(screen.getByRole('button'));
    expect(screen.getByTestId('mock-model')).toBeInTheDocument();
    
    // Close the popup
    fireEvent.click(screen.getByText('Close'));
    expect(screen.queryByTestId('mock-model')).not.toBeInTheDocument();
  });

  it('displays the correct tooltip content', () => {
    render(<InfoTooltips {...mockProps} />);
    fireEvent.click(screen.getByRole('button'));
    expect(screen.getByText('This is a test tooltip content')).toBeInTheDocument();
  });

  it('handles dangerous HTML content properly', () => {
    const htmlProps = {
      infoTooltips: '<strong>Bold</strong> content',
    };
    render(<InfoTooltips {...htmlProps} />);
    fireEvent.click(screen.getByRole('button'));
    expect(screen.getByText('Bold')).toBeInTheDocument();
    expect(screen.getByText('content')).toBeInTheDocument();
  });

  describe('Language handling', () => {
    it('shows English OK button text for English language', () => {
      (changeUtils.getUrl.getLanguageInfo as jest.Mock).mockReturnValue('en');
      render(<InfoTooltips {...mockProps} />);
      fireEvent.click(screen.getByRole('button'));
      expect(screen.getByText('OK')).toBeInTheDocument();
    });

    it('shows Chinese OK button text for Chinese language', () => {
      (changeUtils.getUrl.getLanguageInfo as jest.Mock).mockReturnValue('cn');
      render(<InfoTooltips {...mockProps} />);
      fireEvent.click(screen.getByRole('button'));
      expect(screen.getByText('确定')).toBeInTheDocument();
    });

    it('shows Hong Kong OK button text for Hong Kong language', () => {
      (changeUtils.getUrl.getLanguageInfo as jest.Mock).mockReturnValue('hk');
      render(<InfoTooltips {...mockProps} />);
      fireEvent.click(screen.getByRole('button'));
      expect(screen.getByText('確定')).toBeInTheDocument();
    });

    it('defaults to English OK button text for unknown language', () => {
      (changeUtils.getUrl.getLanguageInfo as jest.Mock).mockReturnValue('fr');
      render(<InfoTooltips {...mockProps} />);
      fireEvent.click(screen.getByRole('button'));
      expect(screen.getByText('OK')).toBeInTheDocument();
    });
  });

  it('toggles popup visibility when clicking the icon multiple times', () => {
    render(<InfoTooltips {...mockProps} />);
    
    // First click - show
    fireEvent.click(screen.getByRole('button'));
    expect(screen.getByTestId('mock-model')).toBeInTheDocument();
    
    // Second click - hide
    fireEvent.click(screen.getByRole('button'));
    expect(screen.queryByTestId('mock-model')).not.toBeInTheDocument();
    
    // Third click - show again
    fireEvent.click(screen.getByRole('button'));
    expect(screen.getByTestId('mock-model')).toBeInTheDocument();
  });
});
