import React, { useEffect, useState } from "react";
import { useSelector, useDispatch } from "react-redux";
import {
  dispatchError,
  dispatchLoader,
} from "../../../../../services/common-service";
import { StoreModel } from "../../../../../utils/model/common-model";
import {
  postDocuments,
  postZOLOCheck,
  postZolozAcknowledge,
  postPdfPreview,
  postQRCodeZOLO,
} from "../../../services/preApprovalPostServices";
import { preApprovalAction } from "../../../store/preApproval-slice";
import Carousel from "../carousel/carousel";
import { getImagePreview } from "../../../../preApproval/services/preApprovalServices";
import { stagesAction } from "../../../../../utils/store/stages-slice";
import PopupModel from "../../../../../shared/components/popup-model/popup-model";
import AlertModel from "../../../alertModal/alert-modal";
import { AxiosError } from "axios";
import imgUrlStatic from "../../../../preApproval/images/front-side.png";
import ImagePreviewModal from "../modals/imagePreviewModal/image-preview-modal";
import { CONSTANTS } from "../../../../../utils/common/constants";
import { documentList } from "../../../../preApproval/services/payload";
import { errorAction } from "../../../../../utils/store/error-slice";

const Zoloz: React.FC<any> = ({
  setHKIDVersion
}) => {
  const dispatch = useDispatch();
  const [imagePreview, setImagePreview] = useState(false);
  const [imgeURL, setImageURL] = useState("");
  const [name, setName] = useState("");
  const [openSuccessModal, setOpenSuccessModal] = useState(false);
  const [continueBtnVisiblity, setContinueBtnVisiblity] = useState(false);
  const channel_reference = useSelector((state: StoreModel) => state.stages && state.stages.stages[0].stageInfo.application.channel_reference);
  const [zoloErrorpopup, setZoloErrorpopup] = useState(false);
  const showUploadFileSuccess = useSelector((state: any) => state.stages.dynamicDocumentsUpload.showUploadFileSuccess);
  const HKIDQRCodeData = useSelector((state: any) => state.stages.dynamicDocumentsUpload.HKIDQRCodeData);
  const HKIDVersionValue = useSelector((state: any) => state.stages.dynamicDocumentsUpload.HKIDVersionValue);
  const fileSectionData = useSelector((state: any) => state.stages.dynamicDocumentsUpload.fileSectionData);
  const documentCount = useSelector((state: any) => state.stages.dynamicDocumentsUpload.documentCount);
  const documentZoloCheckRes = useSelector((state: any) => state.preApproval.documentZoloCheckRes);

  const res = {
    errorCode: null,
    errorDesc: null,
    zoloz_ekyc_result: "R",
    zoloz_perm_residence: "Y",
    documents: [
      {
        docId: "c45f49dcf7092bc3420a6fedcb874dacce1335621e5e9d70ba201028542705d3",
        country: "HK",
        documentStatus: "UPLOADED",
        appId: channel_reference,
        documentCategoryCode: "R0001",
        errorDescription: null,
        errorCode: null,
        responseStatus: "SUCCESS",
        documentTypeCode: "A001",
        documentOptionSequence: "1",
        imageOrder: "1",
        applicantId: "1",
        period: 0,
        documentName: "HKID_Front_Page1732689656595",
      },
      {
        docId: "9e7f0f0560cb99c57396738feffc80a313aa592ced1aeb1b9af4968daac506c7",
        country: "HK",
        documentStatus: "UPLOADED",
        appId: channel_reference,
        documentCategoryCode: "R0006",
        errorDescription: null,
        errorCode: null,
        responseStatus: "SUCCESS",
        documentTypeCode: "A039",
        documentOptionSequence: "1",
        imageOrder: "1",
        applicantId: "1",
        period: 0,
        documentName: "Selfie_Image1732689656642",
      },
    ],
    zoloz_value: "Success",
    Juvenile_Result: "Y",
  };
  const imgUrl = useSelector((state: any) => {
    return state?.preApproval?.imgPrevURL || imgUrlStatic;
  });
  const docName = useSelector((state: any) => {
    return state?.preApproval?.documentZoloCheckRes[0]?.documentName;
  });
  const stageSelector = useSelector(
    (state: StoreModel) => state.stages.stages[0].stageInfo
  );
  const footeContent = "File format should be in JPG or PNG. The individual file size must not exceed 5MB. Click";
  const copyRights = "Â© Standard Chartered Bank (HK) Limited";

  const closeFileUpload = () => {
    dispatch(stagesAction.updatefileSectionData(null));
    dispatch(stagesAction.updateshowUploadFileSuccess(false));
    dispatch(stagesAction.updateShowQRCodePage(false));
    dispatch(stagesAction.updateShowIncomeProof(""));
  };

  const openImagePreview = (img: any, name: any) => {
    setImageURL(img);
    setName(name);
    setImagePreview(true);
  };

  const callQRCodeAPI = () => {
    dispatch(dispatchLoader(true));
    postQRCodeZOLO(channel_reference, HKIDVersionValue)
      .then((response: any) => {
        if (response.status === 200) {
          // setHKIDQRCodeData(response.data);
          dispatch(stagesAction.updateHKIDQRCodeData(response.data));
          dispatch(dispatchLoader(false));
        }
        else {
          dispatch(dispatchLoader(false));
          dispatch(
            errorAction.getError({
              statusCode: "error",
              statusText: "no response",
            })
          );
        }
      })
      .catch((error: AxiosError) => {
        dispatchError(error);
      });
  };

  const callSubmit = async () => {
    try {
      var transactionId = HKIDQRCodeData.transactionId;
      var docType = HKIDVersionValue;
      const zoloCheckResponse = await postZOLOCheck(
        channel_reference,
        transactionId,
        docType
      );
      if (zoloCheckResponse.status === 200) {
        if (zoloCheckResponse.data?.documents?.length > 0 || res.documents.length > 0) {
          dispatch(dispatchLoader(true));
          const documents = zoloCheckResponse?.data?.documents || res.documents;
          const docId = documents[0]?.docId;
          dispatch(stagesAction.updatezolozDocumentData(documents[0]));
          let docData = zoloCheckResponse.data.documents !== null ? zoloCheckResponse.data.documents : res.documents
          dispatch(preApprovalAction.setDocumentZoloCheckRes(docData));
          //Achnowledge the post
          const acknowledgeResponse = await postZolozAcknowledge(
            channel_reference,
            documents
          );
          const resStatus = acknowledgeResponse?.data?.[0]?.responseStatus;
          /* istanbul ignore else */
          if (resStatus === "Success") {
            dispatch(dispatchLoader(false));
            setOpenSuccessModal(true);
            dispatch(stagesAction.updateshowUploadFileSuccess(true));
            //Fetch and handle image preview
            const imagePreviewResponse = await getImagePreview(
              channel_reference,
              docId
            );
            /* istanbul ignore else */
            if (imagePreviewResponse.status === 200) {
              const blob = imagePreviewResponse?.data;
              const imgObjURL = URL.createObjectURL(blob);
              dispatch(preApprovalAction.setImgPrevURL(imgObjURL));
              //PDF Preview
              const pdfPreviewRes = await postPdfPreview(channel_reference);
              if (pdfPreviewRes.status >= 200 && pdfPreviewRes.status < 300) {
                /* istanbul ignore else */
                if (pdfPreviewRes.data.statusCode.toUpperCase() === "OK") {
                  dispatch(stagesAction.updatedocumentData(pdfPreviewRes.data.documents));
                  dispatch(dispatchLoader(false));
                }
              } else {
                dispatch(dispatchLoader(false));
                dispatch(
                  errorAction.getError({
                    statusCode: "error",
                    statusText: "no response",
                  })
                );
              }
            }
            else {
              dispatch(dispatchLoader(false));
              dispatch(
                errorAction.getError({
                  statusCode: "error",
                  statusText: "no response",
                })
              );
            }
          }
        } else {
          dispatch(dispatchLoader(false));
          setZoloErrorpopup(true);
        }
      }
      else {
        dispatch(dispatchLoader(false));
        dispatch(
          errorAction.getError({
            statusCode: "error",
            statusText: "no response",
          })
        );
      }
    } catch (error) {
      console.log("error:", error);
    }
  };
  const successModalClose = () => {
    setOpenSuccessModal(false);
  };

  const modelClose = () => {
    setZoloErrorpopup(false);
    callQRCodeAPI();
  };
  
  const okBtnClick = () => {
    let documents = documentZoloCheckRes[0];
    let zolozData = {
      "docId": documents.docId,
      "country": "HK",
      "documentStatus": "Accepted",
      "appId": documents.appId,
      "documentCategoryCode": documents.documentCategoryCode,
      "errorDescription": null,
      "errorCode": null,
      "responseStatus": documents.responseStatus,
      "documentTypeCode": documents.documentTypeCode,
      "documentOptionSequence": documents.documentOptionSequence,
      "imageOrder": documents.imageOrder,
      "applicantId": documents.applicantId,
      "period": documents.period,
      "documentName": documents.documentName,
      "document_id": documents.document_id,
      "document_status": "Accepted",
      "document_sequence_number": "1",
      "uploaded_to_filenet": "Y",
      "document_option_sequence": "1",
      "document_category_code": "R0001",
      "document_type_code": "A001",
      "document_name": documents.documentName + ".png",
      "docLength": 1
    }

    let filesValue = stageSelector.applicant_documents[0].document_list;
    let filesData: any = JSON.parse(JSON.stringify(filesValue));
    for (let i in filesData) {
      if (filesData[i].document_category === fileSectionData.document_category) {
        filesData[i].document_options[0].document_types[0].uploaded_documents = [zolozData];
        filesData[i]["applicant_sequence_number"] = 1;
      }
    }
    let stageData = JSON.parse(JSON.stringify(stageSelector));
    stageData.applicant_documents[0].document_list = filesData;
    dispatch(
      stagesAction.getStage({
        id: CONSTANTS.STAGE_NAMES.DOC_3,
        formConfig: stageData,
      })
    );
    setContinueBtnVisiblity(true);
    dispatch(stagesAction.updateDocumentCount(documentCount + 1));
    dispatch(stagesAction.updatefileSectionData(null));
    dispatch(stagesAction.updateShowIncomeProof(""));
    dispatch(stagesAction.updatechangechangeIconIncomeProof(false));
    dispatch(stagesAction.updateSuccess(true));
    setHKIDVersion("");
  }

  return (
    <>
      <div className="container">
        {
          <PopupModel displayPopup={openSuccessModal}>
            <AlertModel alertType="Success" goBack={successModalClose} />
          </PopupModel>
        }

        {zoloErrorpopup && (
          <PopupModel displayPopup={zoloErrorpopup}>
            <AlertModel alertType={"zoloError"} goBack={modelClose} />
          </PopupModel>
        )}
        <div className="uploadHkDocument">
          <p className="doc-close" onClick={closeFileUpload}>
            <span className="doc-close-btn"></span>
            CLOSE
          </p>
          <p className="hk-proof-name">Colour Identity Proof</p>
        </div>
        <div className="qrMainLayOut">
          {!showUploadFileSuccess && (
            <>
              {" "}
              <div className="qrCodeContent">
                <div className="desktop-img">
                  <Carousel />
                </div>
              </div>
              <div className="qrImageSection">
                <img
                  src={`data:image/png;base64,${HKIDQRCodeData?.qrCode}`}
                  alt="ORError"
                />
                <div className="qrSubmitButton">
                  <label
                    role="button"
                    title="submit-button"
                    className="submit-btn"
                    onClick={callSubmit}
                  >
                    <span className="upload-img"></span>
                    Submit
                  </label>
                </div>
              </div>
            </>
          )}
          {imagePreview && (
            <ImagePreviewModal
              imgeURL={imgeURL}
              name={name}
              imagePreview={imagePreview}
              setImagePreview={setImagePreview}
            />
          )}

          {showUploadFileSuccess && (
            <>
              <div className="upload-btn1" key={"index"}>
                <div className="thumbnail-img-container">
                  <a>
                    <img
                      data-testid="image-preview"
                      title="image-preview"
                      src={imgUrl}
                      onClick={() => openImagePreview(imgUrl, docName)}
                    ></img>
                  </a>
                </div>
                <div className="container-image">
                  <div className="uploading-doc-name">
                    <span className="span-file-name">{docName}</span>
                    <div className="progress-text-icon"></div>
                  </div>
                  <div
                    className={"Upload completed" === "Upload completed" ? "uploaded" : "retry-uploaded"}
                  ></div>
                  <div
                    className={
                      "Upload completed" === "Upload completed"
                        ? "tick-mark"
                        : "no-tick-mark"
                    }
                  >
                    Upload completed
                  </div>
                </div>
              </div>
            </>
          )}
        </div>
        <div className="hk-copy-rights">
          <p>{copyRights}</p>
        </div>
      </div>
      <>
        <div className="footer footer-set">
          {
            <div role="button" className="back" onClick={closeFileUpload}>
              <span className="arrow"></span>
              Back
            </div>
          }
          <button
            role="button"
            title="Colour Identity Proof"
            type="submit"
            className={
              !showUploadFileSuccess
                ? `continue form-invalid`
                : `continue form-valid`
            }
            onClick={okBtnClick}
          >
            Continue
          </button>
        </div>
      </>
    </>
  );
};

export default Zoloz;
