import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import ColorIdentityProof from './colour-Identity-Proof';
import * as changeUtils from '../../../../../utils/common/change.utils';
import * as constants from '../../../../../utils/common/constants';

// Mock the child components
jest.mock('../carousel/carousel', () => () => <div>Carousel Mock</div>);
jest.mock('../zoloz/zoloz', () => ({ setHKIDVersion }: any) => (
  <div>Zoloz Mock {setHKIDVersion && 'with setHKIDVersion'}</div>
));

// Mock Redux hooks
jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

// Mock utility functions
jest.mock('../../../../../utils/common/change.utils', () => ({
  getLanguageInfo: jest.fn(),
}));

describe('ColorIdentityProof Component', () => {
  const mockStore = configureStore([]);
  let store: any;
  const mockCallQRCodeAPI = jest.fn();
  const mockSetHKIDVersion = jest.fn();

  beforeEach(() => {
    store = mockStore({
      stages: {
        dynamicDocumentsUpload: {
          showQRCodePage: false,
        },
      },
    });

    (changeUtils.getLanguageInfo as jest.Mock).mockReturnValue('en');
    (require('react-redux').useSelector as jest.Mock).mockImplementation((selector) => selector(store.getState()));
    (require('react-redux').useDispatch as jest.Mock).mockReturnValue(store.dispatch);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders the component with English content by default', () => {
    render(
      <Provider store={store}>
        <ColorIdentityProof callQRCodeAPI={mockCallQRCodeAPI} setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );

    expect(screen.getByText(/Carousel Mock/)).toBeInTheDocument();
    expect(screen.getByText(/Back/)).toBeInTheDocument();
    expect(screen.getByText(/Continue/)).toBeInTheDocument();
  });

  it('renders with Chinese content when language is CN', () => {
    (changeUtils.getLanguageInfo as jest.Mock).mockReturnValue('cn');
    
    render(
      <Provider store={store}>
        <ColorIdentityProof callQRCodeAPI={mockCallQRCodeAPI} setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );

    // Verify Chinese text appears (mock data doesn't have actual translations)
    expect(screen.getByText(/Continue/)).toBeInTheDocument();
  });

  it('renders with Hong Kong content when language is HK', () => {
    (changeUtils.getLanguageInfo as jest.Mock).mockReturnValue('hk');
    
    render(
      <Provider store={store}>
        <ColorIdentityProof callQRCodeAPI={mockCallQRCodeAPI} setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );

    // Verify Hong Kong text appears (mock data doesn't have actual translations)
    expect(screen.getByText(/Continue/)).toBeInTheDocument();
  });

  it('renders radio buttons for HKID versions', () => {
    render(
      <Provider store={store}>
        <ColorIdentityProof callQRCodeAPI={mockCallQRCodeAPI} setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );

    expect(screen.getByLabelText('Smart HKID')).toBeInTheDocument();
    expect(screen.getByLabelText('New Smart HKID')).toBeInTheDocument();
  });

  it('handles HKID version selection', () => {
    render(
      <Provider store={store}>
        <ColorIdentityProof callQRCodeAPI={mockCallQRCodeAPI} setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );

    const radioButton = screen.getByLabelText('Smart HKID');
    fireEvent.click(radioButton);

    expect(mockSetHKIDVersion).toHaveBeenCalledWith('08520000001');
    expect(store.dispatch).toHaveBeenCalledTimes(3); // updateHKIDVersionValue, updatechangeIconColorIdentityProof, addLovData
  });

  it('disables continue button when no HKID version is selected', () => {
    render(
      <Provider store={store}>
        <ColorIdentityProof callQRCodeAPI={mockCallQRCodeAPI} setHKIDVersion={mockSetHKIDVersion} HKIDVersion="" />
      </Provider>
    );

    const continueButton = screen.getByText('Continue');
    expect(continueButton).toBeDisabled();
  });

  it('enables continue button when HKID version is selected', () => {
    render(
      <Provider store={store}>
        <ColorIdentityProof callQRCodeAPI={mockCallQRCodeAPI} setHKIDVersion={mockSetHKIDVersion} HKIDVersion="08520000001" />
      </Provider>
    );

    const continueButton = screen.getByText('Continue');
    expect(continueButton).not.toBeDisabled();
  });

  it('calls onContinue handler and shows Zoloz component', () => {
    // Update store to show QR code page after continue is clicked
    store = mockStore({
      stages: {
        dynamicDocumentsUpload: {
          showQRCodePage: true,
        },
      },
    });
    (require('react-redux').useSelector as jest.Mock).mockImplementation((selector) => selector(store.getState()));

    render(
      <Provider store={store}>
        <ColorIdentityProof callQRCodeAPI={mockCallQRCodeAPI} setHKIDVersion={mockSetHKIDVersion} HKIDVersion="08520000001" />
      </Provider>
    );

    expect(screen.getByText('Zoloz Mock with setHKIDVersion')).toBeInTheDocument();
  });

  it('handles back button click', () => {
    render(
      <Provider store={store}>
        <ColorIdentityProof callQRCodeAPI={mockCallQRCodeAPI} setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );

    const backButton = screen.getByText('Back');
    fireEvent.click(backButton);

    expect(mockSetHKIDVersion).toHaveBeenCalledWith('');
    expect(store.dispatch).toHaveBeenCalledTimes(2); // updatefileSectionData, updateShowQRCodePage
  });

  it('updates checked state of radio buttons when HKIDVersion prop changes', () => {
    const { rerender } = render(
      <Provider store={store}>
        <ColorIdentityProof callQRCodeAPI={mockCallQRCodeAPI} setHKIDVersion={mockSetHKIDVersion} HKIDVersion="08520000001" />
      </Provider>
    );

    const smartHKIDRadio = screen.getByLabelText('Smart HKID') as HTMLInputElement;
    const newSmartHKIDRadio = screen.getByLabelText('New Smart HKID') as HTMLInputElement;

    expect(smartHKIDRadio.checked).toBe(true);
    expect(newSmartHKIDRadio.checked).toBe(false);

    // Rerender with different HKIDVersion
    rerender(
      <Provider store={store}>
        <ColorIdentityProof callQRCodeAPI={mockCallQRCodeAPI} setHKIDVersion={mockSetHKIDVersion} HKIDVersion="08520000002" />
      </Provider>
    );

    expect(smartHKIDRadio.checked).toBe(false);
    expect(newSmartHKIDRadio.checked).toBe(true);
  });

  it('dispatches loader when continue is clicked', () => {
    render(
      <Provider store={store}>
        <ColorIdentityProof callQRCodeAPI={mockCallQRCodeAPI} setHKIDVersion={mockSetHKIDVersion} HKIDVersion="08520000001" />
      </Provider>
    );

    const continueButton = screen.getByText('Continue');
    fireEvent.click(continueButton);

    expect(store.dispatch).toHaveBeenCalledWith(true); // dispatchLoader
    expect(store.dispatch).toHaveBeenCalledWith({ type: 'stages/updateShowQRCodePage', payload: true });
    expect(mockCallQRCodeAPI).toHaveBeenCalled();
    expect(mockSetHKIDVersion).toHaveBeenCalledWith('');
  });
});
