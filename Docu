import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Phone from './Phone';
import { CONSTANTS } from '../../../utils/common/constants';
import errorMsg from '../../../assets/_json/error.json';

const mockStore = configureStore([]);

describe('Phone Component', () => {
  const mockProps = {
    data: {
      logical_field_name: 'mobile_number',
      rwb_label_name: 'Mobile Number',
      mandatory: 'Yes',
      min_length: 8,
      length: 15,
      regex: '^[0-9]*$',
      editable: false,
      ui_defaulted_value: '852'
    },
    handleCallback: jest.fn(),
    handleFieldDispatch: jest.fn()
  };

  const mockState = {
    lov: {
      lov: [{
        label: 'mobile_number',
        value: [{ CODE_DESC: 'Hong Kong', CODE_VALUE: '852' }]
      }]
    },
    stages: {
      stages: [{
        stageInfo: {
          applicants: [{
            mobile_number_a_1: '852-12345678'
          }]
        }
      }],
      userInput: {
        applicants: [{}]
      }
    },
    fielderror: {
      error: []
    },
    preApproval: {
      resumeAllowed: 'N'
    }
  };

  const renderComponent = (props = mockProps, state = mockState) => {
    const store = mockStore(state);
    return render(
      <Provider store={store}>
        <Phone data={props.data} 
              handleCallback={props.handleCallback} 
              handleFieldDispatch={props.handleFieldDispatch} />
      </Provider>
    );
  };

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should render without crashing', () => {
    renderComponent();
    expect(screen.getByLabelText('Mobile Number')).toBeInTheDocument();
  });

  it('should display the country code dropdown with default value', () => {
    renderComponent();
    const select = screen.getByRole('combobox');
    expect(select).toHaveValue('852');
    expect(screen.getByText('+852')).toBeInTheDocument();
  });

  it('should initialize with default value from stageInfo', () => {
    renderComponent();
    const input = screen.getByRole('textbox');
    expect(input).toHaveValue('12345678');
  });

  it('should update input value on change', () => {
    renderComponent();
    const input = screen.getByRole('textbox');
    fireEvent.change(input, { target: { value: '98765432' } });
    expect(input).toHaveValue('98765432');
  });

  it('should call handleCallback on input change', () => {
    renderComponent();
    const input = screen.getByRole('textbox');
    fireEvent.change(input, { target: { value: '98765432' } });
    expect(mockProps.handleCallback).toHaveBeenCalled();
  });

  describe('Validation', () => {
    it('should show error when field is mandatory and empty', () => {
      renderComponent();
      const input = screen.getByRole('textbox');
      fireEvent.change(input, { target: { value: '' } });
      expect(screen.getByText(errorMsg.emity + 'Mobile Number')).toBeInTheDocument();
    });

    it('should show error when input contains non-numeric characters', () => {
      renderComponent();
      const input = screen.getByRole('textbox');
      fireEvent.change(input, { target: { value: 'abc123' } });
      expect(screen.getByText(errorMsg.numberOnly)).toBeInTheDocument();
    });

    it('should show error when input is shorter than min length', () => {
      renderComponent();
      const input = screen.getByRole('textbox');
      fireEvent.change(input, { target: { value: '123' } });
      expect(screen.getByText(errorMsg.mobileRequired)).toBeInTheDocument();
    });

    it('should clear error when valid input is provided', () => {
      renderComponent();
      const input = screen.getByRole('textbox');
      
      // First trigger an error
      fireEvent.change(input, { target: { value: '' } });
      expect(screen.getByText(errorMsg.emity + 'Mobile Number')).toBeInTheDocument();
      
      // Then provide valid input
      fireEvent.change(input, { target: { value: '12345678' } });
      expect(screen.queryByText(errorMsg.emity + 'Mobile Number')).not.toBeInTheDocument();
    });
  });

  describe('Blur Event', () => {
    it('should dispatch field update on blur with valid input', () => {
      const store = mockStore(mockState);
      render(
        <Provider store={store}>
          <Phone data={mockProps.data} 
                handleCallback={mockProps.handleCallback} 
                handleFieldDispatch={mockProps.handleFieldDispatch} />
        </Provider>
      );
      
      const input = screen.getByRole('textbox');
      fireEvent.change(input, { target: { value: '98765432' } });
      fireEvent.blur(input);
      
      const actions = store.getActions();
      expect(actions.some(action => action.type === 'isFieldUpdate/update')).toBeTruthy();
    });
  });

  describe('Focus Event', () => {
    it('should dispatch lastAction on focus', () => {
      const store = mockStore(mockState);
      render(
        <Provider store={store}>
          <Phone data={mockProps.data} 
                handleCallback={mockProps.handleCallback} 
                handleFieldDispatch={mockProps.handleFieldDispatch} />
        </Provider>
      );
      
      const input = screen.getByRole('textbox');
      fireEvent.focus(input);
      
      const actions = store.getActions();
      expect(actions.some(action => action.type === 'lastAction/getField')).toBeTruthy();
    });
  });

  describe('KeyDown Event', () => {
    it('should show error when tabbing out of empty mandatory field', () => {
      renderComponent();
      const input = screen.getByRole('textbox');
      fireEvent.change(input, { target: { value: '' } });
      fireEvent.keyDown(input, { key: 'Tab' });
      expect(screen.getByText(errorMsg.emity + 'Mobile Number')).toBeInTheDocument();
    });
  });

  describe('Resume Scenario', () => {
    it('should load saved value for office phone when resume is allowed', () => {
      const resumeState = {
        ...mockState,
        preApproval: {
          resumeAllowed: 'Y'
        },
        stages: {
          stages: [{
            stageInfo: {
              applicants: [{
                office_phone_number_a_1: '852-23456789'
              }]
            }
          }],
          userInput: {
            applicants: [{}]
          }
        }
      };
      
      const resumeProps = {
        ...mockProps,
        data: {
          ...mockProps.data,
          logical_field_name: 'office_phone_number'
        }
      };
      
      renderComponent(resumeProps, resumeState);
      const input = screen.getByRole('textbox');
      expect(input).toHaveValue('23456789');
    });
  });

  describe('Disabled State', () => {
    it('should render as disabled when editable is true', () => {
      const disabledProps = {
        ...mockProps,
        data: {
          ...mockProps.data,
          editable: true
        }
      };
      
      renderComponent(disabledProps);
      const input = screen.getByRole('textbox');
      expect(input).toBeDisabled();
    });
  });

  describe('Placeholder', () => {
    it('should show specific placeholder for mobile_number_rwb', () => {
      const rwbProps = {
        ...mockProps,
        data: {
          ...mockProps.data,
          logical_field_name: 'mobile_number_rwb'
        }
      };
      
      renderComponent(rwbProps);
      const input = screen.getByRole('textbox');
      expect(input).toHaveAttribute('placeholder', 'eg. 8446 2196 123');
    });

    it('should show no placeholder for office_phone_number', () => {
      const officeProps = {
        ...mockProps,
        data: {
          ...mockProps.data,
          logical_field_name: 'office_phone_number'
        }
      };
      
      renderComponent(officeProps);
      const input = screen.getByRole('textbox');
      expect(input).toHaveAttribute('placeholder', '');
    });
  });
});
