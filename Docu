import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import { useSelector, useDispatch } from 'react-redux';
import CasaTNC from './CasaTNC';

// Mock the necessary modules
jest.mock('react-redux', () => ({
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

jest.mock('../../services/preApprovalServices', () => ({
  getData: jest.fn(),
  getPDFData: jest.fn(),
}));

jest.mock('../../../../shared/components/pdf/pdf', () => () => <div>Mock PDF Component</div>);
jest.mock('../../../../shared/components/spinner/spinner', () => () => <div>Mock Spinner</div>);
jest.mock('../../services/common-service', () => ({
  dispatchLoader: jest.fn(),
}));

describe('CasaTNC Component', () => {
  const mockDispatch = jest.fn();
  const mockUseSelector = useSelector as jest.MockedFunction<typeof useSelector>;
  const mockGetData = jest.requireMock('../../services/preApprovalServices').getData;
  const mockGetPDFData = jest.requireMock('../../services/preApprovalServices').getPDFData;
  const mockDispatchLoader = jest.requireMock('../../services/common-service').dispatchLoader;

  beforeEach(() => {
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    mockDispatch.mockClear();
    mockGetData.mockClear();
    mockGetPDFData.mockClear();
    mockDispatchLoader.mockClear();
  });

  const mockStoreState = {
    preApproval: {
      currentStage: 'someStage',
      formConfigmetaData: {
        products: [{
          campaign: 'testCampaign'
        }]
      },
    }
  };

  describe('Initial Render', () => {
    it('should show spinner initially', () => {
      mockUseSelector.mockImplementation((selector) => selector(mockStoreState));
      mockGetData.mockResolvedValue({ data: { tncLinkCampaignCode: { isCasa: [{ pdfLinks: [] }] } } });
      
      render(<CasaTNC isVisible={true} onScrollEnd={jest.fn()} />);
      
      expect(screen.getByText('Mock Spinner')).toBeInTheDocument();
    });

    it('should set initial title and notes', () => {
      mockUseSelector.mockImplementation((selector) => selector(mockStoreState));
      mockGetData.mockResolvedValue({ data: { tncLinkCampaignCode: { isCasa: [{ pdfLinks: [] }] } } });
      
      render(<CasaTNC isVisible={true} onScrollEnd={jest.fn()} />);
      
      expect(screen.getByText('Before you start your application:')).toBeInTheDocument();
      expect(screen.getByText(/Please READ the following Terms & Conditions/)).toBeInTheDocument();
    });
  });

  describe('After Data Load', () => {
    beforeEach(() => {
      mockUseSelector.mockImplementation((selector) => selector(mockStoreState));
      mockGetData.mockResolvedValue({
        data: {
          products: { testCampaign: [{ pdfURL: 'http://test.pdf' }] },
          productsMob: { testCampaign: [{ pdfURL: 'http://test-mobile.pdf' }] },
          tncLinkCampaignCode: { 
            isCasa: [{ 
              pdfLinks: [
                { url: 'http://link1.pdf', Title: 'Link 1' },
                { url: 'http://link2.pdf', Title: 'Link 2' }
              ] 
            }] 
          }
        }
      });
      mockGetPDFData.mockResolvedValue('mockPdfData');
    });

    it('should render PDF component after data load', async () => {
      render(<CasaTNC isVisible={true} onScrollEnd={jest.fn()} />);
      
      await waitFor(() => {
        expect(screen.getByText('Mock PDF Component')).toBeInTheDocument();
      });
    });

    it('should render download button', async () => {
      render(<CasaTNC isVisible={true} onScrollEnd={jest.fn()} />);
      
      await waitFor(() => {
        expect(screen.getByText('Download')).toBeInTheDocument();
      });
    });

    it('should render T&C links', async () => {
      render(<CasaTNC isVisible={true} onScrollEnd={jest.fn()} />);
      
      await waitFor(() => {
        expect(screen.getByText('Tap below to read full T&C of relevant section.')).toBeInTheDocument();
        expect(screen.getByText('Link 1')).toBeInTheDocument();
        expect(screen.getByText('Link 2')).toBeInTheDocument();
      });
    });

    it('should show "TAP TO SCROLL AND READ" button initially', async () => {
      render(<CasaTNC isVisible={true} onScrollEnd={jest.fn()} />);
      
      await waitFor(() => {
        expect(screen.getByText('TAP TO SCROLL AND READ')).toBeInTheDocument();
      });
    });
  });

  describe('User Interactions', () => {
    beforeEach(() => {
      mockUseSelector.mockImplementation((selector) => selector(mockStoreState));
      mockGetData.mockResolvedValue({
        data: {
          products: { testCampaign: [{ pdfURL: 'http://test.pdf' }] },
          productsMob: { testCampaign: [{ pdfURL: 'http://test-mobile.pdf' }] },
          tncLinkCampaignCode: { isCasa: [{ pdfLinks: [] }] }
        }
      });
      mockGetPDFData.mockResolvedValue('mockPdfData');
    });

    it('should handle download button click', async () => {
      const { container } = render(<CasaTNC isVisible={true} onScrollEnd={jest.fn()} />);
      
      await waitFor(() => {
        const downloadButton = screen.getByText('Download');
        fireEvent.click(downloadButton);
        
        // Verify the download behavior (mock implementation)
        // In a real test, you might want to verify the URL creation
      });
    });

    it('should handle scroll to bottom button click', async () => {
      const { container } = render(<CasaTNC isVisible={true} onScrollEnd={jest.fn()} />);
      
      await waitFor(() => {
        const mockScrollBy = jest.fn();
        const mockDiv = {
          scrollBy: mockScrollBy,
          addEventListener: jest.fn(),
          removeEventListener: jest.fn(),
        };
        (container.querySelector('.react-pdf__Page__canvas1') as any) = mockDiv;
        
        const scrollButton = screen.getByText('TAP TO SCROLL AND READ');
        fireEvent.click(scrollButton);
        
        expect(mockScrollBy).toHaveBeenCalledWith({ top: 2000, behavior: 'smooth' });
      });
    });

    it('should show accept button when scrolled to bottom', async () => {
      const { container } = render(<CasaTNC isVisible={true} onScrollEnd={jest.fn()} />);
      
      await waitFor(() => {
        // Mock scroll event
        const scrollDiv = container.querySelector('.react-pdf__Page__canvas1');
        if (scrollDiv) {
          Object.defineProperty(scrollDiv, 'scrollTop', { value: 100 });
          Object.defineProperty(scrollDiv, 'scrollHeight', { value: 200 });
          Object.defineProperty(scrollDiv, 'clientHeight', { value: 100 });
          
          fireEvent.scroll(scrollDiv);
          
          expect(screen.getByText('I ACCEPT')).toBeInTheDocument();
        }
      });
    });
  });

  describe('Mobile vs Desktop', () => {
    it('should use mobile PDF URL when on mobile device', async () => {
      // Mock mobile user agent
      Object.defineProperty(window.navigator, 'userAgent', {
        value: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15',
        configurable: true
      });
      
      mockUseSelector.mockImplementation((selector) => selector(mockStoreState));
      mockGetData.mockResolvedValue({
        data: {
          products: { testCampaign: [{ pdfURL: 'http://desktop.pdf' }] },
          productsMob: { testCampaign: [{ pdfURL: 'http://mobile.pdf' }] },
          tncLinkCampaignCode: { isCasa: [{ pdfLinks: [] }] }
        }
      });
      mockGetPDFData.mockResolvedValue('mockPdfData');
      
      render(<CasaTNC isVisible={true} onScrollEnd={jest.fn()} />);
      
      await waitFor(() => {
        expect(mockGetPDFData).toHaveBeenCalledWith('http://mobile.pdf');
      });
    });

    it('should use desktop PDF URL when on desktop device', async () => {
      // Mock desktop user agent
      Object.defineProperty(window.navigator, 'userAgent', {
        value: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        configurable: true
      });
      
      mockUseSelector.mockImplementation((selector) => selector(mockStoreState));
      mockGetData.mockResolvedValue({
        data: {
          products: { testCampaign: [{ pdfURL: 'http://desktop.pdf' }] },
          productsMob: { testCampaign: [{ pdfURL: 'http://mobile.pdf' }] },
          tncLinkCampaignCode: { isCasa: [{ pdfLinks: [] }] }
        }
      });
      mockGetPDFData.mockResolvedValue('mockPdfData');
      
      render(<CasaTNC isVisible={true} onScrollEnd={jest.fn()} />);
      
      await waitFor(() => {
        expect(mockGetPDFData).toHaveBeenCalledWith('http://desktop.pdf');
      });
    });
  });

  describe('Error Handling', () => {
    it('should handle getData error', async () => {
      mockUseSelector.mockImplementation((selector) => selector(mockStoreState));
      mockGetData.mockRejectedValue(new Error('API Error'));
      
      render(<CasaTNC isVisible={true} onScrollEnd={jest.fn()} />);
      
      await waitFor(() => {
        expect(mockDispatchLoader).toHaveBeenCalledWith(false);
      });
    });

    it('should handle getPDFData error', async () => {
      mockUseSelector.mockImplementation((selector) => selector(mockStoreState));
      mockGetData.mockResolvedValue({
        data: {
          products: { testCampaign: [{ pdfURL: 'http://test.pdf' }] },
          tncLinkCampaignCode: { isCasa: [{ pdfLinks: [] }] }
        }
      });
      mockGetPDFData.mockRejectedValue(new Error('PDF Error'));
      
      render(<CasaTNC isVisible={true} onScrollEnd={jest.fn()} />);
      
      await waitFor(() => {
        expect(mockDispatchLoader).toHaveBeenCalledWith(false);
      });
    });
  });

  describe('Stage ID Handling', () => {
    it('should not render T&C links when stageID is provided', async () => {
      mockUseSelector.mockImplementation((selector) => selector(mockStoreState));
      mockGetData.mockResolvedValue({
        data: {
          products: { testCampaign: [{ pdfURL: 'http://test.pdf' }] },
          tncLinkCampaignCode: { 
            isCasa: [{ 
              pdfLinks: [
                { url: 'http://link1.pdf', Title: 'Link 1' }
              ] 
            }] 
          }
        }
      });
      mockGetPDFData.mockResolvedValue('mockPdfData');
      
      render(<CasaTNC isVisible={true} onScrollEnd={jest.fn()} stageID="someStage" />);
      
      await waitFor(() => {
        expect(screen.queryByText('Tap below to read full T&C of relevant section.')).not.toBeInTheDocument();
        expect(screen.queryByText('Link 1')).not.toBeInTheDocument();
      });
    });
  });
});
