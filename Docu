import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import DocumentUploadMainSCR from './DocumentUploadMainSCR';
import { CONSTANTS } from '../../../../../utils/common/constants';

const mockStore = configureStore([]);

describe('DocumentUploadMainSCR Component', () => {
  let store: any;

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'ld-1',
          stageInfo: {
            applicant_documents: [{
              document_list: [
                { id: 1, name: 'Identity Proof' },
                { id: 2, name: 'Income Proof' }
              ]
            }],
            application: {
              channel_reference: 'test123'
            },
            products: [{
              product_category: 'CC'
            }]
          }
        }],
        dynamicDocumentsUpload: {
          documentData: {},
          HKIDQRCodeData: null,
          changeIconColorIdentityProof: false,
          documentCount: 0,
          success: false,
          fileSectionData: null
        }
      }
    });
  });

  test('renders without crashing', () => {
    render(
      <Provider store={store}>
        <DocumentUploadMainSCR />
      </Provider>
    );
    
    expect(screen.getByTestId('document-upload-main')).toBeInTheDocument();
  });

  test('displays document upload header and count', () => {
    render(
      <Provider store={store}>
        <DocumentUploadMainSCR />
      </Provider>
    );
    
    expect(screen.getByText(/upload document/i)).toBeInTheDocument();
    expect(screen.getByText('0/2')).toBeInTheDocument();
  });

  test('renders DocumentTypeDynamic component', () => {
    render(
      <Provider store={store}>
        <DocumentUploadMainSCR />
      </Provider>
    );
    
    expect(screen.getByTestId('document-type-dynamic')).toBeInTheDocument();
  });

  test('displays footer content', () => {
    render(
      <Provider store={store}>
        <DocumentUploadMainSCR />
      </Provider>
    );
    
    expect(screen.getByText(/your privacy is important to us/i)).toBeInTheDocument();
    expect(screen.getByText(/standard chartered bank hong kong/i)).toBeInTheDocument();
  });

  test('shows continue button when success is true', () => {
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'ld-1',
          stageInfo: {
            applicant_documents: [{
              document_list: [
                { id: 1, name: 'Identity Proof' },
                { id: 2, name: 'Income Proof' }
              ]
            }],
            application: {
              channel_reference: 'test123'
            },
            products: [{
              product_category: 'CC'
            }]
          }
        }],
        dynamicDocumentsUpload: {
          documentData: {},
          HKIDQRCodeData: null,
          changeIconColorIdentityProof: false,
          documentCount: 2,
          success: true,
          fileSectionData: null
        }
      }
    });

    render(
      <Provider store={store}>
        <DocumentUploadMainSCR />
      </Provider>
    );
    
    expect(screen.getByRole('button', { name: /continue/i })).toBeInTheDocument();
  });

  test('continue button is disabled when not all documents are uploaded', () => {
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'ld-1',
          stageInfo: {
            applicant_documents: [{
              document_list: [
                { id: 1, name: 'Identity Proof' },
                { id: 2, name: 'Income Proof' }
              ]
            }],
            application: {
              channel_reference: 'test123'
            },
            products: [{
              product_category: 'CC'
            }]
          }
        }],
        dynamicDocumentsUpload: {
          documentData: {},
          HKIDQRCodeData: null,
          changeIconColorIdentityProof: false,
          documentCount: 1,
          success: true,
          fileSectionData: null
        }
      }
    });

    render(
      <Provider store={store}>
        <DocumentUploadMainSCR />
      </Provider>
    );
    
    const continueButton = screen.getByRole('button', { name: /continue/i });
    expect(continueButton).toBeDisabled();
    expect(continueButton).toHaveClass('form-invalid');
  });

  test('continue button is enabled when all documents are uploaded', () => {
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'ld-1',
          stageInfo: {
            applicant_documents: [{
              document_list: [
                { id: 1, name: 'Identity Proof' },
                { id: 2, name: 'Income Proof' }
              ]
            }],
            application: {
              channel_reference: 'test123'
            },
            products: [{
              product_category: 'CC'
            }]
          }
        }],
        dynamicDocumentsUpload: {
          documentData: {},
          HKIDQRCodeData: null,
          changeIconColorIdentityProof: false,
          documentCount: 2,
          success: true,
          fileSectionData: null
        }
      }
    });

    render(
      <Provider store={store}>
        <DocumentUploadMainSCR />
      </Provider>
    );
    
    const continueButton = screen.getByRole('button', { name: /continue/i });
    expect(continueButton).toBeEnabled();
    expect(continueButton).toHaveClass('form-valid');
  });

  test('shows spinner during loading states', () => {
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'ffd-1',
          stageInfo: {
            applicant_documents: [{
              document_list: [
                { id: 1, name: 'Identity Proof' },
                { id: 2, name: 'Income Proof' }
              ]
            }],
            application: {
              channel_reference: 'test123'
            },
            products: [{
              product_category: 'CC'
            }]
          }
        }],
        dynamicDocumentsUpload: {
          documentData: {},
          HKIDQRCodeData: null,
          changeIconColorIdentityProof: false,
          documentCount: 2,
          success: true,
          fileSectionData: null
        }
      }
    });

    render(
      <Provider store={store}>
        <DocumentUploadMainSCR />
      </Provider>
    );
    
    expect(screen.getByTestId('spinner')).toBeInTheDocument();
  });

  test('displays different language content based on language setting', () => {
    // Mock the getLanguageInfo function
    jest.mock('../../../../../utils/common/change.utils', () => ({
      getUrl: {
        getLanguageInfo: jest.fn(() => CONSTANTS.LANG_CN)
      }
    }));

    render(
      <Provider store={store}>
        <DocumentUploadMainSCR />
      </Provider>
    );
    
    // This would need actual Chinese translations in the constants file
    // expect(screen.getByText(/上传文件/i)).toBeInTheDocument();
  });

  test('handles HKID version state changes', () => {
    render(
      <Provider store={store}>
        <DocumentUploadMainSCR />
      </Provider>
    );
    
    // This would need to simulate interactions with child components
    // that would trigger the setHKIDVersion function
  });
});
