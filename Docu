import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import Zoloz from './Zoloz';
import * as preApprovalPostServices from '../../../services/preApprovalPostServices';
import * as preApprovalServices from '../../../../preApproval/services/preApprovalServices';
import { CONSTANTS } from '../../../../../utils/common/constants';

const middlewares = [thunk];
const mockStore = configureStore(middlewares);

// Mock the services
jest.mock('../../../services/preApprovalPostServices', () => ({
  postQRCodeZOLO: jest.fn(),
  postZOLOCheck: jest.fn(),
  postZolozAcknowledge: jest.fn(),
  postPdfPreview: jest.fn(),
}));

jest.mock('../../../../preApproval/services/preApprovalServices', () => ({
  getImagePreview: jest.fn(),
}));

describe('Zoloz Component', () => {
  let store: any;
  const setHKIDVersion = jest.fn();

  const initialState = {
    stages: {
      stages: [{
        stageInfo: {
          application: {
            channel_reference: 'test123'
          },
          applicant_documents: [{
            document_list: [{
              document_category: 'R0001',
              document_options: [{
                document_types: [{
                  uploaded_documents: []
                }]
              }]
            }]
          }]
        },
        dynamicDocumentsUpload: {
          showUploadFileSuccess: false,
          HKIDQRCodeData: {
            qrCode: 'testQRCode',
            transactionId: 'testTransactionId'
          },
          HKIDVersionValue: 'A001',
          fileSectionData: {
            document_category: 'R0001'
          },
          documentCount: 0
        }
      }]
    },
    preApproval: {
      imgPrevURL: 'testImageURL',
      documentZoloCheckRes: [{
        docId: 'testDocId',
        country: 'HK',
        documentStatus: 'UPLOADED',
        appId: 'test123',
        documentCategoryCode: 'R0001',
        errorDescription: null,
        errorCode: null,
        responseStatus: 'SUCCESS',
        documentTypeCode: 'A001',
        documentOptionSequence: '1',
        imageOrder: '1',
        applicantId: '1',
        period: 0,
        documentName: 'testDocumentName',
      }]
    }
  };

  beforeEach(() => {
    store = mockStore(initialState);
    jest.clearAllMocks();
  });

  test('renders without crashing', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersion} />
      </Provider>
    );
    
    expect(screen.getByText(/Colour Identity Proof/i)).toBeInTheDocument();
  });

  test('renders QR code section when showUploadFileSuccess is false', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersion} />
      </Provider>
    );
    
    expect(screen.getByRole('button', { name: /submit/i })).toBeInTheDocument();
  });

  test('renders success section when showUploadFileSuccess is true', () => {
    const successState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        stages: [{
          ...initialState.stages.stages[0],
          stageInfo: {
            ...initialState.stages.stages[0].stageInfo,
          },
          dynamicDocumentsUpload: {
            ...initialState.stages.stages[0].dynamicDocumentsUpload,
            showUploadFileSuccess: true
          }
        }]
      }
    };
    
    store = mockStore(successState);
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersion} />
      </Provider>
    );
    
    expect(screen.getByText(/upload complete/i)).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /continue/i })).toBeInTheDocument();
  });

  test('calls closeFileUpload when close button is clicked', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByText(/close/i));
    
    const actions = store.getActions();
    expect(actions).toContainEqual(
      expect.objectContaining({ type: 'stages/updatefileSectionData' })
    );
  });

  test('calls callSubmit when submit button is clicked', async () => {
    const mockZoloCheckResponse = {
      status: 200,
      data: {
        documents: [{
          docId: 'testDocId',
          documentName: 'testDocument',
          responseStatus: 'SUCCESS'
        }]
      }
    };
    
    const mockAcknowledgeResponse = {
      data: [{
        responseStatus: 'Success'
      }]
    };
    
    const mockImagePreviewResponse = {
      status: 200,
      data: new Blob()
    };
    
    const mockPdfPreviewResponse = {
      status: 200,
      data: {
        statusCode: 'OK',
        documents: []
      }
    };
    
    (preApprovalPostServices.postZOLOCheck as jest.Mock).mockResolvedValue(mockZoloCheckResponse);
    (preApprovalPostServices.postZolozAcknowledge as jest.Mock).mockResolvedValue(mockAcknowledgeResponse);
    (preApprovalServices.getImagePreview as jest.Mock).mockResolvedValue(mockImagePreviewResponse);
    (preApprovalPostServices.postPdfPreview as jest.Mock).mockResolvedValue(mockPdfPreviewResponse);
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByRole('button', { name: /submit/i }));
    
    await waitFor(() => {
      expect(preApprovalPostServices.postZOLOCheck).toHaveBeenCalled();
      expect(preApprovalPostServices.postZolozAcknowledge).toHaveBeenCalled();
    });
  });

  test('handles error in callSubmit when ZOLO check fails', async () => {
    (preApprovalPostServices.postZOLOCheck as jest.Mock).mockRejectedValue(new Error('API Error'));
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByRole('button', { name: /submit/i }));
    
    await waitFor(() => {
      expect(preApprovalPostServices.postZOLOCheck).toHaveBeenCalled();
    });
  });

  test('shows error popup when no documents are returned', async () => {
    const mockZoloCheckResponse = {
      status: 200,
      data: {
        documents: []
      }
    };
    
    (preApprovalPostServices.postZOLOCheck as jest.Mock).mockResolvedValue(mockZoloCheckResponse);
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByRole('button', { name: /submit/i }));
    
    await waitFor(() => {
      expect(screen.queryByText(/upload complete/i)).not.toBeInTheDocument();
    });
  });

  test('calls okBtnClick when continue button is clicked', () => {
    const successState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        stages: [{
          ...initialState.stages.stages[0],
          stageInfo: {
            ...initialState.stages.stages[0].stageInfo,
          },
          dynamicDocumentsUpload: {
            ...initialState.stages.stages[0].dynamicDocumentsUpload,
            showUploadFileSuccess: true
          }
        }]
      }
    };
    
    store = mockStore(successState);
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByRole('button', { name: /continue/i }));
    
    const actions = store.getActions();
    expect(actions).toContainEqual(
      expect.objectContaining({ type: 'stages/getStage' })
    );
    expect(setHKIDVersion).toHaveBeenCalledWith('');
  });

  test('opens image preview when image is clicked', () => {
    const successState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        stages: [{
          ...initialState.stages.stages[0],
          stageInfo: {
            ...initialState.stages.stages[0].stageInfo,
          },
          dynamicDocumentsUpload: {
            ...initialState.stages.stages[0].dynamicDocumentsUpload,
            showUploadFileSuccess: true
          }
        }]
      }
    };
    
    store = mockStore(successState);
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('image-preview'));
    
    // The ImagePreviewModal would be tested separately, but we can verify the click handler was called
    expect(screen.getByTestId('image-preview')).toBeInTheDocument();
  });

  test('handles language variations correctly', () => {
    const cnState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        stages: [{
          ...initialState.stages.stages[0],
          stageInfo: {
            ...initialState.stages.stages[0].stageInfo,
            application: {
              ...initialState.stages.stages[0].stageInfo.application,
              language: CONSTANTS.LANG_CN
            }
          }
        }]
      }
    };
    
    store = mockStore(cnState);
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersion} />
      </Provider>
    );
    
    // Verify Chinese text appears
    expect(screen.getByText(/提交/i)).toBeInTheDocument();
  });

  test('calls callQRCodeAPI when modelClose is triggered', async () => {
    (preApprovalPostServices.postQRCodeZOLO as jest.Mock).mockResolvedValue({
      status: 200,
      data: {
        qrCode: 'newQRCode'
      }
    });
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersion} />
      </Provider>
    );
    
    // Simulate zoloErrorpopup being true and then closed
    store = mockStore({
      ...initialState,
      stages: {
        ...initialState.stages,
        stages: [{
          ...initialState.stages.stages[0],
          dynamicDocumentsUpload: {
            ...initialState.stages.stages[0].dynamicDocumentsUpload,
            zoloErrorpopup: true
          }
        }]
      }
    });
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByRole('button', { name: /ok/i }));
    
    await waitFor(() => {
      expect(preApprovalPostServices.postQRCodeZOLO).toHaveBeenCalled();
    });
  });

  test('handles PDF preview error', async () => {
    const mockZoloCheckResponse = {
      status: 200,
      data: {
        documents: [{
          docId: 'testDocId',
          documentName: 'testDocument',
          responseStatus: 'SUCCESS'
        }]
      }
    };
    
    const mockAcknowledgeResponse = {
      data: [{
        responseStatus: 'Success'
      }]
    };
    
    const mockImagePreviewResponse = {
      status: 200,
      data: new Blob()
    };
    
    const mockPdfPreviewResponse = {
      status: 400,
      data: {
        statusCode: 'ERROR'
      }
    };
    
    (preApprovalPostServices.postZOLOCheck as jest.Mock).mockResolvedValue(mockZoloCheckResponse);
    (preApprovalPostServices.postZolozAcknowledge as jest.Mock).mockResolvedValue(mockAcknowledgeResponse);
    (preApprovalServices.getImagePreview as jest.Mock).mockResolvedValue(mockImagePreviewResponse);
    (preApprovalPostServices.postPdfPreview as jest.Mock).mockResolvedValue(mockPdfPreviewResponse);
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByRole('button', { name: /submit/i }));
    
    await waitFor(() => {
      expect(preApprovalPostServices.postPdfPreview).toHaveBeenCalled();
    });
  });
});
