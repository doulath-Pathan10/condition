import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import { Provider } from 'react-redux';
import { BrowserRouter } from 'react-router-dom';
import Submission from './Submission';
import axios from 'axios';
import { useSelector } from 'react-redux';

// Mock the necessary modules and components
jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useSelector: jest.fn(),
}));

jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useNavigate: () => jest.fn(),
}));

jest.mock('axios');

// Mock environment variables
process.env.REACT_APP_HOME_PAGE_URL = 'https://home-page-url.com';
process.env.REACT_APP_RTOB_BASE_URL = 'https://rtob-base-url.com';
process.env.NODE_ENV = 'test';

// Mock imported assets
jest.mock('../../../assets/_images/icon-sc-small-icon-sc-s-phone-call.png', () => 'phone-icon.png');
jest.mock('../../../assets/_images/simply-cash-card-horizontal@2x.jpg', () => 'simply-cash-horizontal.jpg');
jest.mock('../../../assets/_images/Simply Cash-Vertical@2x.jpg', () => 'simply-cash-vertical.jpg');
jest.mock('../../preApproval/images/cards/SCB_SMART_CARD_1536x969_Wallet_0114.png', () => 'smart-card.png');
jest.mock('../../../assets/_images/Tier-0-front.png', () => 'tier-0.png');
jest.mock('../../../assets/_images/Tier-1-front.png', () => 'tier-1.png');
jest.mock('../../../assets/_images/Tier-2-front.png', () => 'tier-2.png');

// Mock submission.json data
jest.mock('../../../assets/_json/submission.json', () => ({
  EN: {
    mainText: 'Thank you for your application',
    nextText: 'What happens next?',
    processingText: 'We will process your application',
    enquiryContent: 'For any enquiries, please contact',
    refNoText: 'Reference Number:',
    refText: 'Please quote this reference number in all communications',
    btnDeskTopText: 'Done',
    btnMobileText: 'Done',
    refPLText: 'For any enquiries, please contact us at',
    btnPLText: 'Done',
    scbHkCopyRights: '© Standard Chartered Bank (Hong Kong) Limited. All rights reserved.',
    contactText: 'Contact us',
    processingPLText: 'We will process your application and notify you of the outcome.'
  },
  CN: {
    mainText: '感謝您的申請',
    nextText: '下一步是什麼？',
    processingText: '我們將處理您的申請',
    enquiryContent: '如有任何疑問，請聯絡',
    refNoText: '參考編號：',
    refText: '請在所有通訊中注明此參考編號',
    btnDeskTopText: '完成',
    btnMobileText: '完成',
    refPLText: '如有任何疑問，請聯絡我們',
    btnPLText: '完成',
    scbHkCopyRights: '© 渣打銀行（香港）有限公司。保留所有權利。',
    contactText: '聯絡我們',
    processingPLText: '我們將處理您的申請並通知您結果。'
  },
  phone: '2886 8868',
  CCProducts: {
    mainText: 'Thank you for your application',
    ffdMainText: 'Open your bank account in just a few minutes',
    nextText: 'What happens next?',
    processingText: 'We will process your application',
    enquiryContent: 'For any enquiries, please contact',
    saveApplication: 'Download Application Form',
    nextTextBtn: 'Next'
  }
}));

// Mock getUrl utility
jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn().mockReturnValue('en'),
    getParameterByName: jest.fn().mockReturnValue('3264')
  }
}));

// Mock FFDSubmission component
jest.mock('./FFDSubmission', () => ({
  FFDSubmission: jest.fn().mockReturnValue(<div data-testid="ffd-submission">FFD Submission Component</div>)
}));

// Mock window.URL.createObjectURL
global.URL.createObjectURL = jest.fn(() => 'blob:url');

describe('Submission Component', () => {
  // Setup common mock data for all tests
  const mockDefaultState = {
    preApproval: {
      formConfigmetaData: {}
    },
    stages: {
      stages: [{
        stageInfo: {
          application: {
            channel_reference: 'TEST-REF-123',
            application_reference: 'TEST-REF-123'
          },
          applicants: [{
            casaSegment: 'N',
            asiaMilesCard: 'N',
            aof_doc_id: 'test-doc-id',
            repayDocId: 'test-repay-doc-id'
          }],
          products: [{
            product_category: 'CC',
            product_type: '1241',
            campaign: 'HKSOZ00MCWB000',
            offer_details: [{
              offer_status: '1001'
            }]
          }]
        }
      }]
    }
  };

  beforeEach(() => {
    // Reset all mocks before each test
    jest.clearAllMocks();
    
    // Mock the useSelector hook with default state
    useSelector.mockImplementation((selector) => selector(mockDefaultState));
    
    // Mock axios response
    axios.get.mockResolvedValue({
      status: 200,
      data: new ArrayBuffer(10)
    });
  });

  test('renders Credit Card submission screen correctly', () => {
    render(
      <BrowserRouter>
        <Submission />
      </BrowserRouter>
    );

    // Check if the main text is rendered
    expect(screen.getByText('Thank you for your application')).toBeInTheDocument();
    expect(screen.getByText('What happens next?')).toBeInTheDocument();
    expect(screen.getByText('We will process your application')).toBeInTheDocument();
    expect(screen.getByText('Download Application Form')).toBeInTheDocument();
    expect(screen.getByText('Reference Number: TEST-REF-123')).toBeInTheDocument();
    expect(screen.getByText('Please quote this reference number in all communications')).toBeInTheDocument();
  });

  test('renders Personal Loan submission screen correctly', () => {
    // Override the useSelector mock for Personal Loan
    useSelector.mockImplementation((selector) => ({
      ...mockDefaultState,
      stages: {
        stages: [{
          stageInfo: {
            application: {
              channel_reference: 'TEST-REF-123',
              application_reference: 'TEST-REF-123'
            },
            applicants: [{
              casaSegment: 'N',
              asiaMilesCard: 'N'
            }],
            products: [{
              product_category: 'PL',
              product_type: 'PL',
              offer_details: [{
                offer_status: '1001'
              }]
            }]
          }
        }]
      }
    }[selector.name] || selector(mockDefaultState)));

    render(
      <BrowserRouter>
        <Submission />
      </BrowserRouter>
    );

    // Check if the PL screen is rendered
    expect(screen.getByText('Thank you for your application')).toBeInTheDocument();
    expect(screen.getByText('What happens next?')).toBeInTheDocument();
    expect(screen.getByText('We will process your application and notify you of the outcome.')).toBeInTheDocument();
    expect(screen.getByText('For any enquiries, please contact us at')).toBeInTheDocument();
    expect(screen.getByText('2886 8868')).toBeInTheDocument();
    expect(screen.getByText('Reference Number: TEST-REF-123')).toBeInTheDocument();
    expect(screen.getByText('We\'d like your feedback!')).toBeInTheDocument();
  });

  test('renders Simply Cash card correctly', () => {
    render(
      <BrowserRouter>
        <Submission />
      </BrowserRouter>
    );

    // Check if the Simply Cash card image is displayed
    const cardImage = screen.getByRole('img', { name: '' });
    expect(cardImage).toBeInTheDocument();
    expect(cardImage).toHaveAttribute('src', 'simply-cash-horizontal.jpg');
  });

  test('renders Smart Card correctly', () => {
    // Override the useSelector mock for Smart Card
    useSelector.mockImplementation((selector) => ({
      ...mockDefaultState,
      stages: {
        stages: [{
          stageInfo: {
            application: {
              channel_reference: 'TEST-REF-123',
              application_reference: 'TEST-REF-123'
            },
            applicants: [{
              casaSegment: 'N',
              asiaMilesCard: 'N'
            }],
            products: [{
              product_category: 'CC',
              product_type: '1282',
              offer_details: [{
                offer_status: '1001'
              }]
            }]
          }
        }]
      }
    }[selector.name] || selector(mockDefaultState)));

    render(
      <BrowserRouter>
        <Submission />
      </BrowserRouter>
    );

    // Check if the Smart Card image is displayed
    const cardImage = screen.getByRole('img', { name: '' });
    expect(cardImage).toBeInTheDocument();
    expect(cardImage).toHaveAttribute('src', 'smart-card.png');
  });

  test('renders Tier 0 card correctly', () => {
    // Override the useSelector mock for Tier 0 card
    useSelector.mockImplementation((selector) => ({
      ...mockDefaultState,
      stages: {
        stages: [{
          stageInfo: {
            application: {
              channel_reference: 'TEST-REF-123',
              application_reference: 'TEST-REF-123'
            },
            applicants: [{
              casaSegment: 'N',
              asiaMilesCard: 'N'
            }],
            products: [{
              product_category: 'CC',
              product_type: '1313',
              campaign: 'HKSOZ00MCWB000',
              offer_details: [{
                offer_status: '1001'
              }]
            }]
          }
        }]
      }
    }[selector.name] || selector(mockDefaultState)));

    render(
      <BrowserRouter>
        <Submission />
      </BrowserRouter>
    );

    // Check if the Tier 0 card image is displayed
    const cardImage = screen.getByRole('img', { name: '' });
    expect(cardImage).toBeInTheDocument();
    expect(cardImage).toHaveAttribute('src', 'tier-0.png');
  });

  test('renders FFDSubmission component when path is /hk/ffd-casa and casaSegment is Y', () => {
    // Mock window.location.pathname
    Object.defineProperty(window, 'location', {
      value: {
        pathname: '/hk/ffd-casa'
      },
      writable: true
    });

    // Override the useSelector mock for FFD Casa
    useSelector.mockImplementation((selector) => ({
      ...mockDefaultState,
      stages: {
        stages: [{
          stageInfo: {
            application: {
              channel_reference: 'TEST-REF-123',
              application_reference: 'TEST-REF-123'
            },
            applicants: [{
              casaSegment: 'Y',
              asiaMilesCard: 'N'
            }],
            products: [{
              product_category: 'CC',
              product_type: '1313',
              campaign: 'HKSOZ00MCWB000',
              offer_details: [{
                offer_status: '1001'
              }]
            }]
          }
        }]
      }
    }[selector.name] || selector(mockDefaultState)));

    render(
      <BrowserRouter>
        <Submission />
      </BrowserRouter>
    );

    // Check if the FFDSubmission component is rendered
    expect(screen.getByTestId('ffd-submission')).toBeInTheDocument();
  });

  test('handles Download Application Form button click', async () => {
    render(
      <BrowserRouter>
        <Submission />
      </BrowserRouter>
    );

    // Mock document.createElement and its methods
    const mockAppendChild = jest.fn();
    const mockClick = jest.fn();
    const mockCreateElement = jest.spyOn(document, 'createElement').mockImplementation(() => ({
      style: {},
      href: '',
      target: '',
      download: '',
      click: mockClick,
      appendChild: mockAppendChild
    }));

    // Click the Download Application Form button
    fireEvent.click(screen.getByText('Download Application Form'));

    // Wait for the axios call to resolve
    await waitFor(() => {
      expect(axios.get).toHaveBeenCalled();
    });

    // Cleanup
    mockCreateElement.mockRestore();
  });

  test('handles Done button click', () => {
    render(
      <BrowserRouter>
        <Submission />
      </BrowserRouter>
    );

    // Click the Done button
    fireEvent.click(screen.getByText('Done'));

    // Expect the window.location.href to be set
    expect(window.location.href).toBe('https://home-page-url.com');
  });

  test('renders correctly in Chinese language', () => {
    // Mock getLanguageInfo to return Chinese
    jest.requireMock('../../../utils/common/change.utils').getUrl.getLanguageInfo.mockReturnValue('zh');

    render(
      <BrowserRouter>
        <Submission />
      </BrowserRouter>
    );

    // Check if Chinese text is rendered
    expect(screen.getByText('© 渣打銀行（香港）有限公司。保留所有權利。')).toBeInTheDocument();
    expect(screen.getByText('完成')).toBeInTheDocument();
  });

  test('renders correctly for special offer status', () => {
    // Override the useSelector mock for special offer status
    useSelector.mockImplementation((selector) => ({
      ...mockDefaultState,
      stages: {
        stages: [{
          stageInfo: {
            application: {
              channel_reference: 'TEST-REF-123',
              application_reference: 'TEST-REF-123'
            },
            applicants: [{
              casaSegment: 'N',
              asiaMilesCard: 'N'
            }],
            products: [{
              product_category: 'CC',
              product_type: '1241',
              offer_details: [{
                offer_status: '1002'
              }]
            }]
          }
        }]
      }
    }[selector.name] || selector(mockDefaultState)));

    render(
      <BrowserRouter>
        <Submission />
      </BrowserRouter>
    );

    // Check if PL screen is rendered due to special offer status
    expect(screen.getByText('We will process your application and notify you of the outcome.')).toBeInTheDocument();
  });
});
