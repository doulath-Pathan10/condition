import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import OnboardingBeforeStart from './OnboardingBeforeStart';
import { getData, getPDFData } from '../../services/preApprovalServices';
import { dispatchLoader } from '../../../../services/common-service';

// Mock modules
jest.mock('../../services/preApprovalServices', () => ({
  getData: jest.fn(),
  getPDFData: jest.fn()
}));

jest.mock('../../../../services/common-service', () => ({
  dispatchLoader: jest.fn()
}));

jest.mock('../../../../shared/components/pdf/pdf', () => {
  return function DummyPdf() {
    return <div data-testid="mock-pdf">Mock PDF Component</div>;
  };
});

jest.mock('../../../../shared/components/spinner/spinner', () => {
  return function DummySpinner() {
    return <div data-testid="mock-spinner">Loading...</div>;
  };
});

// Set up mock for window.location and navigator
const originalLocation = window.location;
const originalNavigator = window.navigator;

describe('OnboardingBeforeStart Component', () => {
  const mockStore = configureStore([thunk]);
  let store;
  let props;
  
  beforeEach(() => {
    // Mock location
    delete window.location;
    window.location = { 
      host: 'test.sc.com',
      pathname: '/hk/before-start',
      replace: jest.fn()
    };
    
    // Mock navigator
    Object.defineProperty(window, 'navigator', {
      value: {
        userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)',
      },
      writable: true
    });
    
    // Reset mocks
    jest.clearAllMocks();
    
    // Mock store data
    store = mockStore({
      stages: {
        stages: [{
          stageInfo: {
            products: [{
              campaign: 'HKPIL23PLSTP10',
              product_type: '1112'
            }]
          },
          stageId: '0'
        }]
      },
      preApproval: {
        formConfigmetaData: {
          products: [{
            campaign: 'HKPIL23PLSTP10'
          }]
        }
      }
    });
    
    // Mock props
    props = {
      isVisible: true,
      onScrollEnd: jest.fn(),
      stageID: 0,
      nextPage: jest.fn()
    };
    
    // Mock API responses
    getData.mockResolvedValue({
      data: {
        products: {
          'HKPIL23PLSTP10': [
            { pdfURL: 'https://pt.sc.com/assets/pdf/test-kfs.pdf' }
          ]
        },
        productsMob: {
          'HKPIL23PLSTP10': [
            { pdfURL: 'https://pt.sc.com/assets/pdf/test-kfs-mobile.pdf' }
          ]
        },
        tncLinkCampaignCode: {
          'HKPIL23PLSTP10': [
            {
              pdfLinks: [
                { Title: 'II. Personal Loan Terms', url: 'https://test.com/pdf1.pdf' },
                { Title: 'III. Client Terms', url: 'https://test.com/pdf2.pdf' }
              ]
            }
          ]
        },
        CampaignTnC: {
          'HKPIL23PLSTP10': [
            { pdfURL: 'https://pt.sc.com/assets/pdf/test-tnc.pdf' }
          ]
        },
        CampaignTnCMob: {
          'HKPIL23PLSTP10': [
            { pdfURL: 'https://pt.sc.com/assets/pdf/test-tnc-mobile.pdf' }
          ]
        }
      }
    });
    
    getPDFData.mockResolvedValue('mock-pdf-data');
    
    // Mock HTMLDivElement functionality needed by the component
    HTMLDivElement.prototype.scrollBy = jest.fn();
    Object.defineProperty(HTMLDivElement.prototype, 'scrollHeight', {
      configurable: true,
      value: 1000
    });
    Object.defineProperty(HTMLDivElement.prototype, 'scrollTop', {
      configurable: true,
      value: 950
    });
    Object.defineProperty(HTMLDivElement.prototype, 'clientHeight', {
      configurable: true,
      value: 100
    });
  });
  
  afterEach(() => {
    window.location = originalLocation;
    window.navigator = originalNavigator;
  });
  
  test('renders spinner while loading', async () => {
    render(
      <Provider store={store}>
        <OnboardingBeforeStart {...props} />
      </Provider>
    );
    
    expect(screen.getByTestId('mock-spinner')).toBeInTheDocument();
    expect(getData).toHaveBeenCalled();
    expect(dispatchLoader).toHaveBeenCalledWith(true);
  });
  
  test('renders PDF viewer after loading', async () => {
    render(
      <Provider store={store}>
        <OnboardingBeforeStart {...props} />
      </Provider>
    );
    
    await waitFor(() => {
      expect(screen.getByTestId('mock-pdf')).toBeInTheDocument();
      expect(screen.getByText('Download')).toBeInTheDocument();
    });
  });
  
  test('should change PDF based on stageID', async () => {
    const newProps = { ...props, stageID: 1 };
    
    render(
      <Provider store={store}>
        <OnboardingBeforeStart {...newProps} />
      </Provider>
    );
    
    await waitFor(() => {
      expect(getData).toHaveBeenCalled();
      expect(getPDFData).toHaveBeenCalled();
    });
  });
  
  test('should display terms and conditions table when stageID is 1', async () => {
    const newProps = { ...props, stageID: 1 };
    
    render(
      <Provider store={store}>
        <OnboardingBeforeStart {...newProps} />
      </Provider>
    );
    
    await waitFor(() => {
      expect(screen.getByText('Documents for Download')).toBeInTheDocument();
    });
  });
  
  test('should call onScrollEnd when user scrolls to bottom', async () => {
    render(
      <Provider store={store}>
        <OnboardingBeforeStart {...props} />
      </Provider>
    );
    
    await waitFor(() => {
      const pdfView = document.getElementById('pdf-view');
      fireEvent.scroll(pdfView);
      expect(props.onScrollEnd).toHaveBeenCalledWith(false);
    });
  });
  
  test('should call nextPage when accept button is clicked', async () => {
    const newProps = { ...props, isVisible: false };
    
    render(
      <Provider store={store}>
        <OnboardingBeforeStart {...newProps} />
      </Provider>
    );
    
    await waitFor(() => {
      const acceptButton = screen.getByText('I Accept');
      fireEvent.click(acceptButton);
      expect(props.nextPage).toHaveBeenCalled();
    });
  });
  
  test('should handle PDF download when download button is clicked', async () => {
    // Mock document.createElement and other DOM methods
    const mockAnchorElement = {
      href: '',
      download: '',
      click: jest.fn()
    };
    
    jest.spyOn(document, 'createElement').mockImplementation(() => mockAnchorElement);
    jest.spyOn(document.body, 'appendChild').mockImplementation(() => {});
    jest.spyOn(document.body, 'removeChild').mockImplementation(() => {});
    
    render(
      <Provider store={store}>
        <OnboardingBeforeStart {...props} />
      </Provider>
    );
    
    await waitFor(() => {
      const downloadButton = screen.getByText('Download');
      fireEvent.click(downloadButton);
      
      expect(mockAnchorElement.click).toHaveBeenCalled();
      expect(document.body.appendChild).toHaveBeenCalledWith(mockAnchorElement);
      expect(document.body.removeChild).toHaveBeenCalledWith(mockAnchorElement);
    });
  });
  
  test('should handle scroll when next button is clicked', async () => {
    render(
      <Provider store={store}>
        <OnboardingBeforeStart {...props} />
      </Provider>
    );
    
    await waitFor(() => {
      const nextButton = document.querySelector('.footer-next');
      fireEvent.click(nextButton);
      
      expect(HTMLDivElement.prototype.scrollBy).toHaveBeenCalled();
    });
  });
  
  test('should handle downloading terms and conditions PDFs', async () => {
    const newProps = { ...props, stageID: 1 };
    
    // Mock document.createElement and other DOM methods
    const mockAnchorElement = {
      href: '',
      download: '',
      click: jest.fn()
    };
    
    jest.spyOn(document, 'createElement').mockImplementation(() => mockAnchorElement);
    jest.spyOn(document.body, 'appendChild').mockImplementation(() => {});
    jest.spyOn(document.body, 'removeChild').mockImplementation(() => {});
    
    render(
      <Provider store={store}>
        <OnboardingBeforeStart {...newProps} />
      </Provider>
    );
    
    await waitFor(() => {
      const downloadLinks = screen.getAllByText('Download');
      // Click the second Download link in the table
      if (downloadLinks.length > 1) {
        fireEvent.click(downloadLinks[1]);
        expect(mockAnchorElement.click).toHaveBeenCalled();
      }
    });
  });
  
  test('should handle Safari browser for PDF download', async () => {
    // Mock Safari user agent
    Object.defineProperty(window, 'navigator', {
      value: {
        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1'
      },
      writable: true
    });
    
    // Mock document.createElement and other DOM methods
    const mockAnchorElement = {
      href: '',
      download: '',
      click: jest.fn()
    };
    
    jest.spyOn(document, 'createElement').mockImplementation(() => mockAnchorElement);
    jest.spyOn(document.body, 'appendChild').mockImplementation(() => {});
    jest.spyOn(document.body, 'removeChild').mockImplementation(() => {});
    
    render(
      <Provider store={store}>
        <OnboardingBeforeStart {...props} />
      </Provider>
    );
    
    await waitFor(() => {
      const downloadButton = screen.getByText('Download');
      fireEvent.click(downloadButton);
      
      expect(mockAnchorElement.click).toHaveBeenCalled();
      // Check that .pdf extension is added for Safari
      expect(mockAnchorElement.download.endsWith('.pdf')).toBeTruthy();
    });
  });
  
  test('should handle mobile devices', async () => {
    // Mock mobile user agent
    Object.defineProperty(window, 'navigator', {
      value: {
        userAgent: 'Mozilla/5.0 (Linux; Android 10; SM-G981B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.162 Mobile Safari/537.36'
      },
      writable: true
    });
    
    render(
      <Provider store={store}>
        <OnboardingBeforeStart {...props} />
      </Provider>
    );
    
    await waitFor(() => {
      // Should load mobile PDF URL
      expect(getPDFData).toHaveBeenCalledWith(expect.stringContaining('mobile'));
    });
  });
  
  test('should handle language variants', async () => {
    // Mock the getUrl.getLanguageInfo function
    jest.mock('../../../../utils/common/change.utils', () => ({
      getUrl: {
        getLanguageInfo: jest.fn().mockReturnValue('zh'),
        getParameterByName: jest.fn().mockReturnValue(null)
      }
    }));
    
    render(
      <Provider store={store}>
        <OnboardingBeforeStart {...props} />
      </Provider>
    );
    
    // This test would need to be updated with proper mocking for the language utility
    // or by checking specific UI elements that would be in Chinese
  });
  
  test('should handle localhost environment', async () => {
    // Mock localhost
    delete window.location;
    window.location = { 
      host: 'localhost:3000',
      pathname: '/hk/before-start',
      replace: jest.fn()
    };
    
    render(
      <Provider store={store}>
        <OnboardingBeforeStart {...props} />
      </Provider>
    );
    
    await waitFor(() => {
      // Should modify URLs for localhost environment
      expect(getPDFData).toHaveBeenCalledWith(expect.stringContaining('http://localhost:3000/'));
    });
  });
});,
