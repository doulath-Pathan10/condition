import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Amount from './Amount';

const mockStore = configureStore([]);

describe('Amount Component', () => {
  let store: any;
  const mockProps = {
    data: {
      logical_field_name: 'requested_loan_amount',
      rwb_label_name: 'Loan Amount',
      mandatory: 'Yes',
      min_length: 4,
      length: 7,
      regex: '^[0-9]*$',
      editable: false
    },
    handleCallback: jest.fn()
  };

  beforeEach(() => {
    store = mockStore({
      lov: { lov: [] },
      stages: {
        stages: [{ stageId: 'ad-1', stageInfo: { applicants: [{}] } }],
        userInput: { applicants: [{}] }
      },
      fielderror: { error: [], mandatoryFields: [] },
      preApproval: { resumeAllowed: 'N' },
      lastAccessed: { field: '' }
    });
  });

  test('renders without crashing', () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );
    expect(screen.getByLabelText('Loan Amount')).toBeInTheDocument();
  });

  test('displays label correctly', () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );
    expect(screen.getByText('Loan Amount')).toBeInTheDocument();
  });

  test('shows error when value is below minimum length', () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByPlaceholderText('Loan Amount');
    fireEvent.change(input, { target: { value: '123' } });
    
    expect(screen.getByText(/minLength/)).toBeInTheDocument();
  });

  test('shows error when loan amount is below 5000', () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByPlaceholderText('Loan Amount');
    fireEvent.change(input, { target: { value: '4999' } });
    
    expect(screen.getByText(/loan amount must be between/)).toBeInTheDocument();
  });

  test('shows error when loan amount is above 2000000', () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByPlaceholderText('Loan Amount');
    fireEvent.change(input, { target: { value: '2000001' } });
    
    expect(screen.getByText(/loan amount must be between/)).toBeInTheDocument();
  });

  test('shows error when loan amount is not multiple of 1000', () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByPlaceholderText('Loan Amount');
    fireEvent.change(input, { target: { value: '5500' } });
    
    expect(screen.getByText(/must be a multiple of 1000/)).toBeInTheDocument();
  });

  test('accepts valid loan amount', () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByPlaceholderText('Loan Amount');
    fireEvent.change(input, { target: { value: '10000' } });
    
    expect(screen.queryByText(/error/)).not.toBeInTheDocument();
  });

  test('displays tick mark when value is valid', () => {
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByPlaceholderText('Loan Amount');
    fireEvent.change(input, { target: { value: '10000' } });
    
    expect(document.querySelector('.tick-class')).toBeInTheDocument();
  });

  test('handles annual income validation', () => {
    const annualIncomeProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'annual_income',
        rwb_label_name: 'Annual Income'
      }
    };
    
    render(
      <Provider store={store}>
        <Amount {...annualIncomeProps} />
      </Provider>
    );
    
    const input = screen.getByPlaceholderText('Annual Income');
    fireEvent.change(input, { target: { value: '95999' } });
    
    expect(screen.getByText(/minimum annual income requirement/)).toBeInTheDocument();
  });

  test('shows HKD label for annual income fields', () => {
    const annualIncomeProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'annual_income',
        rwb_label_name: 'Annual Income'
      }
    };
    
    render(
      <Provider store={store}>
        <Amount {...annualIncomeProps} />
      </Provider>
    );
    
    expect(screen.getByText('HKD')).toBeInTheDocument();
  });

  test('handles other loans fields when otherLoans is Y', () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        stages: [{ stageId: 'ad-6', stageInfo: { applicants: [{}] } }],
        userInput: { applicants: [{ other_loans: 'Y' }] }
      }
    });
    
    const otherLoansProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'monthly_installment_mortgage_payment',
        rwb_label_name: 'Monthly Installment'
      }
    };
    
    render(
      <Provider store={store}>
        <Amount {...otherLoansProps} />
      </Provider>
    );
    
    const input = screen.getByRole('textbox');
    fireEvent.change(input, { target: { value: 'abc' } });
    
    expect(screen.getByText(/only numbers are allowed/)).toBeInTheDocument();
  });

  test('clears value when otherLoans is N in ad-6 stage', () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        stages: [{ stageId: 'ad-6', stageInfo: { applicants: [{}] } }],
        userInput: { applicants: [{ other_loans: 'N' }] }
      }
    });
    
    const otherLoansProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'monthly_installment_mortgage_payment',
        rwb_label_name: 'Monthly Installment'
      }
    };
    
    render(
      <Provider store={store}>
        <Amount {...otherLoansProps} />
      </Provider>
    );
    
    const input = screen.getByRole('textbox');
    expect(input).toHaveValue('');
  });

  test('displays resume data when resumeAllowed is Y', () => {
    store = mockStore({
      ...store.getState(),
      preApproval: { resumeAllowed: 'Y' },
      stages: {
        stages: [{
          stageId: 'ad-1',
          stageInfo: {
            applicants: [{
              requested_loan_amount_a_1: '50000'
            }]
          }
        }],
        userInput: { applicants: [{}] }
      }
    });
    
    render(
      <Provider store={store}>
        <Amount {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByPlaceholderText('Loan Amount');
    expect(input).toHaveValue('50000');
  });
});
