import React, { useEffect, useState } from "react";
import "./colour-Identity-Proof.scss";
import Carousel from "../carousel/carousel";
import { useDispatch, useSelector } from "react-redux";
import { getUrl } from "../../../../../utils/common/change.utils";
import { CONSTANTS } from "../../../../../utils/common/constants";
import { dispatchLoader } from "../../../../../services/common-service";
import { stagesAction } from "../../../../../utils/store/stages-slice";
import Zoloz from "../zoloz/zoloz";
import { lovDescAction } from "../../../../../utils/store/lov-desc-slice";

const ColorIdentityProof: React.FC<any> = ({
  callQRCodeAPI,
  HKIDVersion,
  setHKIDVersion
}) => {
  const language = getUrl.getLanguageInfo("lang")
  const showQRCodePage = useSelector((state: any) => state.stages.dynamicDocumentsUpload.showQRCodePage);
  const [lovData, setLovData] = useState([]);
  const dispatch = useDispatch();

  useEffect(() => {
    let lov: any = language === CONSTANTS.LANG_EN ? [
      {
        "CODE_VALUE": "08520000001",
        "CODE_DESC": "Smart HKID"
      },
      {
        "CODE_VALUE": "08520000002",
        "CODE_DESC": "New Smart HKID"
      }
    ] : [
      {
        "CODE_VALUE": "08520000001",
        "CODE_DESC": "智能身份證"
      },
      {
        "CODE_VALUE": "08520000002",
        "CODE_DESC": "新智能身份證"
      }
    ];
    setLovData(lov);
  }, [])

  const handleRadioBtnHKID = (item: any) => {
    const label = item.CODE_DESC;
    const value = item.CODE_VALUE;
    setHKIDVersion(value);
    dispatch(stagesAction.updateHKIDVersionValue(value));
    dispatch(stagesAction.updatechangeIconColorIdentityProof(false));
    dispatch(
      lovDescAction.addLovData({
        fieldData: {
          fieldName: "hkid_type",
          code_desc: label,
          code_value: value
        }
      })
    );
    let newLovData: any = JSON.parse(JSON.stringify(lovData));
    for (let i in newLovData) {
      if (newLovData[i].CODE_VALUE === value) {
        newLovData[i].checked = true;
      }
      else {
        newLovData[i].checked = false;
      }
    }
  };

  const onBackClick = () => {
    setHKIDVersion("");
    dispatch(stagesAction.updatefileSectionData(null));
    dispatch(stagesAction.updateShowQRCodePage(false));
  };

  const onContinue = async () => {
    dispatch(dispatchLoader(true));
    dispatch(stagesAction.updateShowQRCodePage(true));
    callQRCodeAPI();
    setHKIDVersion("");
  };

  return (
    <>
      {!showQRCodePage &&
        <>
          <div className="document-view">
            <div className="main-container">
              <section className="hkid-docPage">
                <p className="hkid-header">{language === CONSTANTS.LANG_EN ? CONSTANTS.headerTextDoc : language === CONSTANTS.LANG_CN?CONSTANTS.headerTextDoc_CN : CONSTANTS.headerTextDoc_HK}</p>
                <span className="header-note">{language === CONSTANTS.LANG_EN ? CONSTANTS.headerNote : language === CONSTANTS.LANG_CN?CONSTANTS.headerNote_CN : CONSTANTS.headerNote_HK}</span>
                <div className="radio-btn-section">
                  <label className="floatlabel">
                    <span className="textbox-label">
                      <b>{language === CONSTANTS.LANG_EN ? CONSTANTS.radioBtnText : language === CONSTANTS.LANG_CN?CONSTANTS.radioBtnText_CN : CONSTANTS.radioBtnText_HK}</b>
                    </span>
                  </label>
                  <div className="rto-form-component-hk">
                    <div className="radioOptions radioWithLabel" id="hkid_type_a_1">
                      {lovData.map((item: any, index: any) => {
                        return (
                          <div key={index} className="radioAligner" style={{ marginRight: 10 }}>
                            <label htmlFor={item.CODE_VALUE}>
                              <input
                                type="radio"
                                id={"hkid_type" + index}
                                name="hkid_type"
                                className="radio-btn"
                                onChange={() => handleRadioBtnHKID(item)}
                                checked={item.checked}
                              />
                              <span className="radio-button-lbl">{item.CODE_DESC}</span>
                            </label>
                          </div>
                        )
                      })}
                    </div>
                  </div>
                </div>
                <div className="hkid-prepare-points">
                  <div className="desktop-img">
                    <Carousel />
                  </div>
                </div>
                <div className="hkid-notes">{language === CONSTANTS.LANG_EN ? CONSTANTS.hknotes : language === CONSTANTS.LANG_CN?CONSTANTS.hknotes_CN : CONSTANTS.hknotes_HK}</div>
                <div className="hk-copy-rights">
                  <p>{language === CONSTANTS.LANG_EN ? CONSTANTS.scbHkCopyRights_EN : language === CONSTANTS.LANG_CN?CONSTANTS.scbHkCopyRights_CN : CONSTANTS.scbHkCopyRights_HK}</p>
                </div>
              </section>
            </div>
          </div>
          <div className="footer footer-set">
            <div
              role="button"
              className="back"
              onClick={onBackClick}>
              <span className="arrow"></span>
              {`${language === CONSTANTS.LANG_EN ? CONSTANTS.back : language === CONSTANTS.LANG_CN? CONSTANTS.back_CN : CONSTANTS.back_HK}`}
            </div>
            <button
              role="button"
              title="Colour Identity Proof"
              type="submit"
              className={
                !HKIDVersion ? `continue form-invalid` : `continue form-valid`
              }
              onClick={onContinue}
              disabled={HKIDVersion === ""}
            >
              {`${language === CONSTANTS.LANG_EN ? CONSTANTS.continue : language === CONSTANTS.LANG_CN? CONSTANTS.continue_CN : CONSTANTS.continue_HK}`}
            </button>
          </div>
        </>
      }
      {showQRCodePage &&
        <Zoloz
          setHKIDVersion={setHKIDVersion}
        />
      }
    </>
  );
};

export default ColorIdentityProof;

Please write an test cases using react and jest including branches with 100 percent coverage
