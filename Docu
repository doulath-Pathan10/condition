import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Dates from './Dates';
import { CONSTANTS } from '../../../utils/common/constants';

const mockStore = configureStore([]);

describe('Dates Component', () => {
  let store: any;
  const mockProps = {
    data: {
      logical_field_name: 'date_of_birth',
      rwb_label_name: 'Date of Birth',
      mandatory: 'Yes',
      editable: false
    },
    handleCallback: jest.fn(),
    handleFieldDispatch: jest.fn()
  };

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'ad-2',
          stageInfo: {
            applicants: [{}],
            products: [{ product_category: 'PL' }]
          }
        }],
        userInput: {
          applicants: [{
            work_type: 'E001',
            id_type_cb: 'Passport',
            expiry_date: null
          }]
        }
      },
      fielderror: { error: [], mandatoryFields: [] },
      lastAccessed: { field: '' },
      preApproval: { resumeAllowed: 'N' }
    });
  });

  test('renders without crashing', () => {
    render(
      <Provider store={store}>
        <Dates {...mockProps} />
      </Provider>
    );
    
    expect(screen.getByLabelText('Date of Birth')).toBeInTheDocument();
  });

  test('displays three input fields (DD, MM, YYYY)', () => {
    render(
      <Provider store={store}>
        <Dates {...mockProps} />
      </Provider>
    );
    
    expect(screen.getByPlaceholderText('DD')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('MM')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('YYYY')).toBeInTheDocument();
  });

  test('auto-focuses next field when maxLength is reached', () => {
    render(
      <Provider store={store}>
        <Dates {...mockProps} />
      </Provider>
    );
    
    const ddInput = screen.getByPlaceholderText('DD');
    const mmInput = screen.getByPlaceholderText('MM');
    
    fireEvent.change(ddInput, { target: { value: '12' } });
    expect(mmInput).toHaveFocus();
  });

  test('shows error for invalid month (>12)', () => {
    render(
      <Provider store={store}>
        <Dates {...mockProps} />
      </Provider>
    );
    
    const mmInput = screen.getByPlaceholderText('MM');
    fireEvent.change(mmInput, { target: { value: '13' } });
    
    expect(screen.getByText(/Date of Birth is required/)).toBeInTheDocument();
  });

  test('shows error for invalid date in February (non-leap year)', () => {
    render(
      <Provider store={store}>
        <Dates {...mockProps} />
      </Provider>
    );
    
    const ddInput = screen.getByPlaceholderText('DD');
    const mmInput = screen.getByPlaceholderText('MM');
    const yyyyInput = screen.getByPlaceholderText('YYYY');
    
    // 2023 is not a leap year
    fireEvent.change(ddInput, { target: { value: '29' } });
    fireEvent.change(mmInput, { target: { value: '02' } });
    fireEvent.change(yyyyInput, { target: { value: '2023' } });
    
    expect(screen.getByText('Date is not valid')).toBeInTheDocument();
  });

  test('shows error for underage user (PL product)', () => {
    // Mock current date to be 2023-01-01
    const originalDate = global.Date;
    global.Date.now = jest.fn(() => new Date('2023-01-01').getTime());
    
    render(
      <Provider store={store}>
        <Dates {...mockProps} />
      </Provider>
    );
    
    // User born in 2004 (would be 19 in 2023, but PL requires >=20)
    const ddInput = screen.getByPlaceholderText('DD');
    const mmInput = screen.getByPlaceholderText('MM');
    const yyyyInput = screen.getByPlaceholderText('YYYY');
    
    fireEvent.change(ddInput, { target: { value: '01' } });
    fireEvent.change(mmInput, { target: { value: '01' } });
    fireEvent.change(yyyyInput, { target: { value: '2004' } });
    
    expect(screen.getByText(/Minimum age for Personal Loan is 20/)).toBeInTheDocument();
    
    // Restore original Date
    global.Date = originalDate;
  });

  test('shows error for empty required field on tab', () => {
    render(
      <Provider store={store}>
        <Dates {...mockProps} />
      </Provider>
    );
    
    const ddInput = screen.getByPlaceholderText('DD');
    fireEvent.keyDown(ddInput, { key: 'Tab' });
    
    expect(screen.getByText(/Date of Birth is required/)).toBeInTheDocument();
  });

  test('shows tick mark when valid date is entered', () => {
    render(
      <Provider store={store}>
        <Dates {...mockProps} />
      </Provider>
    );
    
    const ddInput = screen.getByPlaceholderText('DD');
    const mmInput = screen.getByPlaceholderText('MM');
    const yyyyInput = screen.getByPlaceholderText('YYYY');
    
    fireEvent.change(ddInput, { target: { value: '01' } });
    fireEvent.change(mmInput, { target: { value: '01' } });
    fireEvent.change(yyyyInput, { target: { value: '1990' } });
    
    expect(document.querySelector('.tick-class')).toBeInTheDocument();
  });

  test('handles expiry date validation for passport', () => {
    const expiryProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'expiry_date',
        rwb_label_name: 'Expiry Date'
      }
    };
    
    render(
      <Provider store={store}>
        <Dates {...expiryProps} />
      </Provider>
    );
    
    const ddInput = screen.getByPlaceholderText('DD');
    const mmInput = screen.getByPlaceholderText('MM');
    const yyyyInput = screen.getByPlaceholderText('YYYY');
    
    // Set date to today (should show error for passport needing 6 months validity)
    const today = new Date();
    fireEvent.change(ddInput, { target: { value: String(today.getDate()).padStart(2, '0') } });
    fireEvent.change(mmInput, { target: { value: String(today.getMonth() + 1).padStart(2, '0') } });
    fireEvent.change(yyyyInput, { target: { value: today.getFullYear() } });
    
    expect(screen.getByText(/Passport must be valid for at least 6 months/)).toBeInTheDocument();
  });

  test('handles expiry date validation for Exit-Entry Permit', () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        ...store.getState().stages,
        userInput: {
          applicants: [{
            ...store.getState().stages.userInput.applicants[0],
            id_type_cb: 'Exit-Entry Permit'
          }]
        }
      }
    });
    
    const expiryProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'expiry_date',
        rwb_label_name: 'Expiry Date'
      }
    };
    
    render(
      <Provider store={store}>
        <Dates {...expiryProps} />
      </Provider>
    );
    
    const ddInput = screen.getByPlaceholderText('DD');
    const mmInput = screen.getByPlaceholderText('MM');
    const yyyyInput = screen.getByPlaceholderText('YYYY');
    
    // Set date to today (should show error for EEP needing 1 month validity)
    const today = new Date();
    fireEvent.change(ddInput, { target: { value: String(today.getDate()).padStart(2, '0') } });
    fireEvent.change(mmInput, { target: { value: String(today.getMonth() + 1).padStart(2, '0') } });
    fireEvent.change(yyyyInput, { target: { value: today.getFullYear() } });
    
    expect(screen.getByText(/Exit-Entry Permit must be valid for at least 1 month/)).toBeInTheDocument();
  });

  test('disables inputs when editable is true', () => {
    const disabledProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        editable: true
      }
    };
    
    render(
      <Provider store={store}>
        <Dates {...disabledProps} />
      </Provider>
    );
    
    expect(screen.getByPlaceholderText('DD')).toBeDisabled();
    expect(screen.getByPlaceholderText('MM')).toBeDisabled();
    expect(screen.getByPlaceholderText('YYYY')).toBeDisabled();
  });

  test('shows error message in different languages', () => {
    // Mock language to CN
    jest.spyOn(require('../../../utils/common/change.utils'), 'getUrl').mockImplementation(() => ({
      getLanguageInfo: () => CONSTANTS.LANG_CN
    }));
    
    render(
      <Provider store={store}>
        <Dates {...mockProps} />
      </Provider>
    );
    
    const mmInput = screen.getByPlaceholderText('MM');
    fireEvent.change(mmInput, { target: { value: '13' } });
    
    expect(screen.getByText(/请输入出生日期/)).toBeInTheDocument();
  });

  test('handles business establishment date validation', () => {
    const businessProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'business_est_date',
        rwb_label_name: 'Business Establishment Date'
      }
    };
    
    render(
      <Provider store={store}>
        <Dates {...businessProps} />
      </Provider>
    );
    
    const ddInput = screen.getByPlaceholderText('DD');
    const mmInput = screen.getByPlaceholderText('MM');
    const yyyyInput = screen.getByPlaceholderText('YYYY');
    
    // Set future date (invalid)
    const futureDate = new Date();
    futureDate.setFullYear(futureDate.getFullYear() + 1);
    
    fireEvent.change(ddInput, { target: { value: String(futureDate.getDate()).padStart(2, '0') } });
    fireEvent.change(mmInput, { target: { value: String(futureDate.getMonth() + 1).padStart(2, '0') } });
    fireEvent.change(yyyyInput, { target: { value: futureDate.getFullYear() } });
    
    expect(screen.getByText(/Business Establishment Date is required/)).toBeInTheDocument();
  });
});
