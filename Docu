import { useEffect, useState } from "react";
import "./document-upload-main-scr.scss";
import { useDispatch, useSelector } from "react-redux";
import { preApprovalAction } from "../../../../preApproval/store/preApproval-slice";
import { postDocSaveData, postFinalAcknowledge, postFulFilmentData, postTMXUserSession } from "../../../../preApproval/services/preApprovalPostServices";
import DocumentTypeDynamic from "../documentType/document-type-dynamic";
import { dispatchLoader, lovRequests } from "../../../../../services/common-service";
import { StoreModel } from "../../../../../utils/model/common-model";
import { stagesAction } from "../../../../../utils/store/stages-slice";
import { CONSTANTS } from "../../../../../utils/common/constants";
import Close from "../../../../../shared/components/close/close";
import { errorAction } from "../../../../../utils/store/error-slice";
import { HardStop } from "../../../services/preApprovalUtilsService";
import Spinner from "../../../../../shared/components/spinner/spinner";
import { stateUrl } from "../../../../dashboard/fields/stage.utils";
import { getUrl } from "../../../../../utils/common/change.utils";

const DucumentUploadMainSCR = () => {
  const uplaodDoc = "Please upload the following documents: ";
  const provideDoc = "Please provide the following documents";
  const document_list = useSelector((state: StoreModel) => state.stages && state.stages.stages[0].stageInfo.applicant_documents[0].document_list)
  const totalDocCount = document_list?.length;
  const tooltipText = "The document submitted will not be returned. Standard Chartered Bank (Hong Kong) Limited (the Bank) may request additional documents from you for approval purposes.";
  const footerContent1 = "Uploading your documents";
  const footerContent2 = "Uploading your HKID image requires a smart phone device. You will be asked to capture the image of your HKID and make selfie images for authentication purpose.";
  const footerContent3 = "Other documents can be directly uploaded.  Please note that copies of the documents submitted must be complete, legible and without any masked information.";
  const hkCopyRight = "Â© Standard Chartered Bank (HK) Limited";
  const [showIncomeProof, setShowIncomeProof] = useState("");
  const [HKIDQRCodeData, setHKIDQRCodeData] = useState(null);
  const [showUploadFileSuccess, setShowUploadFileSuccess] = useState(false);
  const [HKIDVersion, setHKIDVersion] = useState("");
  const [showContinueBtn, setShowContinueBtn] = useState(false);
  const [showSpinner, setShowSpinner] = useState(false);
  const [ffd2Enable, setFFD2Enable] = useState(false);
  const resumeAllowed = useSelector((state: StoreModel) => state.preApproval.resumeAllowed);
  const resumePage = getUrl.getParameterByName("pageId");
  let count = 0;
  document_list.forEach((doc:any) => {
    doc.document_options?.forEach((option:any) => {
      option.document_types?.forEach((type:any) => {
        if(type.uploaded_documents !== null){
          count += 1;
        }
      })
    })
  })
  const documentData = useSelector((state: any) => state.stages.dynamicDocumentsUpload.documentData);
  const newHKIDQRCodeData = useSelector((state: any) => state.stages.dynamicDocumentsUpload.HKIDQRCodeData);
  useEffect(() => {
    dispatch(dispatchLoader(false));
  }, [])

  const changeIconColorIdentityProof = useSelector((state: any) => state.stages.dynamicDocumentsUpload.changeIconColorIdentityProof);
  let documentCount = useSelector((state: any) => state.stages.dynamicDocumentsUpload.documentCount);
  if(resumeAllowed === "Y" || resumePage === "resume") {
    documentCount = count
  }
  const success = useSelector((state: any) => state.stages.dynamicDocumentsUpload.success);
  const channel_reference = useSelector((state: StoreModel) => state.stages && state.stages.stages[0].stageInfo.application.channel_reference);
  const stageSelector = useSelector((state: StoreModel) => state.stages && state.stages.stages);
  const fileSectionData = useSelector((state: any) => state.stages.dynamicDocumentsUpload.fileSectionData);
  const dispatch = useDispatch();

  useEffect(()=>{
    setShowSpinner(false);
  },[])
  
  const nextStage = async () => {
    dispatch(dispatchLoader(true));
    await postTMXUserSession(channel_reference).then(async (res: any) => {
      if (res.status === 200 && res.data.review_status.toLowerCase() === 'pass') {
        await postFinalAcknowledge(channel_reference).then(async (res: any) => {
          if (res.status === 202) {
            dispatch(stagesAction.updateStageId(CONSTANTS.STAGE_NAMES.LD_1));
            await postDocSaveData(documentData, newHKIDQRCodeData).then(async (res: any) => {
              if (res.status >= 200 && res.status <= 300) {
                let responseType = res.data.application.response_type.toUpperCase();
                let responseAction = res.data.application.response_action.toUpperCase();
                if (responseAction === "SUCCESS" || responseType === "INFO" || (responseType === "SOFT" && responseAction === "CONTINUE")) {
                  if (stageSelector[0].stageInfo.products[0].product_category === "CC") {
                    dispatch(stagesAction.updateStageId(CONSTANTS.STAGE_NAMES.FFD_1));
                    dispatch(dispatchLoader(false));
                    setShowSpinner(true);
                    postFulFilment(res.data);
                  }
                  else {
                    dispatch(preApprovalAction.setCurrentStage("PD-3"));
                    dispatch(stagesAction.updateStageId(CONSTANTS.STAGE_NAMES.LD_1));
                    let stageData = JSON.parse(JSON.stringify(stageSelector[0].stageInfo));
                    stageData.applicants = [res.data.applicants];
                    stageData.application = res.data.application;
                    stageData.applicant_documents = res.data.applicant_documents;
                    dispatch(lovRequests(stageData, CONSTANTS.STAGE_NAMES.LD_1));
                    dispatch(stagesAction.getStage({
                      id: CONSTANTS.STAGE_NAMES.LD_1,
                      formConfig: stageData,
                    }))
                    stateUrl(stageSelector[0].stageId);
                    dispatch(dispatchLoader(false));
                  }
                }
                else {
                  HardStop(res);
                }
              }
              else {
                dispatch(dispatchLoader(false));
                dispatch(
                  errorAction.getError({
                    statusCode: "error",
                    statusText: "no response",
                  })
                );
              }
            })
          }
          else {
            dispatch(dispatchLoader(false));
            dispatch(
              errorAction.getError({
                statusCode: "error",
                statusText: "no response",
              })
            );
          }
        })
      }
      else {
        dispatch(dispatchLoader(false));
        dispatch(
          errorAction.getError({
            statusCode: "error",
            statusText: "no response",
          })
        );
      }
    })
  }

  const postFulFilment = async (res: any) => {
    stateUrl(stageSelector[0].stageId);
    postFulFilmentData(res).then(async (fulres: any) => {
      if (fulres.status >= 200 && fulres.status < 300) {
        dispatch(stagesAction.updateStageId(CONSTANTS.STAGE_NAMES.FFD_2));
        let stageData = JSON.parse(JSON.stringify(stageSelector[0].stageInfo));
        stageData.applicants = [fulres.data.applicants];
        stageData.application = fulres.data.application;
        dispatch(
          stagesAction.getStage({
            id: CONSTANTS.STAGE_NAMES.FFD_2,
            formConfig: stageData,
          })
        );
        let responseType = fulres.data.application.response_type.toUpperCase();
        let responseAction = fulres.data.application.response_action.toUpperCase();
        if (responseAction === "SUCCESS" || responseType === "INFO" || (responseType === "SOFT" && responseAction === "CONTINUE")) {
          dispatch(stagesAction.updateStageId(CONSTANTS.STAGE_NAMES.FFD_2));
          setFFD2Enable(true)
         
        }
        else {
          dispatch(HardStop(fulres));
          setShowSpinner(false);
        }
      }
      else {
        dispatch(dispatchLoader(false));
        dispatch(
          errorAction.getError({
            statusCode: "error",
            statusText: "no response",
          })
        );
      }
    });
  }

  let stageId = stageSelector[0].stageId;
  return (
    <>
      {showSpinner && (stageId === "ld-1" || stageId === "ffd-1" || stageId === "ffd-2") ? (
        <Spinner loaderType="lastStep" enable={ffd2Enable} />
      )
        :
        <>
          <div className={HKIDVersion || showIncomeProof ? "" : "document-view"}>
            <>
              <div>
                {fileSectionData === null &&
                  <>
                    <div className="sc-icons">
                      <span className="banner-icon banner-icon-mobile"></span>
                      <div className="card-titleHead">
                        <div className="card-titleDoc">{uplaodDoc}</div>
                        <div className="hk-headerclose-btnH">
                          <Close authType="resume" />
                        </div>
                      </div>
                    </div>
                    <div className="row doc-details" id="row-doc-details">
                      <p className="col-md-10 col-sm-10 col-xs-10 col-lg-10 doc-field-Label">
                        {provideDoc}
                      </p>
                      <p className="col-md-2 col-sm-2 col-xs-2 col-lg-2">
                        {" "}
                        <span className="count-doc">
                          {documentCount}/{totalDocCount}
                        </span>
                      </p>
                    </div>
                  </>
                }
                <DocumentTypeDynamic
                  showContinueBtn={showContinueBtn}
                  setShowContinueBtn={setShowContinueBtn}
                  setShowUploadFileSuccess={setShowUploadFileSuccess}
                  setHKIDVersion={setHKIDVersion}
                  HKIDVersion={HKIDVersion}
                  showUploadFileSuccess={showUploadFileSuccess}
                  setHKIDQRCodeData={setHKIDQRCodeData}
                />
                {fileSectionData === null &&
                  <>
                    <div className="noteTipDiv">
                      <p className="noteTip">{tooltipText}</p>
                    </div>
                    <div className="document-footer-main-document">
                      <div
                        className="footer-banner">
                        <div className="footer-content">
                          <p className="footer-content1">{footerContent1}</p>
                          <p className="footer-content2">{footerContent2}</p>
                          <p className="footer-content3">{footerContent3}</p>
                        </div>
                        <span className="images"></span>
                      </div>
                      <div className="hk-copy-rights">
                        <p>{hkCopyRight}</p>
                      </div>
                    </div>
                  </>
                }
              </div>
            </>
          </div>
          {fileSectionData === null && success && <>
            <div className="footer footer-set">
              <button role="button" type="submit" className={documentCount !== totalDocCount ? `continue form-invalid` : `continue form-valid`} onClick={nextStage} disabled={documentCount !== totalDocCount}>
                Continue
              </button>
            </div>
          </>}
        </>
      }
    </>
  );
};

export default DucumentUploadMainSCR;


Please write an test cases using react and jest
I have tried in claude but failing test cases please provide some unique test cases so that I can achieve more coverage
