import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import CasaTNC from './CasaTNC';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import { getData, getPDFData } from '../../services/preApprovalServices';
import * as commonService from '../../../../services/common-service';
import { preApprovalAction } from '../../store/preApproval-slice';

jest.mock('../../services/preApprovalServices');
jest.mock('../../../../services/common-service', () => ({
  dispatchLoader: jest.fn(),
}));
jest.mock('../../../../shared/components/pdf/pdf', () => () => <div>Mock PDF Viewer</div>);
jest.mock('../../../../shared/components/spinner/spinner', () => () => <div>Mock Spinner</div>);

const mockStore = configureStore([]);
const store = mockStore({
  preApproval: {
    currentStage: 'mockStage',
    formConfigmetaData: {
      products: [
        { campaign: 'mockCampaignId' }
      ]
    }
  }
});

const mockResponse = {
  data: {
    products: {
      mockCampaignId: [{ pdfURL: 'https://mock-url.com/kfs.pdf' }]
    },
    productsMob: {
      mockCampaignId: [{ pdfURL: 'https://mock-url.com/kfs-mobile.pdf' }]
    },
    tncLinkCampaignCode: {
      isCasa: [
        {
          pdfLinks: [
            { url: 'https://mock-url.com/terms1.pdf', Title: 'Terms 1' },
            { url: 'https://mock-url.com/terms2.pdf', Title: 'Terms 2' }
          ]
        }
      ]
    }
  }
};

describe('CasaTNC Component', () => {
  beforeEach(() => {
    (getData as jest.Mock).mockResolvedValue(mockResponse);
    (getPDFData as jest.Mock).mockResolvedValue('mockPDFData');
  });

  it('should render spinner initially', () => {
    render(
      <Provider store={store}>
        <CasaTNC isVisible={true} onScrollEnd={jest.fn()} stageID={undefined} />
      </Provider>
    );
    expect(screen.getByText('Mock Spinner')).toBeInTheDocument();
  });

  it('should render PDF viewer after data load', async () => {
    render(
      <Provider store={store}>
        <CasaTNC isVisible={true} onScrollEnd={jest.fn()} stageID={undefined} />
      </Provider>
    );

    expect(await screen.findByText('Mock PDF Viewer')).toBeInTheDocument();
    expect(await screen.findByText('Before you start your application:')).toBeInTheDocument();
    expect(await screen.findByText('Please READ the following Terms & Conditions')).toBeInTheDocument();
    expect(await screen.findByText('Download')).toBeInTheDocument();
  });

  it('should display download links when stageID is undefined', async () => {
    render(
      <Provider store={store}>
        <CasaTNC isVisible={true} onScrollEnd={jest.fn()} stageID={undefined} />
      </Provider>
    );

    expect(await screen.findByText('Terms 1')).toBeInTheDocument();
    expect(await screen.findByText('Terms 2')).toBeInTheDocument();
  });

  it('should handle downloadPDFPreApproval function correctly', async () => {
    render(
      <Provider store={store}>
        <CasaTNC isVisible={true} onScrollEnd={jest.fn()} stageID={undefined} />
      </Provider>
    );

    const downloadButton = await screen.findByText('Download');
    const createElementSpy = jest.spyOn(document, 'createElement');
    fireEvent.click(downloadButton);
    await waitFor(() => {
      expect(createElementSpy).toHaveBeenCalledWith('a');
    });
  });

  it('should scroll and show accept button after scroll', async () => {
    render(
      <Provider store={store}>
        <CasaTNC isVisible={true} onScrollEnd={jest.fn()} stageID={undefined} />
      </Provider>
    );

    const scrollContainer = await screen.findByText('Mock PDF Viewer');
    const listInnerDiv = scrollContainer.parentElement as HTMLElement;

    // Fire scroll event manually
    fireEvent.scroll(listInnerDiv, {
      target: {
        scrollTop: 1000,
        scrollHeight: 1000,
        clientHeight: 500,
      },
    });

    await waitFor(() => {
      expect(screen.getByText('I ACCEPT')).toBeInTheDocument();
    });
  });

  it('should handle TAP TO SCROLL AND READ button click', async () => {
    render(
      <Provider store={store}>
        <CasaTNC isVisible={true} onScrollEnd={jest.fn()} stageID={undefined} />
      </Provider>
    );

    expect(await screen.findByText('TAP TO SCROLL AND READ')).toBeInTheDocument();
    const tapButton = screen.getByText('TAP TO SCROLL AND READ');
    fireEvent.click(tapButton);
    // No error expected - scroll behavior triggered internally
  });

  it('should render without crashing when stageID is not undefined', async () => {
    render(
      <Provider store={store}>
        <CasaTNC isVisible={true} onScrollEnd={jest.fn()} stageID={'non-undefined-stage'} />
      </Provider>
    );

    expect(await screen.findByText('Before you start your application:')).toBeInTheDocument();
  });

  it('should cleanup event listener on unmount', async () => {
    const { unmount } = render(
      <Provider store={store}>
        <CasaTNC isVisible={true} onScrollEnd={jest.fn()} stageID={undefined} />
      </Provider>
    );
    unmount();
    // No errors expected
  });
});
