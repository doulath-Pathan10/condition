import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import DucumentUploadMainSCR from './DocumentUploadMainSCR';
import { postDocSaveData, postFinalAcknowledge, postFulFilmentData, postTMXUserSession } from '../../services/preApprovalPostServices';

// Mock the services and components
jest.mock('../../services/preApprovalPostServices');
jest.mock('../../../shared/components/close/close', () => () => <div>CloseButton</div>);
jest.mock('../documentType/document-type-dynamic', () => () => <div>DocumentTypeDynamic</div>);
jest.mock('../../../shared/components/spinner/spinner', () => () => <div>Spinner</div>);

const mockStore = configureStore([]);

describe('DocumentUploadMainSCR Component', () => {
  let store;
  const initialState = {
    stages: {
      stages: [{
        stageId: 'doc-upload',
        stageInfo: {
          applicant_documents: [{
            document_list: [
              {
                document_options: [{
                  document_types: [
                    { uploaded_documents: null }
                  ]
                }]
              }
            ]
          }],
          application: {
            channel_reference: 'test-ref'
          },
          products: [{
            product_category: 'CC'
          }]
        }
      }],
      dynamicDocumentsUpload: {
        documentData: {},
        HKIDQRCodeData: null,
        documentCount: 0,
        success: true,
        fileSectionData: null
      }
    },
    preApproval: {
      resumeAllowed: 'N',
      currentStage: 'doc-upload'
    }
  };

  beforeEach(() => {
    store = mockStore(initialState);
    (postTMXUserSession as jest.Mock).mockResolvedValue({
      status: 200,
      data: { review_status: 'pass' }
    });
    (postFinalAcknowledge as jest.Mock).mockResolvedValue({ status: 202 });
    (postDocSaveData as jest.Mock).mockResolvedValue({
      status: 200,
      data: {
        application: {
          response_type: 'INFO',
          response_action: 'CONTINUE'
        },
        applicants: {},
        applicant_documents: []
      }
    });
    (postFulFilmentData as jest.Mock).mockResolvedValue({
      status: 200,
      data: {
        application: {
          response_type: 'INFO',
          response_action: 'CONTINUE'
        },
        applicants: {}
      }
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('renders without crashing', () => {
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    expect(screen.getByText('Please upload the following documents:')).toBeInTheDocument();
  });

  test('displays document count correctly', () => {
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    expect(screen.getByText('0/1')).toBeInTheDocument();
  });

  test('renders DocumentTypeDynamic component', () => {
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    expect(screen.getByText('DocumentTypeDynamic')).toBeInTheDocument();
  });

  test('displays tooltip text', () => {
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    expect(screen.getByText(/The document submitted will not be returned/i)).toBeInTheDocument();
  });

  test('shows footer content', () => {
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    expect(screen.getByText('Uploading your documents')).toBeInTheDocument();
    expect(screen.getByText(/Uploading your HKID image requires a smart phone device/i)).toBeInTheDocument();
    expect(screen.getByText(/Other documents can be directly uploaded/i)).toBeInTheDocument();
  });

  test('displays copyright information', () => {
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    expect(screen.getByText('Â© Standard Chartered Bank (HK) Limited')).toBeInTheDocument();
  });

  test('renders Close button', () => {
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    expect(screen.getByText('CloseButton')).toBeInTheDocument();
  });

  test('disables Continue button when not all documents are uploaded', () => {
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    const continueButton = screen.getByRole('button', { name: /continue/i });
    expect(continueButton).toBeDisabled();
  });

  test('enables Continue button when all documents are uploaded', () => {
    const customState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        dynamicDocumentsUpload: {
          ...initialState.stages.dynamicDocumentsUpload,
          documentCount: 1
        }
      }
    };
    
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    const continueButton = screen.getByRole('button', { name: /continue/i });
    expect(continueButton).not.toBeDisabled();
  });

  test('handles nextStage for credit card product', async () => {
    const customState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        dynamicDocumentsUpload: {
          ...initialState.stages.dynamicDocumentsUpload,
          documentCount: 1
        }
      }
    };
    
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    const continueButton = screen.getByRole('button', { name: /continue/i });
    fireEvent.click(continueButton);
    
    await waitFor(() => {
      expect(postTMXUserSession).toHaveBeenCalledWith('test-ref');
      expect(postFinalAcknowledge).toHaveBeenCalledWith('test-ref');
      expect(postDocSaveData).toHaveBeenCalled();
    });
  });

  test('handles nextStage for non-credit card product', async () => {
    const customState = {
      ...initialState,
      stages: {
        stages: [{
          ...initialState.stages.stages[0],
          stageInfo: {
            ...initialState.stages.stages[0].stageInfo,
            products: [{
              product_category: 'LOAN'
            }]
          }
        }],
        dynamicDocumentsUpload: {
          ...initialState.stages.dynamicDocumentsUpload,
          documentCount: 1
        }
      }
    };
    
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    const continueButton = screen.getByRole('button', { name: /continue/i });
    fireEvent.click(continueButton);
    
    await waitFor(() => {
      expect(postTMXUserSession).toHaveBeenCalled();
      expect(postFinalAcknowledge).toHaveBeenCalled();
      expect(postDocSaveData).toHaveBeenCalled();
    });
  });

  test('shows spinner during loading', async () => {
    const customState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        stages: [{
          ...initialState.stages.stages[0],
          stageId: 'ffd-1'
        }],
        dynamicDocumentsUpload: {
          ...initialState.stages.dynamicDocumentsUpload,
          documentCount: 1
        }
      }
    };
    
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    expect(screen.getByText('Spinner')).toBeInTheDocument();
  });

  test('handles error in postTMXUserSession', async () => {
    (postTMXUserSession as jest.Mock).mockRejectedValue(new Error('API Error'));
    
    const customState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        dynamicDocumentsUpload: {
          ...initialState.stages.dynamicDocumentsUpload,
          documentCount: 1
        }
      }
    };
    
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    const continueButton = screen.getByRole('button', { name: /continue/i });
    fireEvent.click(continueButton);
    
    await waitFor(() => {
      expect(postTMXUserSession).toHaveBeenCalled();
    });
  });

  test('handles resume scenario when resumeAllowed is Y', () => {
    const customState = {
      ...initialState,
      preApproval: {
        resumeAllowed: 'Y'
      },
      stages: {
        ...initialState.stages,
        stages: [{
          ...initialState.stages.stages[0],
          stageInfo: {
            ...initialState.stages.stages[0].stageInfo,
            applicant_documents: [{
              document_list: [
                {
                  document_options: [{
                    document_types: [
                      { uploaded_documents: [{ id: 'doc1' }] }
                    ]
                  }]
                }
              ]
            }
          }
        }]
      }
    };
    
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    // Should show count as 1/1 since there's an uploaded document
    expect(screen.getByText('1/1')).toBeInTheDocument();
  });

  test('does not render footer content when fileSectionData is present', () => {
    const customState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        dynamicDocumentsUpload: {
          ...initialState.stages.dynamicDocumentsUpload,
          fileSectionData: { someData: true }
        }
      }
    };
    
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    expect(screen.queryByText('Uploading your documents')).not.toBeInTheDocument();
  });
});
