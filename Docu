import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import Zoloz from './Zoloz';
import { CONSTANTS } from '../../../../../utils/common/constants';

// Create mock store
const middlewares = [thunk];
const mockStore = configureMockStore(middlewares);

// Mock the services
jest.mock('../../../services/preApprovalPostServices', () => ({
  postDocuments: jest.fn(),
  postZOLOCheck: jest.fn(),
  postZolozAcknowledge: jest.fn(),
  postPdfPreview: jest.fn(),
  postQRCodeZOLO: jest.fn(() => Promise.resolve({ 
    status: 200, 
    data: { qrCode: 'testQRCode', transactionId: 'trans123' } 
  })),
}));

jest.mock('../../../../preApproval/services/preApprovalServices', () => ({
  getImagePreview: jest.fn(() => Promise.resolve({ 
    status: 200, 
    data: new Blob() 
  })),
}));

describe('Zoloz Component', () => {
  const mockSetHKIDVersion = jest.fn();
  let store: any;

  const baseState = {
    stages: {
      stages: [{
        stageInfo: {
          application: {
            channel_reference: 'test123',
            language: CONSTANTS.LANG_EN
          },
          applicant_documents: [{
            document_list: [{
              document_category: 'R0001',
              document_options: [{
                document_types: [{
                  uploaded_documents: []
                }]
              }]
            }]
          }]
        },
        dynamicDocumentsUpload: {
          showUploadFileSuccess: false,
          HKIDQRCodeData: { qrCode: 'testQRCode', transactionId: 'trans123' },
          HKIDVersionValue: 'A001',
          fileSectionData: { document_category: 'R0001' },
          documentCount: 0
        }
      }]
    },
    preApproval: {
      imgPrevURL: 'testImageURL',
      documentZoloCheckRes: [{
        docId: 'doc123',
        documentName: 'testDoc.png',
        documentTypeCode: 'A001',
        documentCategoryCode: 'R0001',
        responseStatus: 'SUCCESS'
      }]
    }
  };

  beforeEach(() => {
    store = mockStore(baseState);
    jest.clearAllMocks();
  });

  it('should render the component with QR code section', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );

    expect(screen.getByText('Colour Identity Proof')).toBeInTheDocument();
    expect(screen.getByText('Submit')).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /submit/i })).toBeInTheDocument();
  });

  it('should render success section when showUploadFileSuccess is true', () => {
    const successState = {
      ...baseState,
      stages: {
        ...baseState.stages,
        stages: [{
          ...baseState.stages.stages[0],
          dynamicDocumentsUpload: {
            ...baseState.stages.stages[0].dynamicDocumentsUpload,
            showUploadFileSuccess: true
          }
        }]
      }
    };

    const successStore = mockStore(successState);

    render(
      <Provider store={successStore}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );

    expect(screen.getByText('Upload completed')).toBeInTheDocument();
    expect(screen.getByText('Continue')).toBeInTheDocument();
  });

  it('should call closeFileUpload when close button is clicked', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );

    fireEvent.click(screen.getByText('Close'));

    const actions = store.getActions();
    expect(actions.some((action: any) => action.type === 'stages/updatefileSectionData')).toBeTruthy();
    expect(actions.some((action: any) => action.type === 'stages/updateshowUploadFileSuccess')).toBeTruthy();
  });

  it('should call callSubmit when submit button is clicked', async () => {
    // Mock successful ZOLO check response
    const mockPostZOLOCheck = require('../../../services/preApprovalPostServices').postZOLOCheck;
    mockPostZOLOCheck.mockResolvedValueOnce({
      status: 200,
      data: {
        documents: [{
          docId: 'doc123',
          documentName: 'testDoc.png',
          documentTypeCode: 'A001',
          documentCategoryCode: 'R0001',
          responseStatus: 'SUCCESS'
        }]
      }
    });

    // Mock successful acknowledge response
    const mockPostZolozAcknowledge = require('../../../services/preApprovalPostServices').postZolozAcknowledge;
    mockPostZolozAcknowledge.mockResolvedValueOnce({
      data: [{ responseStatus: 'Success' }]
    });

    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );

    fireEvent.click(screen.getByRole('button', { name: /submit/i }));

    await waitFor(() => {
      expect(mockPostZOLOCheck).toHaveBeenCalled();
    });
  });

  it('should show error popup when no documents are returned', async () => {
    const mockPostZOLOCheck = require('../../../services/preApprovalPostServices').postZOLOCheck;
    mockPostZOLOCheck.mockResolvedValueOnce({
      status: 200,
      data: { documents: [] }
    });

    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );

    fireEvent.click(screen.getByRole('button', { name: /submit/i }));

    await waitFor(() => {
      // Since we're not actually rendering the PopupModel, we verify the state change
      const actions = store.getActions();
      expect(actions.some((action: any) => action.type === 'error/getError')).toBeTruthy();
    });
  });

  it('should handle API errors', async () => {
    const mockPostZOLOCheck = require('../../../services/preApprovalPostServices').postZOLOCheck;
    mockPostZOLOCheck.mockRejectedValueOnce(new Error('API Error'));

    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );

    fireEvent.click(screen.getByRole('button', { name: /submit/i }));

    await waitFor(() => {
      const actions = store.getActions();
      expect(actions.some((action: any) => action.type === 'error/getError')).toBeTruthy();
    });
  });

  it('should update store when continue button is clicked', async () => {
    const successState = {
      ...baseState,
      stages: {
        ...baseState.stages,
        stages: [{
          ...baseState.stages.stages[0],
          dynamicDocumentsUpload: {
            ...baseState.stages.stages[0].dynamicDocumentsUpload,
            showUploadFileSuccess: true
          }
        }]
      }
    };

    const successStore = mockStore(successState);

    render(
      <Provider store={successStore}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );

    fireEvent.click(screen.getByText('Continue'));

    await waitFor(() => {
      const actions = successStore.getActions();
      expect(actions.some((action: any) => action.type === 'stages/updateDocumentCount')).toBeTruthy();
      expect(mockSetHKIDVersion).toHaveBeenCalledWith('');
    });
  });

  it('should render different language text', () => {
    const cnState = {
      ...baseState,
      stages: {
        ...baseState.stages,
        stages: [{
          ...baseState.stages.stages[0],
          stageInfo: {
            ...baseState.stages.stages[0].stageInfo,
            application: {
              ...baseState.stages.stages[0].stageInfo.application,
              language: CONSTANTS.LANG_CN
            }
          }
        }]
      }
    };

    const cnStore = mockStore(cnState);

    render(
      <Provider store={cnStore}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );

    expect(screen.getByText('提交')).toBeInTheDocument();
  });
});
