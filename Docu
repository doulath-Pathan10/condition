import React from 'react';
import { render, screen, waitFor, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import { MemoryRouter, useLocation } from 'react-router-dom';
import configureStore from 'redux-mock-store';
import PILDashboard from './PILDashboard';
import { CONSTANTS } from '../../../utils/common/constants';
import { getSessionByPreLogin, getResumeRequest, getDataFormConfig } from '../services/preApprovalServices';
import { getData } from '../services/preApprovalPostServices';

// Mock the services and utilities
jest.mock('../services/preApprovalServices', () => ({
  getSessionByPreLogin: jest.fn(),
  getResumeRequest: jest.fn(),
  getDataFormConfig: jest.fn(),
}));

jest.mock('../services/preApprovalPostServices', () => ({
  getData: jest.fn(),
}));

jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn(() => CONSTANTS.LANG_EN),
    getParameterByName: jest.fn(() => null),
    getChannelRefNo: jest.fn(() => ({ channelRefNo: 'TEST123' })),
  },
}));

jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useLocation: jest.fn(),
}));

// Mock child components
jest.mock('../../dashboard/left-sidebar/left-sidebar', () => () => <div>LeftSideBar</div>);
jest.mock('../../../shared/components/header-ref/header-ref', () => () => <div>HeaderRef</div>);
jest.mock('../../../shared/components/close/close', () => () => <div>Close</div>);
jest.mock('../dynamicComponent/dynamicComponent', () => () => <div>DynamicComponent</div>);
jest.mock('../../../shared/components/otp-model/otp-model', () => () => <div>OTPModel</div>);
jest.mock('../../../shared/components/popup-model/popup-model', () => ({ children }: any) => <div>PopupModel: {children}</div>);
jest.mock('../../../shared/components/model/model', () => () => <div>Model</div>);
jest.mock('../alertModal/alert-modal', () => ({ alertType, goBack }: any) => (
  <div>
    AlertModel: {alertType} 
    <button onClick={goBack}>Go Back</button>
  </div>
));
jest.mock('../commonComponents/asiaMiles/asiaMiles', () => () => <div>AsiaMiles</div>);

const mockStore = configureStore([]);

describe('PILDashboard Component', () => {
  const mockLocation = {
    search: '?product=123&source=01&lang=en',
    pathname: '/dashboard',
  };

  beforeEach(() => {
    (useLocation as jest.Mock).mockReturnValue(mockLocation);
    jest.clearAllMocks();
  });

  const renderComponent = (storeState: any = {}, location = mockLocation) => {
    (useLocation as jest.Mock).mockReturnValue(location);
    
    const store = mockStore({
      preApproval: {
        formConfigmetaData: {
          fieldmetadata: {
            data: {
              stages: [{
                fields: [{
                  field_set_name: 'Test Title',
                  rwb_label_name: 'Test Notes',
                }]
              }]
            }
          }
        },
        currentStage: 'PD-1',
        previousStage: 'PD-0',
      },
      auth: {
        sessionUid: 'test-session',
      },
      stages: {
        stages: [{
          stageId: 'pd-1',
          stageInfo: {},
        }],
        otpOpen: false,
      },
      urlParam: {
        validUrl: true,
      },
      ...storeState,
    });

    return render(
      <Provider store={store}>
        <MemoryRouter>
          <PILDashboard />
        </MemoryRouter>
      </Provider>
    );
  };

  test('renders AsiaMiles component when URL matches specific pattern', () => {
    (useLocation as jest.Mock).mockReturnValue({ search: '?product=1313&source=09&lang=en' });
    renderComponent();
    expect(screen.getByText('AsiaMiles')).toBeInTheDocument();
  });

  test('renders technical issue model when URL is invalid', () => {
    renderComponent({
      urlParam: { validUrl: false },
    });
    expect(screen.getByText('PopupModel:')).toBeInTheDocument();
    expect(screen.getByText('Model')).toBeInTheDocument();
  });

  test('renders OTPModel when stage is pd-1 and otpShow is true', () => {
    renderComponent({
      stages: {
        stages: [{ stageId: 'pd-1', stageInfo: {} }],
        otpOpen: true,
      },
    });
    expect(screen.getByText('OTPModel')).toBeInTheDocument();
  });

  test('renders main dashboard content with header and sidebar', () => {
    renderComponent();
    expect(screen.getByText('LeftSideBar')).toBeInTheDocument();
    expect(screen.getByText('HeaderRef')).toBeInTheDocument();
    expect(screen.getByText('DynamicComponent')).toBeInTheDocument();
  });

  test('handles resume flow when pageId is resume', async () => {
    (getUrl.getParameterByName as jest.Mock).mockReturnValue('resume');
    (getSessionByPreLogin as jest.Mock).mockResolvedValue({ 
      status: 201, 
      headers: { sessionuid: 'resume-session' } 
    });
    (getResumeRequest as jest.Mock).mockResolvedValue({
      status: 200,
      data: {
        applicants: [{}],
        application: {
          application_reference: 'APP123',
          cos_ref_number: 'COS123',
          application_status: 'A01',
          response_type: 'INFO',
          response_action: 'SUCCESS',
        },
        products: [{ product_type: '123', product_category: 'PL' }],
        stage: { page_id: 'bd-1a' },
        lov_desc: {},
      },
    });
    (getDataFormConfig as jest.Mock).mockResolvedValue({ status: 200, data: {} });

    renderComponent();
    await waitFor(() => {
      expect(getResumeRequest).toHaveBeenCalled();
    });
  });

  test('shows decline modal when response action is STOP', async () => {
    (getUrl.getParameterByName as jest.Mock).mockReturnValue('resume');
    (getResumeRequest as jest.Mock).mockResolvedValue({
      status: 200,
      data: {
        applicants: [{}],
        application: {
          application_reference: 'APP123',
          cos_ref_number: 'COS123',
          application_status: 'E01',
          response_type: 'HARD',
          response_action: 'STOP',
          error: {
            application_error: [{
              rtobCode: 'A10',
              error_description: 'Declined application',
            }],
          },
        },
        products: [{ product_type: '123', product_category: 'PL' }],
        stage: { page_id: 'bd-1a' },
        lov_desc: {},
      },
    });

    renderComponent();
    await waitFor(() => {
      expect(screen.getByText('AlertModel: DECLINE')).toBeInTheDocument();
    });
  });

  test('shows resubmit modal when response action is RESUBMIT', async () => {
    (getUrl.getParameterByName as jest.Mock).mockReturnValue('resume');
    (getResumeRequest as jest.Mock).mockResolvedValue({
      status: 200,
      data: {
        applicants: [{}],
        application: {
          application_reference: 'APP123',
          cos_ref_number: 'COS123',
          application_status: 'E01',
          response_type: 'HARD',
          response_action: 'RESUBMIT',
          error: {
            application_error: [{
              rtobCode: 'A15',
              error_description: 'Please resubmit',
            }],
          },
        },
        products: [{ product_type: '123', product_category: 'PL' }],
        stage: { page_id: 'bd-1a' },
        lov_desc: {},
      },
    });

    renderComponent();
    await waitFor(() => {
      expect(screen.getByText('AlertModel: RESUBMIT')).toBeInTheDocument();
    });
  });

  test('handles error during resume request', async () => {
    (getUrl.getParameterByName as jest.Mock).mockReturnValue('resume');
    (getResumeRequest as jest.Mock).mockRejectedValue({
      response: {
        status: 500,
        statusText: 'Internal Server Error',
      },
    });

    renderComponent();
    await waitFor(() => {
      // Verify error handling
      expect(screen.queryByText('DynamicComponent')).not.toBeInTheDocument();
    });
  });

  test('initializes new session when not in resume mode', async () => {
    (getSessionByPreLogin as jest.Mock).mockResolvedValue({ 
      status: 201, 
      headers: { sessionuid: 'new-session' } 
    });
    (getDataFormConfig as jest.Mock).mockResolvedValue({ status: 200, data: {} });

    renderComponent({
      auth: { sessionUid: null },
    });

    await waitFor(() => {
      expect(getSessionByPreLogin).toHaveBeenCalled();
      expect(getDataFormConfig).toHaveBeenCalled();
    });
  });

  test('handles session initialization error', async () => {
    (getSessionByPreLogin as jest.Mock).mockRejectedValue({
      response: {
        status: 401,
        statusText: 'Unauthorized',
      },
    });

    renderComponent({
      auth: { sessionUid: null },
    });

    await waitFor(() => {
      // Verify error handling
      expect(screen.queryByText('DynamicComponent')).not.toBeInTheDocument();
    });
  });

  test('updates title and notes based on language', () => {
    (getUrl.getLanguageInfo as jest.Mock)
      .mockReturnValueOnce(CONSTANTS.LANG_EN)
      .mockReturnValueOnce(CONSTANTS.LANG_CN);

    const { rerender } = renderComponent();

    // First render with EN
    expect(screen.getByText('Test Title')).toBeInTheDocument();

    // Re-render with CN
    renderComponent({}, { ...mockLocation, search: '?product=123&source=01&lang=cn' });
  });

  test('handles go back action in decline modal', async () => {
    (getUrl.getParameterByName as jest.Mock).mockReturnValue('resume');
    (getResumeRequest as jest.Mock).mockResolvedValue({
      status: 200,
      data: {
        applicants: [{}],
        application: {
          application_reference: 'APP123',
          cos_ref_number: 'COS123',
          application_status: 'E01',
          response_type: 'HARD',
          response_action: 'STOP',
          error: {
            application_error: [{
              rtobCode: 'A10',
              error_description: 'Declined application',
            }],
          },
        },
        products: [{ product_type: '123', product_category: 'PL' }],
        stage: { page_id: 'bd-1a' },
        lov_desc: {},
      },
    });

    renderComponent();
    
    await waitFor(() => {
      const goBackButton = screen.getByText('Go Back');
      fireEvent.click(goBackButton);
      // Verify modal is closed
      expect(screen.queryByText('AlertModel: DECLINE')).not.toBeInTheDocument();
    });
  });

  test('handles retry action in resubmit modal', async () => {
    (getUrl.getParameterByName as jest.Mock).mockReturnValue('resume');
    (getResumeRequest as jest.Mock).mockResolvedValue({
      status: 200,
      data: {
        applicants: [{}],
        application: {
          application_reference: 'APP123',
          cos_ref_number: 'COS123',
          application_status: 'E01',
          response_type: 'HARD',
          response_action: 'RESUBMIT',
          error: {
            application_error: [{
              rtobCode: 'A15',
              error_description: 'Please resubmit',
            }],
          },
        },
        products: [{ product_type: '123', product_category: 'PL' }],
        stage: { page_id: 'bd-1a' },
        lov_desc: {},
      },
    });

    renderComponent();
    
    await waitFor(() => {
      const goBackButton = screen.getByText('Go Back');
      fireEvent.click(goBackButton);
      // Verify modal is closed
      expect(screen.queryByText('AlertModel: RESUBMIT')).not.toBeInTheDocument();
    });
  });
});
