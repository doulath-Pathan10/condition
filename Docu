import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import Zoloz from './Zoloz';
import * as services from '../../../services/preApprovalPostServices';
import * as preApprovalServices from '../../../../preApproval/services/preApprovalServices';
import { CONSTANTS } from '../../../../../utils/common/constants';

const middlewares = [thunk];
const mockStore = configureStore(middlewares);

// Mock all services
jest.mock('../../../services/preApprovalPostServices', () => ({
  postQRCodeZOLO: jest.fn(),
  postZOLOCheck: jest.fn(),
  postZolozAcknowledge: jest.fn(),
  postPdfPreview: jest.fn(),
}));

jest.mock('../../../../preApproval/services/preApprovalServices', () => ({
  getImagePreview: jest.fn(),
}));

describe('Zoloz Component', () => {
  let store: any;
  const setHKIDVersionMock = jest.fn();

  const baseState = {
    stages: {
      stages: [{
        stageInfo: {
          application: {
            channel_reference: 'TEST123',
            language: CONSTANTS.LANG_EN
          },
          applicant_documents: [{
            document_list: [{
              document_category: 'R0001',
              document_options: [{
                document_types: [{
                  uploaded_documents: []
                }]
              }]
            }]
          }]
        },
        dynamicDocumentsUpload: {
          showUploadFileSuccess: false,
          HKIDQRCodeData: {
            qrCode: 'testQRCode',
            transactionId: 'test123'
          },
          HKIDVersionValue: 'A001',
          fileSectionData: {
            document_category: 'R0001'
          },
          documentCount: 0
        }
      }]
    },
    preApproval: {
      imgPrevURL: 'testImageURL',
      documentZoloCheckRes: [{
        docId: 'testDocId',
        documentName: 'testDocument.png',
        responseStatus: 'SUCCESS'
      }]
    }
  };

  beforeEach(() => {
    store = mockStore(baseState);
    jest.clearAllMocks();
    
    // Default mock implementations
    (services.postQRCodeZOLO as jest.Mock).mockResolvedValue({
      status: 200,
      data: { qrCode: 'newQRCode' }
    });
    
    (services.postZOLOCheck as jest.Mock).mockResolvedValue({
      status: 200,
      data: {
        documents: [{
          docId: 'testDocId',
          documentName: 'testDocument.png',
          responseStatus: 'SUCCESS'
        }]
      }
    });
    
    (services.postZolozAcknowledge as jest.Mock).mockResolvedValue({
      data: [{ responseStatus: 'Success' }]
    });
    
    (preApprovalServices.getImagePreview as jest.Mock).mockResolvedValue({
      status: 200,
      data: new Blob()
    });
    
    (services.postPdfPreview as jest.Mock).mockResolvedValue({
      status: 200,
      data: {
        statusCode: 'OK',
        documents: []
      }
    });
  });

  test('renders basic structure', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );

    expect(screen.getByText(/Colour Identity Proof/i)).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /submit/i })).toBeInTheDocument();
  });

  test('renders QR code section by default', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );

    expect(screen.getByRole('img', { name: /ORError/i })).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /submit/i })).toBeInTheDocument();
  });

  test('renders success section when showUploadFileSuccess is true', () => {
    const successState = {
      ...baseState,
      stages: {
        ...baseState.stages,
        stages: [{
          ...baseState.stages.stages[0],
          dynamicDocumentsUpload: {
            ...baseState.stages.stages[0].dynamicDocumentsUpload,
            showUploadFileSuccess: true
          }
        }]
      }
    };
    
    store = mockStore(successState);

    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );

    expect(screen.getByText(/upload complete/i)).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /continue/i })).toBeInTheDocument();
  });

  test('calls closeFileUpload when close button is clicked', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );

    fireEvent.click(screen.getByText(/close/i));

    const actions = store.getActions();
    expect(actions.some((action: any) => action.type === 'stages/updatefileSectionData')).toBeTruthy();
  });

  test('handles successful document submission flow', async () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );

    fireEvent.click(screen.getByRole('button', { name: /submit/i }));

    await waitFor(() => {
      expect(services.postZOLOCheck).toHaveBeenCalledWith('TEST123', 'test123', 'A001');
      expect(services.postZolozAcknowledge).toHaveBeenCalled();
      expect(preApprovalServices.getImagePreview).toHaveBeenCalled();
      expect(services.postPdfPreview).toHaveBeenCalled();
    });
  });

  test('shows error popup when no documents are returned', async () => {
    (services.postZOLOCheck as jest.Mock).mockResolvedValue({
      status: 200,
      data: { documents: [] }
    });

    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );

    fireEvent.click(screen.getByRole('button', { name: /submit/i }));

    await waitFor(() => {
      expect(services.postZOLOCheck).toHaveBeenCalled();
    });
  });

  test('handles API errors in submission flow', async () => {
    (services.postZOLOCheck as jest.Mock).mockRejectedValue(new Error('API Error'));

    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );

    fireEvent.click(screen.getByRole('button', { name: /submit/i }));

    await waitFor(() => {
      expect(services.postZOLOCheck).toHaveBeenCalled();
    });
  });

  test('handles continue button click', () => {
    const successState = {
      ...baseState,
      stages: {
        ...baseState.stages,
        stages: [{
          ...baseState.stages.stages[0],
          dynamicDocumentsUpload: {
            ...baseState.stages.stages[0].dynamicDocumentsUpload,
            showUploadFileSuccess: true
          }
        }]
      }
    };
    
    store = mockStore(successState);

    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );

    fireEvent.click(screen.getByRole('button', { name: /continue/i }));

    expect(setHKIDVersionMock).toHaveBeenCalledWith('');
    const actions = store.getActions();
    expect(actions.some((action: any) => action.type === 'stages/getStage')).toBeTruthy();
  });

  test('renders different language texts', () => {
    const cnState = {
      ...baseState,
      stages: {
        ...baseState.stages,
        stages: [{
          ...baseState.stages.stages[0],
          stageInfo: {
            ...baseState.stages.stages[0].stageInfo,
            application: {
              ...baseState.stages.stages[0].stageInfo.application,
              language: CONSTANTS.LANG_CN
            }
          }
        }]
      }
    };
    
    store = mockStore(cnState);

    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );

    expect(screen.getByText(/提交/i)).toBeInTheDocument();
  });

  test('handles image preview click', () => {
    const successState = {
      ...baseState,
      stages: {
        ...baseState.stages,
        stages: [{
          ...baseState.stages.stages[0],
          dynamicDocumentsUpload: {
            ...baseState.stages.stages[0].dynamicDocumentsUpload,
            showUploadFileSuccess: true
          }
        }]
      }
    };
    
    store = mockStore(successState);

    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );

    fireEvent.click(screen.getByTestId('image-preview'));
    // ImagePreviewModal would be tested separately
  });

  test('handles error popup close', async () => {
    (services.postZOLOCheck as jest.Mock).mockResolvedValue({
      status: 200,
      data: { documents: [] }
    });

    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );

    fireEvent.click(screen.getByRole('button', { name: /submit/i }));

    await waitFor(() => {
      expect(services.postZOLOCheck).toHaveBeenCalled();
    });

    // Simulate clicking OK in error popup
    fireEvent.click(screen.getByRole('button', { name: /ok/i }));
    expect(services.postQRCodeZOLO).toHaveBeenCalled();
  });
});
