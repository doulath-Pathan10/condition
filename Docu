import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Zoloz from './Zoloz';
import { postQRCodeZOLO, postZOLOCheck, postZolozAcknowledge, getImagePreview, postPdfPreview } from '../../../services/preApprovalPostServices';
import { dispatchLoader, dispatchError } from '../../../../../services/common-service';

// Mock the services and components
jest.mock('../../../services/preApprovalPostServices', () => ({
  postQRCodeZOLO: jest.fn(),
  postZOLOCheck: jest.fn(),
  postZolozAcknowledge: jest.fn(),
  getImagePreview: jest.fn(),
  postPdfPreview: jest.fn(),
}));

jest.mock('../../../../../services/common-service', () => ({
  dispatchLoader: jest.fn(),
  dispatchError: jest.fn(),
}));

jest.mock('../carousel/carousel', () => () => <div>Carousel Mock</div>);
jest.mock('../../../alertModal/alert-modal', () => ({ alertType, goBack }: any) => (
  <div>
    {alertType} Alert <button onClick={goBack}>Go Back</button>
  </div>
));
jest.mock('../modals/imagePreviewModal/image-preview-modal', () => () => <div>Image Preview Modal</div>);

const mockStore = configureStore([]);

describe('Zoloz Component', () => {
  let store: any;
  const setHKIDVersionMock = jest.fn();

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [{
          stageInfo: {
            application: { channel_reference: 'test123' },
            applicant_documents: [{
              document_list: [{
                document_category: 'R0001',
                document_options: [{
                  document_types: [{
                    uploaded_documents: []
                  }]
                }]
              }]
            }]
          },
          dynamicDocumentsUpload: {
            showUploadFileSuccess: false,
            HKIDQRCodeData: { qrCode: 'testQRCode', transactionId: 'trans123' },
            HKIDVersionValue: 'A001',
            fileSectionData: { document_category: 'R0001' },
            documentCount: 0
          }
        }],
      },
      preApproval: {
        documentZoloCheckRes: [],
        imgPrevURL: 'testImageUrl',
      },
    });

    // Reset all mocks
    jest.clearAllMocks();
  });

  it('renders without crashing', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    expect(screen.getByText('CLOSE')).toBeInTheDocument();
    expect(screen.getByText('Colour Identity Proof')).toBeInTheDocument();
  });

  it('displays QR code section when showUploadFileSuccess is false', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    expect(screen.getByText('Carousel Mock')).toBeInTheDocument();
    expect(screen.getByText('Submit')).toBeInTheDocument();
  });

  it('displays uploaded document section when showUploadFileSuccess is true', () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        ...store.getState().stages,
        stages: [{
          ...store.getState().stages.stages[0],
          stageInfo: {
            ...store.getState().stages.stages[0].stageInfo,
            applicant_documents: [{
              document_list: [{
                document_category: 'R0001',
                document_options: [{
                  document_types: [{
                    uploaded_documents: []
                  }]
                }]
              }]
            }]
          }
        }],
        dynamicDocumentsUpload: {
          ...store.getState().stages.dynamicDocumentsUpload,
          showUploadFileSuccess: true,
        }
      },
      preApproval: {
        ...store.getState().preApproval,
        documentZoloCheckRes: [{
          documentName: 'testDocument.png'
        }]
      }
    });

    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    expect(screen.getByText('testDocument.png')).toBeInTheDocument();
    expect(screen.getByText('Upload completed')).toBeInTheDocument();
  });

  it('calls closeFileUpload when close button is clicked', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    fireEvent.click(screen.getByText('CLOSE'));
    
    const actions = store.getActions();
    expect(actions).toContainEqual(expect.objectContaining({
      type: 'stages/updatefileSectionData',
      payload: null
    }));
  });

  it('calls callSubmit when submit button is clicked', async () => {
    const mockResponse = {
      status: 200,
      data: {
        documents: [{
          docId: 'doc123',
          documentName: 'testDoc',
          // other required fields
        }]
      }
    };
    
    (postZOLOCheck as jest.Mock).mockResolvedValue(mockResponse);
    (postZolozAcknowledge as jest.Mock).mockResolvedValue({ data: [{ responseStatus: 'Success' }] });
    (getImagePreview as jest.Mock).mockResolvedValue({ status: 200, data: new Blob() });
    (postPdfPreview as jest.Mock).mockResolvedValue({ status: 200, data: { statusCode: 'OK', documents: [] } });

    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    fireEvent.click(screen.getByText('Submit'));
    
    await waitFor(() => {
      expect(postZOLOCheck).toHaveBeenCalled();
      expect(dispatchLoader).toHaveBeenCalledWith(true);
    });
  });

  it('shows error popup when ZOLO check fails', async () => {
    (postZOLOCheck as jest.Mock).mockResolvedValue({
      status: 200,
      data: { documents: [] } // No documents returned
    });

    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    fireEvent.click(screen.getByText('Submit'));
    
    await waitFor(() => {
      expect(screen.getByText('zoloError Alert')).toBeInTheDocument();
    });
  });

  it('handles API errors properly', async () => {
    const error = new Error('API Error');
    (postZOLOCheck as jest.Mock).mockRejectedValue(error);

    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    fireEvent.click(screen.getByText('Submit'));
    
    await waitFor(() => {
      expect(dispatchError).toHaveBeenCalledWith(error);
    });
  });

  it('calls okBtnClick and updates state when continue button is clicked', async () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        ...store.getState().stages,
        dynamicDocumentsUpload: {
          ...store.getState().stages.dynamicDocumentsUpload,
          showUploadFileSuccess: true,
        }
      },
      preApproval: {
        ...store.getState().preApproval,
        documentZoloCheckRes: [{
          docId: 'doc123',
          documentName: 'testDoc',
          documentCategoryCode: 'R0001',
          documentTypeCode: 'A001',
          // other required fields
        }]
      }
    });

    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    fireEvent.click(screen.getByText('Continue'));
    
    const actions = store.getActions();
    expect(actions).toContainEqual(expect.objectContaining({
      type: 'stages/getStage'
    }));
    expect(setHKIDVersionMock).toHaveBeenCalledWith('');
  });

  it('opens image preview when image is clicked', () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        ...store.getState().stages,
        dynamicDocumentsUpload: {
          ...store.getState().stages.dynamicDocumentsUpload,
          showUploadFileSuccess: true,
        }
      },
      preApproval: {
        ...store.getState().preApproval,
        documentZoloCheckRes: [{
          documentName: 'testDoc'
        }],
        imgPrevURL: 'testImageUrl'
      }
    });

    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    fireEvent.click(screen.getByTitle('image-preview'));
    expect(screen.getByText('Image Preview Modal')).toBeInTheDocument();
  });

  it('disables continue button when showUploadFileSuccess is false', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    const continueButton = screen.getByText('Continue');
    expect(continueButton).toHaveClass('form-invalid');
  });

  it('enables continue button when showUploadFileSuccess is true', () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        ...store.getState().stages,
        dynamicDocumentsUpload: {
          ...store.getState().stages.dynamicDocumentsUpload,
          showUploadFileSuccess: true,
        }
      }
    });

    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    const continueButton = screen.getByText('Continue');
    expect(continueButton).toHaveClass('form-valid');
  });
});
