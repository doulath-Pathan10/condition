import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import { BrowserRouter } from 'react-router-dom';
import PILDashboard from './PILDashboard'; // Adjust path as needed
import * as preApprovalServices from '../services/preApprovalServices';
import * as preApprovalPostServices from '../services/preApprovalPostServices';
import { CONSTANTS } from '../../../utils/common/constants';

// Mock Redux hooks
jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));

// Mock useLocation
jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useLocation: jest.fn(),
}));

// Mock services
jest.mock('../services/preApprovalServices', () => ({
  getSessionByPreLogin: jest.fn(),
  getData: jest.fn(),
  getDataFormConfig: jest.fn(),
  getProductMetaDataInfo: jest.fn(),
}));

jest.mock('../services/preApprovalPostServices', () => ({
  getResumeRequest: jest.fn(),
}));

// Mock window.location
const mockLocation = {
  search: '?product=1313&source=09&lang=en',
};
global.window = Object.create(window);
Object.defineProperty(window, 'location', {
  value: { search: mockLocation.search },
  writable: true,
});

// Create mock Redux store
const mockStore = configureStore([]);
const initialState = {
  preApproval: {
    formConfigmetaData: {
      fieldmetadata: {
        data: {
          stages: [{ fields: [{ field_set_name: 'Test Title', rwb_label_name: 'Test Notes' }] }],
        },
      },
    },
    currentStage: 'PD-0',
  },
  auth: { sessionUid: '12345' },
  stages: { otpOpen: false, stages: [{ stageId: 'pd-1', stageInfo: {} }] },
  urlParam: { validUrl: true },
};
const store = mockStore(initialState);

describe('PILDashboard Component', () => {
  let mockDispatch;

  beforeEach(() => {
    mockDispatch = jest.fn();
    jest.spyOn(React, 'useDispatch').mockReturnValue(mockDispatch);
    jest.spyOn(React, 'useSelector').mockImplementation((callback) => callback(initialState));
    jest.spyOn(require('react-router-dom'), 'useLocation').mockReturnValue({ search: mockLocation.search });

    // Mock service responses
    preApprovalServices.getSessionByPreLogin.mockResolvedValue({
      status: 201,
      headers: { sessionuid: '12345' },
    });
    preApprovalServices.getProductMetaDataInfo.mockResolvedValue({ data: { product: 'test' } });
    preApprovalServices.getDataFormConfig.mockResolvedValue({ status: 200, data: {} });
    preApprovalPostServices.getResumeRequest.mockResolvedValue({
      status: 200,
      data: {
        applicants: {},
        application: { application_status: 'SUCCESS', response_type: 'INFO' },
        products: [{ product_type: '1313' }],
      },
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  // Helper to render component with providers
  const renderComponent = () =>
    render(
      <Provider store={store}>
        <BrowserRouter>
          <PILDashboard />
        </BrowserRouter>
      </Provider>
    );

  test('renders AsiaMiles component when URL parameters are valid', () => {
    renderComponent();
    expect(screen.getByTestId('asia-miles')).toBeInTheDocument(); // Assuming AsiaMiles has a data-testid
  });

  test('renders PopupModel when URL is invalid', () => {
    jest.spyOn(React, 'useSelector').mockImplementation((callback) =>
      callback({ ...initialState, urlParam: { validUrl: false } })
    );
    renderComponent();
    expect(screen.getByTestId('popup-model')).toBeInTheDocument(); // Assuming PopupModel has a data-testid
  });

  test('displays OTPModel when otpOpen is true and stageId is pd-1', () => {
    jest.spyOn(React, 'useSelector').mockImplementation((callback) =>
      callback({
        ...initialState,
        stages: { otpOpen: true, stages: [{ stageId: 'pd-1', stageInfo: {} }] },
      })
    );
    renderComponent();
    expect(screen.getByTestId('otp-model')).toBeInTheDocument(); // Assuming OTPModel has a data-testid
  });

  test('renders DynamicComponent when sessionUid is present', () => {
    renderComponent();
    expect(screen.getByTestId('main-btn')).toBeInTheDocument();
  });

  test('updates stage and dispatches actions on nextPage call', () => {
    renderComponent();
    const nextPageButton = screen.getByTestId('main-btn'); // Assuming DynamicComponent has a button with this test ID
    fireEvent.click(nextPageButton);

    expect(mockDispatch).toHaveBeenCalledWith(
      expect.objectContaining({
        type: 'preApproval/setCurrentStage',
        payload: 'PD-1',
      })
    );
    expect(mockDispatch).toHaveBeenCalledWith(
      expect.objectContaining({
        type: 'preApproval/setPreviousStage',
        payload: 'PD-0',
      })
    );
  });

  test('handles resume flow when pageId is resume', async () => {
    jest.spyOn(require('react-router-dom'), 'useLocation').mockReturnValue({
      search: '?pageId=resume&appRefNo=123&product=1313&source=09&lang=en',
    });
    renderComponent();

    await waitFor(() => {
      expect(preApprovalPostServices.getResumeRequest).toHaveBeenCalledWith('123');
      expect(mockDispatch).toHaveBeenCalledWith(
        expect.objectContaining({
          type: 'urlParam/isResume',
          payload: true,
        })
      );
    });
  });

  test('displays Decline modal when responseAction is STOP', async () => {
    preApprovalPostServices.getResumeRequest.mockResolvedValue({
      status: 200,
      data: {
        applicants: {},
        application: {
          application_status: 'SUCCESS',
          response_type: 'HARD',
          response_action: 'STOP',
          error: { application_error: [{ rtobCode: 'A01', error_description: 'Declined' }] },
        },
        products: [{ product_type: '1313' }],
      },
    });
    jest.spyOn(require('react-router-dom'), 'useLocation').mockReturnValue({
      search: '?pageId=resume&appRefNo=123&product=1313&source=09&lang=en',
    });
    renderComponent();

    await waitFor(() => {
      expect(screen.getByTestId('alert-model')).toBeInTheDocument(); // Assuming AlertModel has a data-testid
      expect(screen.getByText(/decline/i)).toBeInTheDocument(); // Adjust based on AlertModel content
    });
  });

  test('calls goBack when Decline modal is closed', () => {
    const mockGoBack = jest.fn();
    jest.spyOn(window, 'location', 'get').mockReturnValue({
      ...window.location,
      href: '',
    });
    renderComponent();

    // Simulate decline modal
    fireEvent.click(screen.getByTestId('alert-model-close')); // Assuming AlertModel has a close button with this test ID
    expect(window.location.href).toBe(process.env.REACT_APP_HOME_PAGE_URL);
  });

  test('sets correct kcTitle and TnCBannerNotes based on language', () => {
    renderComponent();
    expect(screen.getByText(CONSTANTS.kCTitle)).toBeInTheDocument();
    expect(screen.getByText(CONSTANTS.TNCBannerNotes)).toBeInTheDocument();
  });

  test('handles scroll behavior and visibility', () => {
    renderComponent();
    const dynamicComponent = screen.getByTestId('main-btn');
    fireEvent.scroll(window, { target: { scrollY: 100 } });
    expect(dynamicComponent).toHaveAttribute('aria-hidden', 'false'); // Adjust based on actual visibility logic
  });
});
