import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Zoloz from './Zoloz';
import { CONSTANTS } from '../../../../../utils/common/constants';
import { postQRCodeZOLO, postZOLOCheck, postZolozAcknowledge, postPdfPreview } from '../../../services/preApprovalPostServices';
import { getImagePreview } from '../../../../preApproval/services/preApprovalServices';
import { act } from 'react-dom/test-utils';

// Mock the API calls
jest.mock('../../../services/preApprovalPostServices', () => ({
  postQRCodeZOLO: jest.fn(),
  postZOLOCheck: jest.fn(),
  postZolozAcknowledge: jest.fn(),
  postPdfPreview: jest.fn(),
}));

jest.mock('../../../../preApproval/services/preApprovalServices', () => ({
  getImagePreview: jest.fn(),
}));

const mockStore = configureStore([]);

describe('Zoloz Component', () => {
  let store: any;
  const setHKIDVersionMock = jest.fn();

  const baseState = {
    stages: {
      stages: [{
        stageId: 'doc-3',
        stageInfo: {
          application: {
            channel_reference: 'test123'
          },
          applicant_documents: [{
            document_list: [
              {
                document_category: 'identity_proof',
                document_options: [{
                  document_types: [
                    { uploaded_documents: null }
                  ]
                }]
              }
            ]
          }]
        }
      }],
      dynamicDocumentsUpload: {
        showUploadFileSuccess: false,
        HKIDQRCodeData: null,
        HKIDVersionValue: 'A001',
        fileSectionData: { document_category: 'identity_proof' },
        documentCount: 0,
        success: false
      }
    },
    preApproval: {
      imgPrevURL: '',
      documentZoloCheckRes: [],
      zolozDocumentData: null
    }
  };

  beforeEach(() => {
    store = mockStore(baseState);
    store.dispatch = jest.fn();
    
    // Reset all mocks
    jest.clearAllMocks();
    
    // Default mock implementations
    (postQRCodeZOLO as jest.Mock).mockResolvedValue({
      status: 200,
      data: { qrCode: 'testQRCode', transactionId: 'test123' }
    });
    (postZOLOCheck as jest.Mock).mockResolvedValue({
      status: 200,
      data: {
        documents: [{
          docId: 'testDocId',
          documentName: 'testDocument.png'
        }]
      }
    });
    (postZolozAcknowledge as jest.Mock).mockResolvedValue({
      status: 200,
      data: [{ responseStatus: 'Success' }]
    });
    (postPdfPreview as jest.Mock).mockResolvedValue({
      status: 200,
      data: { statusCode: 'OK', documents: [] }
    });
    (getImagePreview as jest.Mock).mockResolvedValue({
      status: 200,
      data: new Blob()
    });
  });

  test('renders without crashing', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    expect(screen.getByText(/colour identity proof/i)).toBeInTheDocument();
  });

  test('displays QR code section when showUploadFileSuccess is false', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    expect(screen.getByText(/submit/i)).toBeInTheDocument();
    expect(screen.queryByText(/upload complete/i)).not.toBeInTheDocument();
  });

  test('displays upload success section when showUploadFileSuccess is true', () => {
    const customState = {
      ...baseState,
      stages: {
        ...baseState.stages,
        dynamicDocumentsUpload: {
          ...baseState.stages.dynamicDocumentsUpload,
          showUploadFileSuccess: true
        }
      },
      preApproval: {
        ...baseState.preApproval,
        imgPrevURL: 'testImageURL',
        documentZoloCheckRes: [{
          documentName: 'testDocument.png'
        }]
      }
    };
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    expect(screen.getByText(/upload complete/i)).toBeInTheDocument();
    expect(screen.queryByText(/submit/i)).not.toBeInTheDocument();
  });

  test('calls closeFileUpload when back button is clicked', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    fireEvent.click(screen.getByText(/close/i));
    expect(store.dispatch).toHaveBeenCalled();
  });

  test('calls callSubmit when submit button is clicked', async () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    fireEvent.click(screen.getByText(/submit/i));
    
    await waitFor(() => {
      expect(postZOLOCheck).toHaveBeenCalled();
    });
  });

  test('handles successful document submission flow', async () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    await act(async () => {
      fireEvent.click(screen.getByText(/submit/i));
    });
    
    await waitFor(() => {
      expect(postZOLOCheck).toHaveBeenCalled();
      expect(postZolozAcknowledge).toHaveBeenCalled();
      expect(getImagePreview).toHaveBeenCalled();
      expect(postPdfPreview).toHaveBeenCalled();
    });
  });

  test('shows error popup when no documents are returned', async () => {
    (postZOLOCheck as jest.Mock).mockResolvedValue({
      status: 200,
      data: { documents: [] }
    });
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    await act(async () => {
      fireEvent.click(screen.getByText(/submit/i));
    });
    
    await waitFor(() => {
      expect(screen.getByText(/zoloError/i)).toBeInTheDocument();
    });
  });

  test('handles API errors gracefully', async () => {
    (postZOLOCheck as jest.Mock).mockRejectedValue(new Error('API Error'));
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    await act(async () => {
      fireEvent.click(screen.getByText(/submit/i));
    });
    
    await waitFor(() => {
      expect(store.dispatch).toHaveBeenCalledWith(expect.objectContaining({
        type: 'ERROR/GET_ERROR'
      }));
    });
  });

  test('calls okBtnClick and updates state when continue is clicked', async () => {
    const customState = {
      ...baseState,
      stages: {
        ...baseState.stages,
        dynamicDocumentsUpload: {
          ...baseState.stages.dynamicDocumentsUpload,
          showUploadFileSuccess: true
        }
      },
      preApproval: {
        ...baseState.preApproval,
        documentZoloCheckRes: [{
          docId: 'testDocId',
          documentName: 'testDocument.png',
          documentCategoryCode: 'R0001',
          documentTypeCode: 'A001'
        }]
      }
    };
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    await act(async () => {
      fireEvent.click(screen.getByText(/continue/i));
    });
    
    await waitFor(() => {
      expect(store.dispatch).toHaveBeenCalledWith(
        expect.objectContaining({
          type: 'STAGES/GET_STAGE'
        })
      );
      expect(setHKIDVersionMock).toHaveBeenCalledWith('');
    });
  });

  test('displays correct content for different languages', () => {
    // Test English
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    expect(screen.getByText(CONSTANTS.close)).toBeInTheDocument();
    expect(screen.getByText(CONSTANTS.submit)).toBeInTheDocument();
    
    // Test Chinese by mocking getLanguageInfo
    jest.mock('../../../../../utils/common/change.utils', () => ({
      getLanguageInfo: jest.fn().mockReturnValue('cn')
    }));
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    expect(screen.getByText(CONSTANTS.close_CN)).toBeInTheDocument();
    expect(screen.getByText(CONSTANTS.submit_CN)).toBeInTheDocument();
  });

  test('opens image preview when image is clicked', () => {
    const customState = {
      ...baseState,
      stages: {
        ...baseState.stages,
        dynamicDocumentsUpload: {
          ...baseState.stages.dynamicDocumentsUpload,
          showUploadFileSuccess: true
        }
      },
      preApproval: {
        ...baseState.preApproval,
        imgPrevURL: 'testImageURL',
        documentZoloCheckRes: [{
          documentName: 'testDocument.png'
        }]
      }
    };
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={setHKIDVersionMock} />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('image-preview'));
    expect(screen.getByText(/testDocument.png/i)).toBeInTheDocument();
  });
});
