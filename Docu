import React from 'react';
import { render, fireEvent, screen } from '@testing-library/react';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import Dates from './Dates';
import { KeyWithAnyModel } from '../../../utils/model/common-model';

// Mock Redux store
const mockStore = configureStore({
  reducer: {
    stages: () => ({
      stages: [
        {
          stageId: 'pd-1',
          stageInfo: {
            applicants: [{
              work_type_a_1: 'E001',
              date_of_birth_a_1: '1990-01-15',
              expiry_date_a_1: '2025-12-31',
              id_type_cb: 'Passport',
              work_type: 'E001'
            }],
            products: [{
              product_category: 'PL'
            }]
          }
        }
      ],
      userInput: {
        applicants: [{
          date_of_birth: '1990-01-15',
          expiry_date: '2025-12-31',
          id_type_cb: 'Passport'
        }]
      }
    }),
    fielderror: () => ({
      error: []
    }),
    preApproval: () => ({
      resumeAllowed: 'Y'
    }),
    lastAccessed: () => ({}),
    age: () => ({}),
    continueValidation: () => ({})
  }
});

describe('Dates Component', () => {
  const mockProps: KeyWithAnyModel = {
    data: {
      logical_field_name: 'date_of_birth',
      rwb_label_name: 'Date of Birth',
      mandatory: 'Yes',
      editable: false
    },
    handleCallback: jest.fn(),
    handleFieldDispatch: jest.fn()
  };

  const mockExpiryProps: KeyWithAnyModel = {
    data: {
      logical_field_name: 'expiry_date',
      rwb_label_name: 'Expiry Date',
      mandatory: 'Yes',
      editable: false
    },
    handleCallback: jest.fn(),
    handleFieldDispatch: jest.fn()
  };

  const mockBusinessDateProps: KeyWithAnyModel = {
    data: {
      logical_field_name: 'business_est_date',
      rwb_label_name: 'Business Establishment Date',
      mandatory: 'Yes',
      editable: false
    },
    handleCallback: jest.fn(),
    handleFieldDispatch: jest.fn()
  };

  beforeEach(() => {
    // Mock window.location
    delete window.location;
    window.location = {
      ...window.location,
      search: '?lang=en&pageId=resume'
    };

    // Mock getLanguageInfo
    jest.mock('../../../utils/common/change.utils', () => ({
      getUrl: {
        getLanguageInfo: jest.fn().mockReturnValue('en'),
        getParameterByName: jest.fn().mockReturnValue('resume')
      },
      fieldError: jest.fn().mockReturnValue(false),
      isFieldUpdate: jest.fn(),
      fieldIdAppend: jest.fn()
    }));

    // Mock validateService
    jest.mock('../../../services/validation-service', () => ({
      allowOnlyCharacter: jest.fn(),
      isValidDate: jest.fn().mockReturnValue(true),
      calculateAge: jest.fn().mockReturnValue(30),
      calculateMonth: jest.fn().mockReturnValue(true)
    }));
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('renders date inputs for date_of_birth', () => {
    render(
      <Provider store={mockStore}>
        <Dates {...mockProps} />
      </Provider>
    );

    expect(screen.getByPlaceholderText('DD')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('MM')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('YYYY')).toBeInTheDocument();
  });

  test('pre-fills date from store', () => {
    render(
      <Provider store={mockStore}>
        <Dates {...mockProps} />
      </Provider>
    );

    const ddInput = screen.getByPlaceholderText('DD') as HTMLInputElement;
    const mmInput = screen.getByPlaceholderText('MM') as HTMLInputElement;
    const yyyyInput = screen.getByPlaceholderText('YYYY') as HTMLInputElement;

    expect(ddInput.value).toBe('15');
    expect(mmInput.value).toBe('01');
    expect(yyyyInput.value).toBe('1990');
  });

  test('handles DD input change and moves focus to MM', () => {
    render(
      <Provider store={mockStore}>
        <Dates {...mockProps} />
      </Provider>
    );

    const ddInput = screen.getByPlaceholderText('DD');
    const mmInput = screen.getByPlaceholderText('MM');

    fireEvent.change(ddInput, { target: { value: '20' } });
    expect(ddInput).toHaveValue('20');
    // Focus should move to MM input
    expect(document.activeElement).toBe(mmInput);
  });

  test('handles MM input change and moves focus to YYYY when valid', () => {
    render(
      <Provider store={mockStore}>
        <Dates {...mockProps} />
      </Provider>
    );

    const mmInput = screen.getByPlaceholderText('MM');
    const yyyyInput = screen.getByPlaceholderText('YYYY');

    fireEvent.change(mmInput, { target: { value: '12' } });
    expect(mmInput).toHaveValue('12');
    // Focus should move to YYYY input
    expect(document.activeElement).toBe(yyyyInput);
  });

  test('shows error for invalid month (MM > 12)', () => {
    render(
      <Provider store={mockStore}>
        <Dates {...mockProps} />
      </Provider>
    );

    const mmInput = screen.getByPlaceholderText('MM');
    fireEvent.change(mmInput, { target: { value: '13' } });
    
    expect(screen.getByText(/Date is not valid/)).toBeInTheDocument();
  });

  test('shows error for empty mandatory field on blur', () => {
    render(
      <Provider store={mockStore}>
        <Dates {...mockProps} />
      </Provider>
    );

    const ddInput = screen.getByPlaceholderText('DD');
    fireEvent.change(ddInput, { target: { value: '' } });
    fireEvent.blur(ddInput);
    
    expect(screen.getByText(/Date of Birth/)).toBeInTheDocument();
  });

  test('shows error for invalid date (leap year)', () => {
    // Mock calculateAge to return a leap year scenario
    jest.mock('../../../services/validation-service', () => ({
      isValidDate: jest.fn().mockReturnValue(false),
      calculateAge: jest.fn().mockImplementation(() => {
        return {
          isLeap: true,
          daysInMonth: 29
        };
      })
    }));

    render(
      <Provider store={mockStore}>
        <Dates {...mockProps} />
      </Provider>
    );

    const ddInput = screen.getByPlaceholderText('DD');
    fireEvent.change(ddInput, { target: { value: '30' } });
    
    expect(screen.getByText(/Date is not valid/)).toBeInTheDocument();
  });

  test('handles expiry date validation for passport', () => {
    render(
      <Provider store={mockStore}>
        <Dates {...mockExpiryProps} />
      </Provider>
    );

    const ddInput = screen.getByPlaceholderText('DD');
    fireEvent.change(ddInput, { target: { value: '01' } });
    
    expect(mockExpiryProps.handleCallback).toHaveBeenCalled();
  });

  test('shows error for expiry date in past', () => {
    // Mock current date to be after the test expiry date
    jest.spyOn(global, 'Date').mockImplementation(() => new Date('2026-01-01') as unknown as string);

    render(
      <Provider store={mockStore}>
        <Dates {...mockExpiryProps} />
      </Provider>
    );

    const ddInput = screen.getByPlaceholderText('DD');
    fireEvent.change(ddInput, { target: { value: '31' } });
    const mmInput = screen.getByPlaceholderText('MM');
    fireEvent.change(mmInput, { target: { value: '12' } });
    const yyyyInput = screen.getByPlaceholderText('YYYY');
    fireEvent.change(yyyyInput, { target: { value: '2025' } });
    
    expect(screen.getByText(/Expiry Date/)).toBeInTheDocument();
  });

  test('validates business establishment date', () => {
    render(
      <Provider store={mockStore}>
        <Dates {...mockBusinessDateProps} />
      </Provider>
    );

    const ddInput = screen.getByPlaceholderText('DD');
    fireEvent.change(ddInput, { target: { value: '01' } });
    const mmInput = screen.getByPlaceholderText('MM');
    fireEvent.change(mmInput, { target: { value: '01' } });
    const yyyyInput = screen.getByPlaceholderText('YYYY');
    fireEvent.change(yyyyInput, { target: { value: '2020' } });
    
    expect(mockBusinessDateProps.handleCallback).toHaveBeenCalled();
  });

  test('shows error for business date in future', () => {
    // Mock current date
    const realDate = Date;
    global.Date = class extends realDate {
      constructor() {
        super();
        return new realDate('2020-01-01');
      }
    } as any;

    render(
      <Provider store={mockStore}>
        <Dates {...mockBusinessDateProps} />
      </Provider>
    );

    const yyyyInput = screen.getByPlaceholderText('YYYY');
    fireEvent.change(yyyyInput, { target: { value: '2021' } });
    
    expect(screen.getByText(/Business Establishment Date/)).toBeInTheDocument();

    // Restore original Date
    global.Date = realDate;
  });

  test('handles date picker change', () => {
    render(
      <Provider store={mockStore}>
        <Dates {...mockProps} />
      </Provider>
    );

    const datePicker = screen.getByTestId('date-picker');
    fireEvent.change(datePicker, { target: { value: '1990-01-15' } });
    
    expect(mockProps.handleCallback).toHaveBeenCalled();
  });

  test('displays tick mark when date is valid', () => {
    render(
      <Provider store={mockStore}>
        <Dates {...mockProps} />
      </Provider>
    );

    const ddInput = screen.getByPlaceholderText('DD');
    fireEvent.change(ddInput, { target: { value: '15' } });
    const mmInput = screen.getByPlaceholderText('MM');
    fireEvent.change(mmInput, { target: { value: '01' } });
    const yyyyInput = screen.getByPlaceholderText('YYYY');
    fireEvent.change(yyyyInput, { target: { value: '1990' } });
    
    expect(screen.getByTestId('tick-mark')).toBeInTheDocument();
  });

  test('handles tab key press with validation', () => {
    render(
      <Provider store={mockStore}>
        <Dates {...mockProps} />
      </Provider>
    );

    const ddInput = screen.getByPlaceholderText('DD');
    fireEvent.keyDown(ddInput, { key: 'Tab', code: 'Tab' });
    
    expect(screen.getByText(/Date of Birth/)).toBeInTheDocument();
  });

  test('does not render when workType is S103 in pd-1 stage', () => {
    const customStore = configureStore({
      reducer: {
        stages: () => ({
          stages: [
            {
              stageId: 'pd-1',
              stageInfo: {
                applicants: [{
                  work_type: 'S103'
                }],
                products: [{}]
              }
            }
          ],
          userInput: {
            applicants: [{}]
          }
        }),
        // ... other reducers
      }
    });

    render(
      <Provider store={customStore}>
        <Dates {...mockProps} />
      </Provider>
    );

    expect(screen.queryByPlaceholderText('DD')).not.toBeInTheDocument();
  });

  test('renders for workType E002 in ad-2 stage', () => {
    const customStore = configureStore({
      reducer: {
        stages: () => ({
          stages: [
            {
              stageId: 'ad-2',
              stageInfo: {
                applicants: [{
                  work_type: 'E002'
                }],
                products: [{}]
              }
            }
          ],
          userInput: {
            applicants: [{}]
          }
        }),
        // ... other reducers
      }
    });

    render(
      <Provider store={customStore}>
        <Dates {...mockProps} />
      </Provider>
    );

    expect(screen.getByPlaceholderText('DD')).toBeInTheDocument();
  });
});
