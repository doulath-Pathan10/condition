// apiServices.test.tsx
import axios from 'axios';
import {
  postSaveData,
  postPeserveData,
  getResumeRequest,
  postDocSaveData,
  postBasicData,
  postAditionalData,
  postDocuments,
  postQRCodeZOLO,
  postZOLOCheck,
  postZolozAcknowledge,
  postFinalAcknowledge,
  postPdfPreview,
  postTMXUserSession,
  postFulFilmentData
} from './apiServices';

jest.mock('axios');
const mockedAxios = axios as jest.Mocked<typeof axios>;

// Mock store
jest.mock('../../../utils/store/store', () => ({
  store: {
    getState: jest.fn(),
    dispatch: jest.fn()
  }
}));

// Mock environment variables
process.env.REACT_APP_RTOB_BASE_URL = 'https://test-api.com';
process.env.REACT_APP_RTOB_APPLICATION_END_POINT = '/application/';
process.env.REACT_APP_RTOB_BASIC_DATA_END_POINT = '/basic';
process.env.REACT_APP_RTOB_ADDITIONAL_DATA_END_POINT = '/additional';
process.env.REACT_APP_RTOB_DOCUMENTS_END_POINT = '/documents';
process.env.REACT_APP_RTOB_QRCODE_SMART_HKID_END_POINT = '/qrcode';
process.env.REACT_APP_RTOB_ZOLO_CHECK_RESULT_END_POINT = '/zoloz-check';
process.env.REACT_APP_RTOB_ACKNOWLEDGE_END_POINT = '/acknowledge';
process.env.REACT_APP_RTOB_DYNAMIC_DOCUMENT = '/dynamic-doc';
process.env.REACT_APP_RTOB_PDF_PREVIEW = '/pdf-preview';
process.env.REACT_APP_RTOB_VERIFY_TMX_USER_SESSION = '/tmx-session';
process.env.REACT_APP_RTOB_FULFILMENT_DATA = '/fulfilment';
process.env.REACT_APP_CASA_SEGMENT = '/casa-segment';

// Mock other dependencies
jest.mock('../../../services/common-service', () => ({
  dispatchError: jest.fn(),
  dispatchLoader: jest.fn()
}));

jest.mock('./preApprovalUtils', () => ({
  getFormConfigPayload: jest.fn(() => ({ mockPayload: true })),
  getADFormConfigPayload: jest.fn(() => ({ mockADPayload: true })),
  getAckMetaData: jest.fn(() => 'mock-meta-data'),
  generateUUID: jest.fn(() => 'mock-uuid')
}));

jest.mock('./preApprovalServices', () => ({
  getData: jest.fn()
}));

describe('API Services', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    
    // Mock store state
    require('../../../utils/store/store').store.getState.mockReturnValue({
      stages: {
        stages: [{
          stageId: 'test-stage',
          stageInfo: {
            application: {
              channel_reference: 'test-ref-123',
              application_reference: 'app-ref-123',
              cos_ref_number: 'cos-ref-123',
              request_id: 'req-id-123'
            },
            products: [{
              product_category: 'CC',
              product_type: 'CreditCard',
              name: 'Test Product',
              relation_type_code: 'P',
              campaign: 'TEST',
              product_sequence_number: 1,
              offer_details: {}
            }],
            applicants: {
              first_name_a_1: 'John',
              last_name_a_1: 'Doe',
              date_of_birth_a_1: '1990-01-01',
              HKID_a_1: 'A1234567'
            },
            applicant_documents: [{
              document_list: [],
              applicant_sequence_number: 1,
              journey_type: 'test'
            }]
          }
        }],
        dynamicDocumentsUpload: {
          documentData: [{ docId: 'doc-123', documentName: 'test-doc' }],
          HKIDQRCodeData: { transactionId: 'txn-123', result: { resultMessage: 'success' } },
          uploadedDocuments: [{ docId: 'uploaded-123', documentName: 'uploaded-doc' }]
        }
      },
      preApproval: {
        nextStages: ['next-stage-1', 'next-stage-2'],
        incomeProofDocumentUpload: []
      }
    });
  });

  // Test cases will go here
});
