import React from 'react';
import { render, screen, waitFor, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import { useDispatch, useSelector } from 'react-redux';
import { useLocation } from 'react-router-dom';
import PILDashboard from './PILDashboard';
import { preApprovalAction } from '../store/preApproval-slice';
import { authAction } from '../../../utils/store/auth-slice';
import { urlParamAction } from '../../../utils/store/urlparam-slice';
import { stagesAction } from '../../../utils/store/stages-slice';
import { loaderAction } from '../../../utils/store/loader-slice';
import { errorAction } from '../../../utils/store/error-slice';
import { lovDescAction } from '../../../utils/store/lov-desc-slice';
import { CONSTANTS } from '../../../utils/common/constants';

// Mock the modules and hooks
jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));

jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useLocation: jest.fn(),
}));

jest.mock('../services/preApprovalServices', () => ({
  getSessionByPreLogin: jest.fn(),
  getDataFormConfig: jest.fn(),
  getProductMetaDataInfo: jest.fn(),
  getData: jest.fn(),
}));

jest.mock('../services/preApprovalPostServices', () => ({
  getResumeRequest: jest.fn(),
}));

jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn(),
    getParameterByName: jest.fn(),
    getChannelRefNo: jest.fn(),
  },
}));

jest.mock('../services/payload', () => ({
  payloadFormConfig: {},
}));

jest.mock('../services/preApprovalUtils', () => ({
  PreApprovalUtil: {
    getFormConfigPayload: jest.fn(),
  },
}));

// Mock child components
jest.mock('../../dashboard/left-sidebar/left-sidebar', () => () => <div>LeftSideBar</div>);
jest.mock('../dynamicComponent/dynamicComponent', () => () => <div>DynamicComponent</div>);
jest.mock('../../../shared/components/otp-model/otp-model', () => () => <div>OTPModel</div>);
jest.mock('../../../shared/components/header-ref/header-ref', () => () => <div>HeaderRef</div>);
jest.mock('../../../shared/components/close/close', () => () => <div>Close</div>);
jest.mock('../../../shared/components/popup-model/popup-model', () => ({ children, displayPopup }: any) => 
  displayPopup ? <div>{children}</div> : null);
jest.mock('../../../shared/components/model/model', () => () => <div>Model</div>);
jest.mock('../commonComponents/asiaMiles/asiaMiles', () => () => <div>AsiaMiles</div>);
jest.mock('../alertModal/alert-modal', () => ({ alertType, goBack, errorCode, message }: any) => (
  <div>
    AlertModel - {alertType} {errorCode} {message}
    <button onClick={goBack}>Go Back</button>
  </div>
));

describe('PILDashboard', () => {
  let store: any;
  const mockDispatch = jest.fn();
  const mockUseLocation = {
    pathname: '/test',
    search: '',
    hash: '',
    state: null,
  };

  beforeEach(() => {
    store = configureStore({
      reducer: {
        preApproval: () => ({
          formConfigmetaData: {
            fieldmetadata: {
              data: {
                stages: [{
                  fields: [{
                    field_set_name: 'Test Title',
                    rwb_label_name: 'Test Notes',
                  }],
                }],
              },
            },
          },
          currentStage: 'PD-1',
          previousStage: 'PD-0',
        }),
        auth: () => ({ sessionUid: 'test-session' }),
        stages: () => ({
          otpOpen: false,
          stages: [{ stageId: 'pd-1', stageInfo: {} }],
        }),
        urlParam: () => ({ validUrl: true }),
      },
    });

    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    (useLocation as jest.Mock).mockReturnValue(mockUseLocation);
    (useSelector as jest.Mock).mockImplementation((selector) => selector(store.getState()));
    
    // Reset all mocks
    jest.clearAllMocks();
  });

  it('renders AsiaMiles component when URL search matches product 1313', () => {
    (useLocation as jest.Mock).mockReturnValue({
      ...mockUseLocation,
      search: '?product=1313&source=09&lang=en',
    });

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    expect(screen.getByText('AsiaMiles')).toBeInTheDocument();
  });

  it('renders technical issue popup when URL is invalid', () => {
    (useSelector as jest.Mock).mockImplementation((selector) => {
      const state = selector(store.getState());
      if (selector.toString().includes('urlParam')) {
        return { ...state, validUrl: false };
      }
      return state;
    });

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    expect(screen.getByText('Model')).toBeInTheDocument();
  });

  it('renders OTPModel when stage is pd-1 and otpOpen is true', () => {
    (useSelector as jest.Mock).mockImplementation((selector) => {
      const state = selector(store.getState());
      if (selector.toString().includes('stages')) {
        return { ...state, otpOpen: true };
      }
      return state;
    });

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    expect(screen.getByText('OTPModel')).toBeInTheDocument();
  });

  it('renders main dashboard content when conditions are met', () => {
    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    expect(screen.getByText('LeftSideBar')).toBeInTheDocument();
    expect(screen.getByText('DynamicComponent')).toBeInTheDocument();
  });

  it('handles resume flow when pageId is resume', async () => {
    const mockGetParameterByName = jest.requireMock('../../../utils/common/change.utils').getUrl.getParameterByName;
    mockGetParameterByName.mockImplementation((name: string) => 
      name === 'pageId' ? 'resume' : null
    );

    const mockGetResumeRequest = jest.requireMock('../services/preApprovalPostServices').getResumeRequest;
    mockGetResumeRequest.mockResolvedValue({
      status: 200,
      data: {
        applicants: [],
        application: {
          application_reference: 'test-ref',
          cos_ref_number: 'test-channel-ref',
          application_status: 'A01',
          response_type: 'INFO',
          response_action: 'SUCCESS',
          error: {
            application_error: [],
            applicant_error: [],
            product_error: [],
          },
        },
        products: [{ product_type: '1313', product_category: 'PL' }],
        stage: { page_id: 'bd-1a' },
        lov_desc: {},
      },
    });

    const mockGetSessionByPreLogin = jest.requireMock('../services/preApprovalServices').getSessionByPreLogin;
    mockGetSessionByPreLogin.mockResolvedValue({
      status: 201,
      headers: { sessionuid: 'test-session' },
    });

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalledWith(urlParamAction.isResume(true));
      expect(mockGetSessionByPreLogin).toHaveBeenCalled();
      expect(mockGetResumeRequest).toHaveBeenCalled();
    });
  });

  it('handles error cases in resume flow', async () => {
    const mockGetParameterByName = jest.requireMock('../../../utils/common/change.utils').getUrl.getParameterByName;
    mockGetParameterByName.mockImplementation((name: string) => 
      name === 'pageId' ? 'resume' : null
    );

    const mockGetResumeRequest = jest.requireMock('../services/preApprovalPostServices').getResumeRequest;
    mockGetResumeRequest.mockResolvedValue({
      status: 200,
      data: {
        applicants: [],
        application: {
          application_reference: 'test-ref',
          cos_ref_number: 'test-channel-ref',
          application_status: 'E01',
          response_type: 'HARD',
          response_action: 'STOP',
          error: {
            application_error: [{ rtobCode: 'A55', error_description: 'Test error' }],
            applicant_error: [],
            product_error: [],
          },
        },
        products: [{ product_type: '1313', product_category: 'PL' }],
        stage: { page_id: 'bd-1a' },
        lov_desc: {},
      },
    });

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalledWith(
        errorAction.getError({
          statusCode: "error",
          statusText: "no response",
        })
      );
    });
  });

  it('handles normal flow with session creation', async () => {
    const mockGetSessionByPreLogin = jest.requireMock('../services/preApprovalServices').getSessionByPreLogin;
    mockGetSessionByPreLogin.mockResolvedValue({
      status: 201,
      headers: { sessionuid: 'test-session' },
    });

    const mockGetProductMetaDataInfo = jest.requireMock('../services/preApprovalServices').getProductMetaDataInfo;
    mockGetProductMetaDataInfo.mockResolvedValue([{ product_type: 'test' }]);

    const mockGetDataFormConfig = jest.requireMock('../services/preApprovalServices').getDataFormConfig;
    mockGetDataFormConfig.mockResolvedValue({ status: 200, data: {} });

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    await waitFor(() => {
      expect(mockGetSessionByPreLogin).toHaveBeenCalled();
      expect(mockDispatch).toHaveBeenCalledWith(authAction.getSession({ sessionuid: 'test-session' }));
    });
  });

  it('handles error in session creation', async () => {
    const mockGetSessionByPreLogin = jest.requireMock('../services/preApprovalServices').getSessionByPreLogin;
    mockGetSessionByPreLogin.mockRejectedValue({
      response: { status: 500, statusText: 'Server Error' },
    });

    render(
      <Provider store={store>
        <PILDashboard />
      </Provider>
    );

    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalledWith(
        errorAction.getError({
          statusCode: 500,
          statusText: 'Server Error',
        })
      );
    });
  });

  it('handles nextPage function correctly', () => {
    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    // Test nextPage indirectly through DynamicComponent
    const dynamicComponent = screen.getByText('DynamicComponent');
    fireEvent.click(dynamicComponent);

    // Verify the dispatch calls
    expect(mockDispatch).toHaveBeenCalledWith(
      preApprovalAction.setCurrentStage('PD-2')
    );
    expect(mockDispatch).toHaveBeenCalledWith(
      preApprovalAction.setPreviousStage('PD-1')
    );
  });

  it('shows decline modal when modelName is DECLINE', () => {
    const useStateSpy = jest.spyOn(React, 'useState');
    useStateSpy.mockImplementationOnce(() => ['DECLINE', jest.fn()]);
    useStateSpy.mockImplementationOnce(() => [true, jest.fn()]); // declineModal

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    expect(screen.getByText('AlertModel - DECLINE')).toBeInTheDocument();
  });

  it('handles goBack function in decline modal', () => {
    const useStateSpy = jest.spyOn(React, 'useState');
    useStateSpy.mockImplementationOnce(() => ['DECLINE', jest.fn()]);
    useStateSpy.mockImplementationOnce(() => [true, jest.fn()]); // declineModal

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    fireEvent.click(screen.getByText('Go Back'));
    expect(window.location.href).toBe(process.env.REACT_APP_HOME_PAGE_URL);
  });

  it('shows resubmit modal when modelName is RESUBMIT', () => {
    const useStateSpy = jest.spyOn(React, 'useState');
    useStateSpy.mockImplementationOnce(() => ['RESUBMIT', jest.fn()]);
    useStateSpy.mockImplementationOnce(() => [true, jest.fn()]); // resubmitModal
    useStateSpy.mockImplementationOnce(() => ['Test message', jest.fn()]); // modalMsg

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    expect(screen.getByText('AlertModel - RESUBMIT Test message')).toBeInTheDocument();
  });

  it('handles reTry function in resubmit modal', () => {
    const setResubmitModal = jest.fn();
    const useStateSpy = jest.spyOn(React, 'useState');
    useStateSpy.mockImplementationOnce(() => ['RESUBMIT', jest.fn()]);
    useStateSpy.mockImplementationOnce(() => [true, setResubmitModal]); // resubmitModal
    useStateSpy.mockImplementationOnce(() => ['Test message', jest.fn()]); // modalMsg

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    fireEvent.click(screen.getByText('Go Back')); // This is actually the reTry function in the test
    expect(setResubmitModal).toHaveBeenCalledWith(false);
  });

  it('shows error code modal when modelName is ErrorCode', () => {
    const useStateSpy = jest.spyOn(React, 'useState');
    useStateSpy.mockImplementationOnce(() => ['ErrorCode', jest.fn()]);
    useStateSpy.mockImplementationOnce(() => ['A55', jest.fn()]); // alertErrorCode

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    expect(screen.getByText('AlertModel - ErrorCode A55')).toBeInTheDocument();
  });

  it('updates kcTitle and TnCBannerNotes when language changes', () => {
    const mockGetLanguageInfo = jest.requireMock('../../../utils/common/change.utils').getUrl.getLanguageInfo;
    mockGetLanguageInfo.mockImplementation(() => CONSTANTS.LANG_CN);

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    // Verify that the language-specific constants are used
    // This would be more effective if we could inspect the rendered content
    expect(mockGetLanguageInfo).toHaveBeenCalledWith('lang');
  });

  it('handles casa segment data fetch for product type 1313', async () => {
    const mockGetParameterByName = jest.requireMock('../../../utils/common/change.utils').getUrl.getParameterByName;
    mockGetParameterByName.mockImplementation((name: string) => 
      name === 'pageId' ? 'resume' : null
    );

    const mockGetResumeRequest = jest.requireMock('../services/preApprovalPostServices').getResumeRequest;
    mockGetResumeRequest.mockResolvedValue({
      status: 200,
      data: {
        applicants: [],
        application: {
          application_reference: 'test-ref',
          cos_ref_number: 'test-channel-ref',
          application_status: 'A01',
          response_type: 'INFO',
          response_action: 'SUCCESS',
          error: {
            application_error: [],
            applicant_error: [],
            product_error: [],
          },
        },
        products: [{ product_type: '1313', product_category: 'PL' }],
        stage: { page_id: 'bd-1a' },
        lov_desc: {},
      },
    });

    const mockGetData = jest.requireMock('../services/preApprovalServices').getData;
    mockGetData.mockResolvedValue({ data: { casa: 'test-data' } });

    render(
      <Provider store={store}>
        <PILDashboard />
      </Provider>
    );

    await waitFor(() => {
      expect(mockGetData).toHaveBeenCalled();
      expect(mockDispatch).toHaveBeenCalledWith(stagesAction.updateCasa('test-data'));
    });
  });
});
