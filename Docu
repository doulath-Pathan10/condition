import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import ColorIdentityProof from './colour-Identity-Proof'; // Adjust import path
import { CONSTANTS } from '../../../../../utils/common/constants';

// Mock dependencies
jest.mock('../carousel/carousel', () => {
  return function MockCarousel() {
    return <div data-testid="mock-carousel">Carousel</div>;
  };
});

jest.mock('../zoloz/zoloz', () => {
  return function MockZoloz({ setHKIDVersion }: any) {
    return <div data-testid="mock-zoloz">Zoloz Component</div>;
  };
});

describe('ColorIdentityProof Component', () => {
  const mockStore = configureStore([thunk]);
  let initialState: any;
  let store: any;
  
  // Mock props
  const mockProps = {
    callQRCodeAPI: jest.fn(),
    HKIDVersion: '',
    setHKIDVersion: jest.fn(),
  };

  beforeEach(() => {
    // Setup initial state that mimics the Redux store
    initialState = {
      stages: {
        dynamicDocumentsUpload: {
          showQRCodePage: false
        }
      }
    };

    store = mockStore(initialState);

    // Mock getUrl and language
    jest.spyOn(require('../../../../../utils/common/change.utils'), 'getUrl').mockReturnValue({
      getLanguageInfo: () => CONSTANTS.LANG_EN
    });
  });

  // Test rendering of component
  test('renders component in default state', () => {
    render(
      <Provider store={store}>
        <ColorIdentityProof {...mockProps} />
      </Provider>
    );

    // Check for key elements
    expect(screen.getByText(/Smart HKID/i)).toBeInTheDocument();
    expect(screen.getByText(/New Smart HKID/i)).toBeInTheDocument();
    expect(screen.getByTestId('mock-carousel')).toBeInTheDocument();
  });

  // Test HKID version selection
  test('selects HKID version and enables continue button', () => {
    render(
      <Provider store={store}>
        <ColorIdentityProof {...mockProps} />
      </Provider>
    );

    // Find and click radio button
    const smartHKIDRadio = screen.getByLabelText(/Smart HKID/i);
    fireEvent.click(smartHKIDRadio);

    // Check continue button is now enabled
    const continueButton = screen.getByRole('button', { name: /continue/i });
    expect(continueButton).not.toBeDisabled();

    // Verify setHKIDVersion was called
    expect(mockProps.setHKIDVersion).toHaveBeenCalledWith('08520000001');
  });

  // Test back button functionality
  test('back button resets HKID version', () => {
    render(
      <Provider store={store}>
        <ColorIdentityProof {...mockProps} />
      </Provider>
    );

    // Find and click back button
    const backButton = screen.getByRole('button', { name: /back/i });
    fireEvent.click(backButton);

    // Verify setHKIDVersion was called with empty string
    expect(mockProps.setHKIDVersion).toHaveBeenCalledWith('');
  });

  // Test continue button with selected HKID version
  test('continue button triggers QR code API and updates state', () => {
    render(
      <Provider store={store}>
        <ColorIdentityProof {...mockProps} />
      </Provider>
    );

    // Select HKID version first
    const smartHKIDRadio = screen.getByLabelText(/Smart HKID/i);
    fireEvent.click(smartHKIDRadio);

    // Click continue button
    const continueButton = screen.getByRole('button', { name: /continue/i });
    fireEvent.click(continueButton);

    // Verify API call and state updates
    expect(mockProps.callQRCodeAPI).toHaveBeenCalled();
    expect(mockProps.setHKIDVersion).toHaveBeenCalledWith('');
  });

  // Test QR code page rendering
  test('renders Zoloz component when showQRCodePage is true', () => {
    // Modify initial state to show QR code page
    initialState.stages.dynamicDocumentsUpload.showQRCodePage = true;
    store = mockStore(initialState);

    render(
      <Provider store={store}>
        <ColorIdentityProof {...mockProps} />
      </Provider>
    );

    // Check Zoloz component is rendered
    expect(screen.getByTestId('mock-zoloz')).toBeInTheDocument();
  });

  // Test language variations
  describe('Language Variations', () => {
    const languageTestCases = [
      { 
        language: CONSTANTS.LANG_CN, 
        expectedTexts: ['智能身份證', '新智能身份證'] 
      },
      { 
        language: CONSTANTS.LANG_HK, 
        expectedTexts: ['智能身份證', '新智能身份證'] 
      }
    ];

    languageTestCases.forEach(({ language, expectedTexts }) => {
      test(`renders correct text for ${language} language`, () => {
        // Mock language
        jest.spyOn(require('../../../../../utils/common/change.utils'), 'getUrl').mockReturnValue({
          getLanguageInfo: () => language
        });

        render(
          <Provider store={store}>
            <ColorIdentityProof {...mockProps} />
          </Provider>
        );

        // Check for language-specific texts
        expectedTexts.forEach(text => {
          expect(screen.getByText(text)).toBeInTheDocument();
        });
      });
    });
  });

  // Accessibility and Interaction Tests
  test('radio buttons are accessible and can be selected via keyboard', () => {
    render(
      <Provider store={store}>
        <ColorIdentityProof {...mockProps} />
      </Provider>
    );

    const smartHKIDRadio = screen.getByLabelText(/Smart HKID/i);
    
    // Simulate keyboard selection
    fireEvent.keyDown(smartHKIDRadio, { key: 'Enter', code: 'Enter' });
    fireEvent.click(smartHKIDRadio);

    // Verify radio button selection
    expect(smartHKIDRadio).toBeChecked();
  });
});
