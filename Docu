import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import HeaderModel from './HeaderModel';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import { getData, getPDFData } from '../../../modules/preApproval/services/preApprovalServices';
import { preApprovalAction } from '../../../modules/preApproval/store/preApproval-slice';

// Mock the external dependencies
jest.mock('../../../modules/preApproval/services/preApprovalServices', () => ({
  getData: jest.fn(),
  getPDFData: jest.fn(),
}));

jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn(),
  },
}));

jest.mock('../../../modules/preApproval/store/preApproval-slice', () => ({
  preApprovalAction: {
    setKfsDocumentPdf: jest.fn(),
  },
}));

jest.mock('../../../services/common-service', () => ({
  dispatchLoader: jest.fn(),
}));

const mockStore = configureMockStore();

describe('HeaderModel Component', () => {
  const mockProps = {
    fileName: 'test.pdf',
    closepdf: jest.fn(),
    title: 'Test Title',
    footer: 'Test Footer',
  };

  const mockResponse = {
    data: {
      products: {
        'CAMPAIGN_1': [{ pdfURL: 'https://example.com/kfs.pdf' }],
      },
      productsMob: {
        'CAMPAIGN_1': [{ pdfURL: 'https://example.com/mobile/kfs.pdf' }],
      },
      tncLinkCampaignCode: {
        'CAMPAIGN_1': [{
          pdfLinks: [
            { url: 'https://example.com/terms.pdf', Title: 'Terms and Conditions' }
          ]
        }],
        isCasa: [{
          pdfLinks: [
            { url: 'https://example.com/casa.pdf', Title: 'CASA Terms' }
          ]
        }]
      }
    }
  };

  const mockFormConfigMetaData = {
    products: [{
      campaign: 'CAMPAIGN_1'
    }]
  };

  beforeEach(() => {
    // Reset all mocks before each test
    jest.clearAllMocks();
    
    // Mock getData to return our mock response
    (getData as jest.Mock).mockResolvedValue(mockResponse);
    (getPDFData as jest.Mock).mockResolvedValue('mock-pdf-data');
  });

  const setup = (props = {}, state = {}) => {
    const store = mockStore({
      preApproval: {
        formConfigmetaData: mockFormConfigMetaData,
        ...state.preApproval
      },
      ...state
    });

    return render(
      <Provider store={store}>
        <HeaderModel {...mockProps} {...props} />
      </Provider>
    );
  };

  test('renders with basic props', () => {
    setup();
    expect(screen.getByText('Test Title')).toBeInTheDocument();
    expect(screen.getByRole('button')).toBeInTheDocument();
  });

  test('calls closepdf when close button is clicked', () => {
    setup();
    fireEvent.click(screen.getByRole('button'));
    expect(mockProps.closepdf).toHaveBeenCalled();
  });

  test('displays footer content when provided', () => {
    setup({ footer: 'Test Footer Text' });
    expect(screen.getByText('Test Footer Text')).toBeInTheDocument();
  });

  test('fetches PDF data on mount', async () => {
    setup();
    
    await waitFor(() => {
      expect(getData).toHaveBeenCalled();
      expect(getPDFData).toHaveBeenCalled();
      expect(preApprovalAction.setKfsDocumentPdf).toHaveBeenCalledWith('mock-pdf-data');
    });
  });

  test('handles mobile PDF URL correctly', async () => {
    // Mock mobile user agent and small screen
    Object.defineProperty(window, 'innerWidth', { value: 500 });
    Object.defineProperty(navigator, 'userAgent', {
      value: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15'
    });

    setup();

    await waitFor(() => {
      expect(getData).toHaveBeenCalled();
      // Verify mobile URL is used
      expect(getPDFData).toHaveBeenCalledWith(expect.stringContaining('mobile/kfs.pdf'));
    });
  });

  test('handles desktop PDF URL correctly', async () => {
    // Mock desktop user agent and large screen
    Object.defineProperty(window, 'innerWidth', { value: 1024 });
    Object.defineProperty(navigator, 'userAgent', {
      value: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    });

    setup();

    await waitFor(() => {
      expect(getData).toHaveBeenCalled();
      // Verify desktop URL is used
      expect(getPDFData).toHaveBeenCalledWith(expect.stringContaining('kfs.pdf'));
    });
  });

  test('uses Chinese PDF URL when language is zh', async () => {
    (getUrl.getLanguageInfo as jest.Mock).mockReturnValue('zh');
    
    setup();

    await waitFor(() => {
      expect(getData).toHaveBeenCalledWith(expect.stringContaining('Chinese'));
    });
  });

  test('uses English PDF URL when language is en', async () => {
    (getUrl.getLanguageInfo as jest.Mock).mockReturnValue('en');
    
    setup();

    await waitFor(() => {
      expect(getData).toHaveBeenCalledWith(expect.stringContaining('English'));
    });
  });

  test('displays terms and conditions links', async () => {
    setup({ footer: true });

    await waitFor(() => {
      expect(screen.getByText('Terms and Conditions')).toBeInTheDocument();
      expect(screen.getByText('Terms and Conditions').closest('a')).toHaveAttribute('href', 'https://example.com/terms.pdf');
    });
  });

  test('handles localhost URL replacement', async () => {
    const originalLocation = window.location;
    delete window.location;
    window.location = { host: 'localhost:3000' } as unknown as Location;

    setup();

    await waitFor(() => {
      expect(getPDFData).toHaveBeenCalledWith(expect.stringContaining('http://localhost:3000/'));
    });

    window.location = originalLocation;
  });

  test('sets PDF name correctly', async () => {
    setup();

    await waitFor(() => {
      expect(screen.getByTestId('pdf-component')).toHaveAttribute('data-filename', 'kfs.pdf');
    });
  });

  test('shows and hides spinner during loading', async () => {
    setup();

    // Initially shows spinner
    expect(screen.getByTestId('spinner')).toBeInTheDocument();

    await waitFor(() => {
      // Spinner should be hidden after loading
      expect(screen.queryByTestId('spinner')).not.toBeInTheDocument();
    });
  });
});
