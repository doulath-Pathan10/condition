import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import ColorIdentityProof from './ColorIdentityProof';
import { CONSTANTS } from '../../../../../utils/common/constants';
import * as commonUtils from '../../../../../utils/common/change.utils';
import { dispatchLoader } from '../../../../../services/common-service';

// Mock dependencies
jest.mock('../../../../../services/common-service');
jest.mock('../carousel/carousel', () => () => <div data-testid="carousel" />);
jest.mock('../zoloz/zoloz', () => ({ setHKIDVersion }) => (
  <div data-testid="zoloz-component">Mock Zoloz Component</div>
));

// Create a mock for Redux store
const createMockStore = (showQRCodePage = false) => {
  return {
    getState: () => ({
      stages: {
        dynamicDocumentsUpload: {
          showQRCodePage
        }
      }
    }),
    subscribe: jest.fn(),
    dispatch: jest.fn()
  };
};

describe('ColorIdentityProof Component', () => {
  const mockSetHKIDVersion = jest.fn();
  const mockCallQRCodeAPI = jest.fn();
  
  beforeEach(() => {
    jest.clearAllMocks();
    jest.spyOn(commonUtils.getUrl, 'getLanguageInfo').mockReturnValue(CONSTANTS.LANG_EN);
  });

  test('renders the component in English language', () => {
    const store = createMockStore();
    
    render(
      <Provider store={store}>
        <ColorIdentityProof 
          callQRCodeAPI={mockCallQRCodeAPI}
          HKIDVersion=""
          setHKIDVersion={mockSetHKIDVersion}
        />
      </Provider>
    );
    
    // Check for English language content
    expect(screen.getByText(CONSTANTS.headerTextDoc)).toBeInTheDocument();
    expect(screen.getByText(CONSTANTS.headerNote)).toBeInTheDocument();
    expect(screen.getByText(CONSTANTS.radioBtnText)).toBeInTheDocument();
    expect(screen.getByText(CONSTANTS.hknotes)).toBeInTheDocument();
    expect(screen.getByText(CONSTANTS.scbHkCopyRights_EN)).toBeInTheDocument();
    
    // Check for the radio options
    expect(screen.getByText('Smart HKID')).toBeInTheDocument();
    expect(screen.getByText('New Smart HKID')).toBeInTheDocument();
    
    // Check for buttons
    expect(screen.getByText(CONSTANTS.back)).toBeInTheDocument();
    expect(screen.getByText(CONSTANTS.continue)).toBeInTheDocument();
    
    // Check if Carousel is rendered
    expect(screen.getByTestId('carousel')).toBeInTheDocument();
  });

  test('renders the component in Chinese language', () => {
    const store = createMockStore();
    jest.spyOn(commonUtils.getUrl, 'getLanguageInfo').mockReturnValue(CONSTANTS.LANG_CN);
    
    render(
      <Provider store={store}>
        <ColorIdentityProof 
          callQRCodeAPI={mockCallQRCodeAPI}
          HKIDVersion=""
          setHKIDVersion={mockSetHKIDVersion}
        />
      </Provider>
    );
    
    // Check for Chinese language content
    expect(screen.getByText(CONSTANTS.headerTextDoc_CN)).toBeInTheDocument();
    expect(screen.getByText(CONSTANTS.headerNote_CN)).toBeInTheDocument();
    expect(screen.getByText(CONSTANTS.radioBtnText_CN)).toBeInTheDocument();
    expect(screen.getByText(CONSTANTS.hknotes_CN)).toBeInTheDocument();
    expect(screen.getByText(CONSTANTS.scbHkCopyRights_CN)).toBeInTheDocument();
    
    // Check for the radio options in Chinese
    expect(screen.getByText('智能身份證')).toBeInTheDocument();
    expect(screen.getByText('新智能身份證')).toBeInTheDocument();
    
    // Check for buttons in Chinese
    expect(screen.getByText(CONSTANTS.back_CN)).toBeInTheDocument();
    expect(screen.getByText(CONSTANTS.continue_CN)).toBeInTheDocument();
  });

  test('Continue button is disabled when no HKID version is selected', () => {
    const store = createMockStore();
    
    render(
      <Provider store={store}>
        <ColorIdentityProof 
          callQRCodeAPI={mockCallQRCodeAPI}
          HKIDVersion=""
          setHKIDVersion={mockSetHKIDVersion}
        />
      </Provider>
    );
    
    const continueButton = screen.getByRole('button', { name: /continue/i });
    expect(continueButton).toBeDisabled();
    expect(continueButton.className).toContain('form-invalid');
  });

  test('Continue button is enabled when HKID version is selected', () => {
    const store = createMockStore();
    
    render(
      <Provider store={store}>
        <ColorIdentityProof 
          callQRCodeAPI={mockCallQRCodeAPI}
          HKIDVersion="08520000001"
          setHKIDVersion={mockSetHKIDVersion}
        />
      </Provider>
    );
    
    const continueButton = screen.getByRole('button', { name: /continue/i });
    expect(continueButton).not.toBeDisabled();
    expect(continueButton.className).toContain('form-valid');
  });

  test('Selecting a radio button updates HKID version and dispatches actions', () => {
    const store = createMockStore();
    const mockDispatch = jest.fn();
    store.dispatch = mockDispatch;
    
    render(
      <Provider store={store}>
        <ColorIdentityProof 
          callQRCodeAPI={mockCallQRCodeAPI}
          HKIDVersion=""
          setHKIDVersion={mockSetHKIDVersion}
        />
      </Provider>
    );
    
    // Click on first radio button
    const smartHkidRadio = screen.getAllByRole('radio')[0];
    fireEvent.click(smartHkidRadio);
    
    // Check if setHKIDVersion was called with correct value
    expect(mockSetHKIDVersion).toHaveBeenCalledWith('08520000001');
    
    // Check if actions were dispatched
    expect(mockDispatch).toHaveBeenCalledTimes(3);
    expect(mockDispatch).toHaveBeenCalledWith(expect.objectContaining({
      payload: '08520000001',
      type: expect.any(String)  // updateHKIDVersionValue action
    }));
    expect(mockDispatch).toHaveBeenCalledWith(expect.objectContaining({
      payload: false,
      type: expect.any(String)  // updatechangeIconColorIdentityProof action
    }));
    expect(mockDispatch).toHaveBeenCalledWith(expect.objectContaining({
      payload: {
        fieldData: {
          fieldName: "hkid_type",
          code_desc: "Smart HKID",
          code_value: "08520000001"
        }
      },
      type: expect.any(String)  // addLovData action
    }));
  });

  test('Back button clears HKID version and dispatches actions', () => {
    const store = createMockStore();
    const mockDispatch = jest.fn();
    store.dispatch = mockDispatch;
    
    render(
      <Provider store={store}>
        <ColorIdentityProof 
          callQRCodeAPI={mockCallQRCodeAPI}
          HKIDVersion="08520000001"
          setHKIDVersion={mockSetHKIDVersion}
        />
      </Provider>
    );
    
    // Click on back button
    const backButton = screen.getByRole('button', { name: CONSTANTS.back });
    fireEvent.click(backButton);
    
    // Check if setHKIDVersion was called with empty string
    expect(mockSetHKIDVersion).toHaveBeenCalledWith("");
    
    // Check if actions were dispatched
    expect(mockDispatch).toHaveBeenCalledTimes(2);
    expect(mockDispatch).toHaveBeenCalledWith(expect.objectContaining({
      payload: null,
      type: expect.any(String)  // updatefileSectionData action
    }));
    expect(mockDispatch).toHaveBeenCalledWith(expect.objectContaining({
      payload: false,
      type: expect.any(String)  // updateShowQRCodePage action
    }));
  });

  test('Continue button click triggers QR code API call and updates state', async () => {
    const store = createMockStore();
    const mockDispatch = jest.fn();
    store.dispatch = mockDispatch;
    
    render(
      <Provider store={store}>
        <ColorIdentityProof 
          callQRCodeAPI={mockCallQRCodeAPI}
          HKIDVersion="08520000001"
          setHKIDVersion={mockSetHKIDVersion}
        />
      </Provider>
    );
    
    // Click on continue button
    const continueButton = screen.getByRole('button', { name: CONSTANTS.continue });
    fireEvent.click(continueButton);
    
    // Check if dispatchLoader was called
    expect(dispatchLoader).toHaveBeenCalledWith(true);
    
    // Check if showQRCodePage was updated
    expect(mockDispatch).toHaveBeenCalledWith(expect.objectContaining({
      payload: true,
      type: expect.any(String)  // updateShowQRCodePage action
    }));
    
    // Check if QR code API was called
    expect(mockCallQRCodeAPI).toHaveBeenCalled();
    
    // Check if HKID version was reset
    expect(mockSetHKIDVersion).toHaveBeenCalledWith("");
  });

  test('renders Zoloz component when showQRCodePage is true', () => {
    const store = createMockStore(true);
    
    render(
      <Provider store={store}>
        <ColorIdentityProof 
          callQRCodeAPI={mockCallQRCodeAPI}
          HKIDVersion=""
          setHKIDVersion={mockSetHKIDVersion}
        />
      </Provider>
    );
    
    // Check if Zoloz component is rendered
    expect(screen.getByTestId('zoloz-component')).toBeInTheDocument();
    
    // Check that the main component is not rendered
    expect(screen.queryByText(CONSTANTS.headerTextDoc)).not.toBeInTheDocument();
  });

  test('lovData state is initialized correctly based on language', () => {
    const store = createMockStore();
    
    // Test English language
    jest.spyOn(commonUtils.getUrl, 'getLanguageInfo').mockReturnValue(CONSTANTS.LANG_EN);
    
    const { rerender } = render(
      <Provider store={store}>
        <ColorIdentityProof 
          callQRCodeAPI={mockCallQRCodeAPI}
          HKIDVersion=""
          setHKIDVersion={mockSetHKIDVersion}
        />
      </Provider>
    );
    
    // Check English options
    expect(screen.getByText('Smart HKID')).toBeInTheDocument();
    expect(screen.getByText('New Smart HKID')).toBeInTheDocument();
    
    // Test Chinese language
    jest.spyOn(commonUtils.getUrl, 'getLanguageInfo').mockReturnValue(CONSTANTS.LANG_CN);
    
    rerender(
      <Provider store={store}>
        <ColorIdentityProof 
          callQRCodeAPI={mockCallQRCodeAPI}
          HKIDVersion=""
          setHKIDVersion={mockSetHKIDVersion}
        />
      </Provider>
    );
    
    // Check Chinese options
    expect(screen.getByText('智能身份證')).toBeInTheDocument();
    expect(screen.getByText('新智能身份證')).toBeInTheDocument();
  });
});
