import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import HeaderRef from './HeaderRef';
import { useSelector } from 'react-redux';

// Mock useSelector
jest.mock('react-redux', () => ({
  useSelector: jest.fn(),
}));

// Mock getLanguageInfo
jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn().mockReturnValue('en'),
  },
}));

// Mock CONSTANTS
jest.mock('../../../utils/common/constants', () => ({
  CONSTANTS: {
    LANG_CN: 'zh',
    STAGE_NAMES: {
      ACD_1: 'ACD_1',
      ACD_2: 'ACD_2',
      ACD_3: 'ACD_3',
      ACD_4: 'ACD_4',
      DOC_3: 'DOC_3',
      FFD_1: 'FFD_1',
      FFD_2: 'FFD_2',
    },
  },
}));

// Mock child components
jest.mock('../popup-model/popup-model', () => ({ 
  __esModule: true,
  default: ({ children, displayPopup }: any) => displayPopup ? <div>{children}</div> : null
}));

jest.mock('./header-modal', () => ({
  __esModule: true,
  default: ({ title }: any) => <div>{title}</div>
}));

describe('HeaderRef Component', () => {
  const mockDownloadPdfData = 'http://example.com/kfs.pdf';
  const mockApplicationNo = 'TEST12345';

  beforeEach(() => {
    (useSelector as jest.Mock).mockImplementation((callback) => {
      const mockState = {
        preApproval: {
          kfsDocumentPdf: mockDownloadPdfData,
        },
        stages: {
          stages: [{
            stageId: 'OTHER_STAGE',
            stageInfo: {
              products: [{
                campaign: 'HKBDC23PESTP10'
              }]
            }
          }]
        }
      };
      return callback(mockState);
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('renders reference number', () => {
    render(<HeaderRef applicationNo={mockApplicationNo} />);
    expect(screen.getByText(`Ref No: ${mockApplicationNo}`)).toBeInTheDocument();
  });

  test('renders default reference number when none provided', () => {
    render(<HeaderRef />);
    expect(screen.getByText('Ref No: HK24101700230315')).toBeInTheDocument();
  });

  test('renders KFS section when stage is not restricted', () => {
    render(<HeaderRef applicationNo={mockApplicationNo} />);
    expect(screen.getByText('KFS (including Fees and Charges)')).toBeInTheDocument();
  });

  test('does not render KFS section when stage is restricted', () => {
    (useSelector as jest.Mock).mockImplementation((callback) => {
      const mockState = {
        preApproval: {
          kfsDocumentPdf: mockDownloadPdfData,
        },
        stages: {
          stages: [{
            stageId: 'ACD_1',
            stageInfo: {
              products: [{
                campaign: 'HKBDC23PESTP10'
              }]
            }
          }]
        }
      };
      return callback(mockState);
    });

    render(<HeaderRef applicationNo={mockApplicationNo} />);
    expect(screen.queryByText('KFS (including Fees and Charges)')).not.toBeInTheDocument();
  });

  test('opens popup when Read button is clicked', () => {
    render(<HeaderRef applicationNo={mockApplicationNo} />);
    fireEvent.click(screen.getByText('Read'));
    expect(screen.getByText('Key Facts Statement')).toBeInTheDocument();
  });

  test('triggers download when Download button is clicked', () => {
    const originalCreateElement = document.createElement;
    document.createElement = jest.fn().mockImplementation((tag) => {
      const element = originalCreateElement(tag);
      if (tag === 'a') {
        element.click = jest.fn();
      }
      return element;
    });

    render(<HeaderRef applicationNo={mockApplicationNo} />);
    fireEvent.click(screen.getByText('Download'));
    expect(document.createElement).toHaveBeenCalledWith('a');
  });

  test('renders Chinese text when language is Chinese', () => {
    (require('../../../utils/common/change.utils').getUrl.getLanguageInfo as jest.Mock).mockReturnValue('zh');
    render(<HeaderRef applicationNo={mockApplicationNo} />);
    expect(screen.getByText('參考編號:')).toBeInTheDocument();
  });

  test('handles missing PDF data gracefully', () => {
    (useSelector as jest.Mock).mockImplementation((callback) => {
      const mockState = {
        preApproval: {
          kfsDocumentPdf: null,
        },
        stages: {
          stages: [{
            stageId: 'OTHER_STAGE',
            stageInfo: {
              products: [{
                campaign: 'HKBDC23PESTP10'
              }]
            }
          }]
        }
      };
      return callback(mockState);
    });

    render(<HeaderRef applicationNo={mockApplicationNo} />);
    fireEvent.click(screen.getByText('Download'));
    // Should not throw error
  });
});
