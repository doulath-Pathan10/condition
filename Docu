import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import LoanDisbursement from './LoanDisbursement';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';

const middlewares = [thunk];
const mockStore = configureStore(middlewares);

describe('LoanDisbursement Component', () => {
  const mockStageSelector = {
    stages: [{
      stageInfo: {
        products: [{
          product_category: 'PL',
          product_type: '1258',
          offer_details: [{
            approved_amount: 50000,
            approved_tenor: 24,
            apr: '2.5',
            flatRate: '1.5',
            repaymentAmount: '2300',
            offer_status: '1001',
            bestOffer: 'N',
            approved_amount_currency: 'HKD'
          }, {
            approved_amount: 100000,
            approved_tenor: 36,
            apr: '3.5',
            flatRate: '2.5',
            repaymentAmount: '3300',
            offer_status: '1001',
            bestOffer: 'Y',
            approved_amount_currency: 'HKD'
          }]
        }],
        applicants: [{}],
        application: {}
      }
    }],
    userInput: {
      downshell: false
    }
  };

  const store = mockStore({
    stages: mockStageSelector,
    lovDesc: {}
  });

  beforeEach(() => {
    jest.clearAllMocks();
    window.history.pushState({}, '', '?lang=en');
  });

  const renderComponent = () => {
    return render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );
  };

  test('renders the component with English content', () => {
    renderComponent();
    
    expect(screen.getByText('Congratulations!')).toBeInTheDocument();
    expect(screen.getByText(/Your preliminary assessment is completed/)).toBeInTheDocument();
    expect(screen.getByText('Loan Amount')).toBeInTheDocument();
    expect(screen.getByText('Tenor & Monthly Repayment')).toBeInTheDocument();
  });

  test('displays initial loan amount and tenor', () => {
    renderComponent();
    
    expect(screen.getByDisplayValue('50000')).toBeInTheDocument();
    expect(screen.getByText('24 Months')).toBeInTheDocument();
  });

  test('renders loan amount slider with correct min and max values', () => {
    renderComponent();
    
    const slider = screen.getByRole('slider');
    expect(slider).toHaveAttribute('min', '50000');
    expect(slider).toHaveAttribute('max', '100000');
    expect(slider).toHaveAttribute('step', '1000');
  });

  test('changes loan amount when slider is moved', async () => {
    renderComponent();
    
    const slider = screen.getByRole('slider');
    fireEvent.change(slider, { target: { value: '75000' } });
    
    await waitFor(() => {
      expect(screen.getByText('75000')).toBeInTheDocument();
    });
  });

  test('changes tenor when a different option is clicked', async () => {
    renderComponent();
    
    const thirtySixMonths = screen.getByText('36 Months');
    fireEvent.click(thirtySixMonths);
    
    await waitFor(() => {
      expect(thirtySixMonths).toHaveClass('selected');
    });
  });

  test('displays repayment information after tenor change', async () => {
    renderComponent();
    
    const thirtySixMonths = screen.getByText('36 Months');
    fireEvent.click(thirtySixMonths);
    
    await waitFor(() => {
      expect(screen.getByText(/x 36 months/)).toBeInTheDocument();
    });
  });

  test('shows spinner while calculating offer', async () => {
    renderComponent();
    
    const thirtySixMonths = screen.getByText('36 Months');
    fireEvent.click(thirtySixMonths);
    
    expect(screen.getByTestId('spinner__container')).toBeInTheDocument();
  });

  test('renders correct content for best offer scenario', () => {
    const bestOfferStore = mockStore({
      stages: {
        stages: [{
          stageInfo: {
            products: [{
              product_category: 'PL',
              offer_details: [{
                approved_amount: 50000,
                approved_tenor: 24,
                apr: '2.5',
                flatRate: '1.5',
                repaymentAmount: '2300',
                offer_status: '1004',
                bestOffer: 'Y',
                approved_amount_currency: 'HKD'
              }, {
                approved_amount: 100000,
                approved_tenor: 36,
                apr: '3.5',
                flatRate: '2.5',
                repaymentAmount: '3300',
                offer_status: '1001',
                bestOffer: 'N',
                approved_amount_currency: 'HKD'
              }]
            }],
            applicants: [{}],
            application: {}
          }
        }],
        userInput: {
          downshell: false
        }
      },
      lovDesc: {}
    });

    render(
      <Provider store={bestOfferStore}>
        <LoanDisbursement />
      </Provider>
    );
    
    expect(screen.getByText('Preliminary approved loan amount')).toBeInTheDocument();
    expect(screen.getByText('HKD 100000')).toBeInTheDocument();
  });

  test('renders correct tenor options based on product type', () => {
    renderComponent();
    
    // For product type 1258, should filter out 72 and 84 months
    expect(screen.queryByText('72 Months')).not.toBeInTheDocument();
    expect(screen.queryByText('84 Months')).not.toBeInTheDocument();
    expect(screen.getByText('60 Months')).toBeInTheDocument();
  });

  test('displays remarks section correctly', () => {
    renderComponent();
    
    expect(screen.getByText('Remarks:')).toBeInTheDocument();
    expect(screen.getByText(/Prepayment \/ Early Settlement \/ Redemption Fee/)).toBeInTheDocument();
    expect(screen.getByText(/The above offers are preliminary result/)).toBeInTheDocument();
  });

  test('renders continue button with correct text', () => {
    renderComponent();
    
    expect(screen.getByRole('button', { name: /Continue/i })).toBeInTheDocument();
  });

  test('handles next stage button click', async () => {
    renderComponent();
    
    const continueButton = screen.getByRole('button', { name: /Continue/i });
    fireEvent.click(continueButton);
    
    // You would typically check for dispatched actions here
    await waitFor(() => {
      const actions = store.getActions();
      expect(actions.some(action => action.type === 'stages/updateStageId')).toBeTruthy();
    });
  });

  test('renders in Chinese when language is zh', () => {
    window.history.pushState({}, '', '?lang=zh');
    
    renderComponent();
    
    expect(screen.getByText('恭喜')).toBeInTheDocument();
    expect(screen.getByText(/你的初步審批已經完成/)).toBeInTheDocument();
  });
});
