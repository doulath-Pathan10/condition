import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import DucumentUploadMainSCR from './DocumentUploadMainSCR';
import { CONSTANTS } from '../../../../../utils/common/constants';

const mockStore = configureStore([]);

describe('DocumentUploadMainSCR Component', () => {
  let store: any;

  const initialState = {
    stages: {
      stages: [{
        stageId: 'ld-1',
        stageInfo: {
          applicant_documents: [{
            document_list: [
              {
                document_options: [{
                  document_types: [
                    { uploaded_documents: null }
                  ]
                }]
              }
            ]
          }],
          application: {
            channel_reference: 'test123'
          },
          products: [{
            product_category: 'CC'
          }]
        }
      }],
      dynamicDocumentsUpload: {
        documentData: {},
        HKIDQRCodeData: null,
        documentCount: 0,
        success: false,
        fileSectionData: null
      }
    },
    preApproval: {
      resumeAllowed: 'N',
      currentStage: 'PD-1'
    }
  };

  beforeEach(() => {
    store = mockStore(initialState);
    store.dispatch = jest.fn();
  });

  test('renders without crashing', () => {
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    expect(screen.getByText(/provide document/i)).toBeInTheDocument();
  });

  test('displays document upload progress', () => {
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    expect(screen.getByText(/0\/1/i)).toBeInTheDocument();
  });

  test('shows continue button when all documents are uploaded', () => {
    const customState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        dynamicDocumentsUpload: {
          ...initialState.stages.dynamicDocumentsUpload,
          documentCount: 1,
          success: true
        }
      }
    };
    
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    expect(screen.getByRole('button', { name: /continue/i })).toBeInTheDocument();
  });

  test('disables continue button when not all documents are uploaded', () => {
    const customState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        dynamicDocumentsUpload: {
          ...initialState.stages.dynamicDocumentsUpload,
          success: true
        }
      }
    };
    
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    const continueButton = screen.getByRole('button', { name: /continue/i });
    expect(continueButton).toBeDisabled();
    expect(continueButton).toHaveClass('form-invalid');
  });

  test('enables continue button when all documents are uploaded', () => {
    const customState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        dynamicDocumentsUpload: {
          ...initialState.stages.dynamicDocumentsUpload,
          documentCount: 1,
          success: true
        }
      }
    };
    
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    const continueButton = screen.getByRole('button', { name: /continue/i });
    expect(continueButton).not.toBeDisabled();
    expect(continueButton).toHaveClass('form-valid');
  });

  test('displays spinner when showSpinner is true and stage is ld-1', () => {
    const customState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        stages: [{
          ...initialState.stages.stages[0],
          stageId: 'ld-1'
        }]
      }
    };
    
    store = mockStore(customState);
    
    const { container } = render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    // Mock the spinner state
    jest.spyOn(React, 'useState')
      .mockImplementationOnce(() => [true, jest.fn()]); // showSpinner
    
    expect(container.querySelector('.spinner')).toBeInTheDocument();
  });

  test('calls nextStage when continue button is clicked', async () => {
    const customState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        dynamicDocumentsUpload: {
          ...initialState.stages.dynamicDocumentsUpload,
          documentCount: 1,
          success: true
        }
      }
    };
    
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    const continueButton = screen.getByRole('button', { name: /continue/i });
    fireEvent.click(continueButton);
    
    await waitFor(() => {
      expect(store.dispatch).toHaveBeenCalled();
    });
  });

  test('displays correct content for different languages', () => {
    // Mock the getLanguageInfo function to return different languages
    jest.mock('../../../../../utils/common/change.utils', () => ({
      getLanguageInfo: jest.fn().mockReturnValue('en')
    }));
    
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    // Test for English
    expect(screen.getByText(CONSTANTS.provideDoc)).toBeInTheDocument();
    
    // Change mock to return Chinese
    jest.mock('../../../../../utils/common/change.utils', () => ({
      getLanguageInfo: jest.fn().mockReturnValue('cn')
    }));
    
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    // Test for Chinese
    expect(screen.getByText(CONSTANTS.provideDoc_CN)).toBeInTheDocument();
  });

  test('handles resume page scenario correctly', () => {
    const customState = {
      ...initialState,
      preApproval: {
        ...initialState.preApproval,
        resumeAllowed: 'Y'
      },
      stages: {
        ...initialState.stages,
        stages: [{
          ...initialState.stages.stages[0],
          stageInfo: {
            ...initialState.stages.stages[0].stageInfo,
            applicant_documents: [{
              document_list: [
                {
                  document_options: [{
                    document_types: [
                      { uploaded_documents: { some: 'data' } }
                    ]
                  }]
                }
              ]
            }]
          }
        }]
      }
    };
    
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    // Should show 1/1 count since resumeAllowed is Y and there's uploaded data
    expect(screen.getByText(/1\/1/i)).toBeInTheDocument();
  });

  test('displays footer content correctly', () => {
    render(
      <Provider store={store}>
        <DucumentUploadMainSCR />
      </Provider>
    );
    
    expect(screen.getByText(CONSTANTS.footerContent1)).toBeInTheDocument();
    expect(screen.getByText(CONSTANTS.footerContent2)).toBeInTheDocument();
    expect(screen.getByText(CONSTANTS.footerContent3)).toBeInTheDocument();
  });
});
