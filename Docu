import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import Model from './Model'; // Adjust the import path as needed
import '@testing-library/jest-dom';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import { StoreModel } from '../../../utils/model/common-model';

// Mock external dependencies
jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn().mockReturnValue('EN'),
    getChannelRefNo: jest.fn().mockReturnValue({ channelRefNo: 'TEST123' }),
    getProductInfo: jest.fn().mockReturnValue([])
  }
}));

jest.mock('../../../services/track-events', () => ({
  triggerAdobeEvent: jest.fn()
}));

jest.mock('../../../modules/preApproval/store/preApproval-slice', () => ({
  preApprovalAction: {
    setCurrentStage: jest.fn()
  }
}));

// Mock model.json data
jest.mock('../../../assets/_json/model.json', () => ([
  {
    name: 'techincalissue',
    header_content: 'Technical Issue',
    header_content_CN: '技术问题',
    header_content_HK: '技術問題',
    body_content: ['We are experiencing technical difficulties'],
    body_content_CN: ['我们遇到技术困难'],
    body_content_HK: ['我們遇到技術困難'],
    buttons: ['OK', 'Cancel'],
    buttons_CN: ['确定', '取消'],
    buttons_HK: ['確定', '取消']
  },
  {
    name: 'saveSuccess',
    header_content: 'Success',
    header_content_CN: '成功',
    header_content_HK: '成功',
    body_content_1: 'Your application has been saved',
    body_content_1_CN: '您的申请已保存',
    body_content_1_HK: '您的申請已保存',
    body_content_2: 'Reference Number:',
    body_content_2_CN: '参考编号:',
    body_content_2_HK: '參考編號:'
  },
  {
    name: 'preApprovedBanner',
    preAprvlHeading: 'Congratulations!',
    preAprvlHeading_CN: '恭喜！',
    preAprvlHeading_HK: '恭喜！',
    creditLimit: 'Your credit limit is',
    creditLimit_CN: '您的信用额度是',
    creditLimit_HK: '您的信用額度是',
    uploadMsg: 'Please upload the following documents',
    uploadMsg_CN: '请上传以下文件',
    uploadMsg_HK: '請上傳以下文件',
    uploadButton: 'Upload Documents',
    uploadButton_CN: '上传文件',
    uploadButton_HK: '上傳文件',
    refNo: 'Ref No:',
    refNo_CN: '参考编号:',
    refNo_HK: '參考編號:',
    footerMsg: 'Your reference number is'
  }
]), { virtual: true });

// Mock the PDF component
jest.mock('../pdf/pdf', () => () => <div>Mock PDF Viewer</div>);

const mockStore = configureMockStore();
const initialState = {
  stages: {
    stages: [{
      stageInfo: {
        application: { cos_ref_number: 'APP123' },
        products: [{
          campaign: 'TEST_CAMPAIGN',
          offer_details: [{ approved_amount: 10000 }]
        }],
        applicant_documents: [{
          document_list: [
            { document_category: 'ID Proof' },
            { document_category: 'Address Proof' }
          ]
        }]
      }
    }]
  },
  preApproval: {
    formConfigmetaData: {
      products: [{ campaign: 'TEST_CAMPAIGN' }]
    }
  }
};

describe('Model Component', () => {
  const mockClosePopup = jest.fn();
  const mockHandlebuttonClick = jest.fn();
  const mockHandleChooseClick = jest.fn();
  const mockAgreePDF = jest.fn();
  const mockClosePDF = jest.fn();
  
  let store: any;
  
  beforeEach(() => {
    store = mockStore(initialState);
  });
  
  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('Technical Issue Modal', () => {
    it('should render technical issue modal with correct content', () => {
      render(
        <Provider store={store}>
          <Model name="techincalissue" closePopup={mockClosePopup} />
        </Provider>
      );
      
      expect(screen.getByText('Technical Issue')).toBeInTheDocument();
      expect(screen.getByText('We are experiencing technical difficulties')).toBeInTheDocument();
      expect(screen.getByText('TEST123')).toBeInTheDocument();
      expect(screen.getByText('OK')).toBeInTheDocument();
      expect(screen.getByText('Cancel')).toBeInTheDocument();
    });

    it('should call closePopup when OK button is clicked', () => {
      render(
        <Provider store={store}>
          <Model name="techincalissue" closePopup={mockClosePopup} />
        </Provider>
      );
      
      fireEvent.click(screen.getByText('OK'));
      expect(mockClosePopup).toHaveBeenCalledTimes(1);
    });
  });

  describe('Save Success Modal', () => {
    it('should render save success modal with correct content', () => {
      render(
        <Provider store={store}>
          <Model name="saveSuccess" />
        </Provider>
      );
      
      expect(screen.getByText('Success')).toBeInTheDocument();
      expect(screen.getByText('Your application has been saved')).toBeInTheDocument();
      expect(screen.getByText('Reference Number: TEST123')).toBeInTheDocument();
      expect(screen.getByTestId('successClose-btn')).toBeInTheDocument();
    });

    it('should redirect to home page when close button is clicked', () => {
      delete window.location;
      window.location = { href: '' } as any;
      
      render(
        <Provider store={store}>
          <Model name="saveSuccess" />
        </Provider>
      );
      
      fireEvent.click(screen.getByTestId('successClose-btn'));
      expect(window.location.href).toBe('http://localhost/');
    });
  });

  describe('Pre-Approved Banner', () => {
    it('should render pre-approved banner with correct content', () => {
      render(
        <Provider store={store}>
          <Model name="preApprovedBanner" />
        </Provider>
      );
      
      expect(screen.getByText('Congratulations!')).toBeInTheDocument();
      expect(screen.getByText('Your credit limit is 10000')).toBeInTheDocument();
      expect(screen.getByText('Please upload the following documents')).toBeInTheDocument();
      expect(screen.getByText('ID Proof')).toBeInTheDocument();
      expect(screen.getByText('Address Proof')).toBeInTheDocument();
      expect(screen.getByText('Upload Documents')).toBeInTheDocument();
      expect(screen.getByText('Ref No: TEST123')).toBeInTheDocument();
    });

    it('should dispatch setCurrentStage when upload button is clicked', () => {
      render(
        <Provider store={store}>
          <Model name="preApprovedBanner" />
        </Provider>
      );
      
      fireEvent.click(screen.getByText('Upload Documents'));
      expect(require('../../../modules/preApproval/store/preApproval-slice').preApprovalAction.setCurrentStage)
        .toHaveBeenCalledWith('DC');
    });
  });

  describe('PDF Declaration Modal', () => {
    const pdfProps = {
      name: '',
      data: {
        title: 'test.pdf',
        textContent: 'Declaration',
        target: {
          title: 'test.pdf',
          name: 'Declaration',
          checked: false
        }
      },
      closepdf: mockClosePDF,
      agreePDF: mockAgreePDF,
      stageId: 'rp'
    };

    it('should render PDF modal with correct content', () => {
      render(
        <Provider store={store}>
          <Model {...pdfProps} />
        </Provider>
      );
      
      expect(screen.getByText('Declaration')).toBeInTheDocument();
      expect(screen.getByText('Mock PDF Viewer')).toBeInTheDocument();
      expect(screen.getByText('Download PDF')).toBeInTheDocument();
      expect(screen.getByText('Scroll')).toBeInTheDocument();
    });

    it('should call closepdf when close button is clicked', () => {
      render(
        <Provider store={store}>
          <Model {...pdfProps} />
        </Provider>
      );
      
      fireEvent.click(screen.getByTestId('close-btn'));
      expect(mockClosePDF).toHaveBeenCalledTimes(1);
    });

    it('should call agreePDF when agree button is clicked', () => {
      render(
        <Provider store={store}>
          <Model {...pdfProps} />
        </Provider>
      );
      
      // Simulate scrolling to bottom to show agree button
      fireEvent.scroll(screen.getByTestId('pdf-scroll-btm'), {
        target: { scrollTop: 1000, clientHeight: 500, scrollHeight: 1500 }
      });
      
      fireEvent.click(screen.getByText('Agree'));
      expect(mockAgreePDF).toHaveBeenCalledTimes(1);
    });
  });

  describe('Info Tooltips Modal', () => {
    it('should render info tooltip with custom content', () => {
      render(
        <Provider store={store}>
          <Model 
            name="info_tooltips" 
            body_content="Custom tooltip content" 
            btnTxt="Got it" 
            closePopup={mockClosePopup} 
          />
        </Provider>
      );
      
      expect(screen.getByText('Custom tooltip content')).toBeInTheDocument();
      expect(screen.getByText('Got it')).toBeInTheDocument();
    });
  });

  describe('Language Variations', () => {
    it('should render Chinese content when language is CN', () => {
      require('../../../utils/common/change.utils').getUrl.getLanguageInfo.mockReturnValue('CN');
      
      render(
        <Provider store={store}>
          <Model name="techincalissue" closePopup={mockClosePopup} />
        </Provider>
      );
      
      expect(screen.getByText('技术问题')).toBeInTheDocument();
      expect(screen.getByText('我们遇到技术困难')).toBeInTheDocument();
      expect(screen.getByText('确定')).toBeInTheDocument();
      expect(screen.getByText('取消')).toBeInTheDocument();
    });

    it('should render Hong Kong content when language is HK', () => {
      require('../../../utils/common/change.utils').getUrl.getLanguageInfo.mockReturnValue('HK');
      
      render(
        <Provider store={store}>
          <Model name="techincalissue" closePopup={mockClosePopup} />
        </Provider>
      );
      
      expect(screen.getByText('技術問題')).toBeInTheDocument();
      expect(screen.getByText('我們遇到技術困難')).toBeInTheDocument();
      expect(screen.getByText('確定')).toBeInTheDocument();
      expect(screen.getByText('取消')).toBeInTheDocument();
    });
  });

  describe('Empty Check Modal', () => {
    it('should render with two buttons and handle clicks', () => {
      render(
        <Provider store={store}>
          <Model 
            name="empty_check" 
            handlebuttonClick={mockHandlebuttonClick}
            handleChooseClick={mockHandleChooseClick}
          />
        </Provider>
      );
      
      const buttons = screen.getAllByRole('button');
      expect(buttons).toHaveLength(2);
      
      fireEvent.click(buttons[0]);
      expect(mockHandlebuttonClick).toHaveBeenCalledTimes(1);
      
      fireEvent.click(buttons[1]);
      expect(mockHandleChooseClick).toHaveBeenCalledTimes(1);
    });
  });
});
