import React from 'react';
import { render, screen } from '@testing-library/react';
import { Provider } from 'react-redux';
import { MemoryRouter } from 'react-router-dom';
import configureStore from 'redux-mock-store';
import PILDashboard from './PILDashboard';

// Mock child components to simplify testing
jest.mock('../../dashboard/left-sidebar/left-sidebar', () => () => <div>LeftSideBar</div>);
jest.mock('../dynamicComponent/dynamicComponent', () => () => <div>DynamicComponent</div>);
jest.mock('../../../shared/components/otp-model/otp-model', () => () => <div>OTPModel</div>);
jest.mock('../commonComponents/asiaMiles/asiaMiles', () => () => <div>AsiaMiles</div>);

const mockStore = configureStore([]);

describe('PILDashboard Component', () => {
  const initialState = {
    preApproval: {
      formConfigmetaData: {},
      currentStage: 'PD-1',
    },
    auth: {
      sessionUid: 'test-session',
    },
    stages: {
      stages: [{
        stageId: 'pd-1',
        stageInfo: {},
      }],
      otpOpen: false,
    },
    urlParam: {
      validUrl: true,
    },
  };

  const renderComponent = (storeState = initialState) => {
    const store = mockStore(storeState);
    return render(
      <Provider store={store}>
        <MemoryRouter>
          <PILDashboard />
        </MemoryRouter>
      </Provider>
    );
  };

  test('renders without crashing', () => {
    renderComponent();
    expect(screen.getByText('LeftSideBar')).toBeInTheDocument();
  });

  test('renders AsiaMiles when URL matches specific pattern', () => {
    // Mock window.location.search
    Object.defineProperty(window, 'location', {
      value: {
        search: '?product=1313&source=09&lang=en',
      },
      writable: true,
    });
    
    renderComponent();
    expect(screen.getByText('AsiaMiles')).toBeInTheDocument();
  });

  test('renders OTPModel when otpShowSelector is true', () => {
    renderComponent({
      ...initialState,
      stages: {
        ...initialState.stages,
        otpOpen: true,
      },
    });
    expect(screen.getByText('OTPModel')).toBeInTheDocument();
  });

  test('renders DynamicComponent when stageSelector exists', () => {
    renderComponent();
    expect(screen.getByText('DynamicComponent')).toBeInTheDocument();
  });

  test('renders technical issue model when URL is invalid', () => {
    renderComponent({
      ...initialState,
      urlParam: {
        validUrl: false,
      },
    });
    expect(screen.getByText('Model')).toBeInTheDocument();
  });

  test('does not render DynamicComponent when stageSelector is empty', () => {
    renderComponent({
      ...initialState,
      stages: {
        ...initialState.stages,
        stages: [],
      },
    });
    expect(screen.queryByText('DynamicComponent')).not.toBeInTheDocument();
  });
});
