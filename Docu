import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import CasaTNC from './CasaTNC';
import { getData, getPDFData } from '../../services/preApprovalServices';
import { CATEGORIES, KFS_DOC_URL } from '../../services/constants';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Spinner from '../../../../shared/components/spinner/spinner';
import Pdf from '../../../../shared/components/pdf/pdf';

// Mock the services and components
jest.mock('../../services/preApprovalServices', () => ({
  getData: jest.fn(),
  getPDFData: jest.fn(),
}));

jest.mock('../../../../shared/components/spinner/spinner', () => () => <div>Loading...</div>);
jest.mock('../../../../shared/components/pdf/pdf', () => () => <div>PDF Viewer</div>);

const mockStore = configureStore([]);

describe('CasaTNC Component', () => {
  let store: any;

  beforeEach(() => {
    store = mockStore({
      preApproval: {
        currentStage: 'someStage',
        formConfigmetaData: {
          products: [{ campaign: 'testCampaign' }]
        }
      }
    });

    // Mock successful API responses
    (getData as jest.Mock).mockResolvedValue({
      data: {
        productsMob: {
          testCampaign: [{ pdfURL: 'http://test.com/mobile.pdf' }]
        },
        products: {
          testCampaign: [{ pdfURL: 'http://test.com/desktop.pdf' }]
        },
        tncLinkCampaignCode: {
          isCasa: [{
            pdfLinks: [
              { url: 'http://test.com/terms1.pdf', Title: 'Terms 1' },
              { url: 'http://test.com/terms2.pdf', Title: 'Terms 2' }
            ]
          }]
        }
      }
    });

    (getPDFData as jest.Mock).mockResolvedValue('pdf-data');
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  // Test 1: Renders the component without crashing
  it('renders without crashing', () => {
    render(
      <Provider store={store}>
        <CasaTNC isVisible={true} onScrollEnd={jest.fn()} />
      </Provider>
    );
    expect(screen.getByText('Before you start your application:')).toBeInTheDocument();
  });

  // Test 2: Shows spinner while loading
  it('shows spinner while loading', () => {
    render(
      <Provider store={store}>
        <CasaTNC isVisible={true} onScrollEnd={jest.fn()} />
      </Provider>
    );
    expect(screen.getByText('Loading...')).toBeInTheDocument();
  });

  // Test 3: Displays the correct initial content after loading
  it('displays the correct initial content after loading', async () => {
    render(
      <Provider store={store}>
        <CasaTNC isVisible={true} onScrollEnd={jest.fn()} />
      </Provider>
    );

    await waitFor(() => {
      expect(screen.getByText('Please READ the following Terms & Conditions')).toBeInTheDocument();
      expect(screen.getByText('Download')).toBeInTheDocument();
      expect(screen.getByText('TAP TO SCROLL AND READ')).toBeInTheDocument();
    });
  });

  // Test 4: Displays PDF viewer after loading
  it('displays PDF viewer after loading', async () => {
    render(
      <Provider store={store}>
        <CasaTNC isVisible={true} onScrollEnd={jest.fn()} />
      </Provider>
    );

    await waitFor(() => {
      expect(screen.getByText('PDF Viewer')).toBeInTheDocument();
    });
  });

  // Test 5: Shows T&C links when stageID is undefined
  it('shows T&C links when stageID is undefined', async () => {
    render(
      <Provider store={store}>
        <CasaTNC isVisible={true} onScrollEnd={jest.fn()} />
      </Provider>
    );

    await waitFor(() => {
      expect(screen.getByText('Tap below to read full T&C of relevant section.')).toBeInTheDocument();
      expect(screen.getByText('Terms 1')).toBeInTheDocument();
      expect(screen.getByText('Terms 2')).toBeInTheDocument();
    });
  });

  // Test 6: Does not show T&C links when stageID is defined
  it('does not show T&C links when stageID is defined', async () => {
    render(
      <Provider store={store}>
        <CasaTNC isVisible={true} onScrollEnd={jest.fn()} stageID="someStage" />
      </Provider>
    );

    await waitFor(() => {
      expect(screen.queryByText('Tap below to read full T&C of relevant section.')).not.toBeInTheDocument();
    });
  });

  // Test 7: Shows accept button when scrolled to bottom
  it('shows accept button when scrolled to bottom', async () => {
    const { container } = render(
      <Provider store={store}>
        <CasaTNC isVisible={true} onScrollEnd={jest.fn()} />
      </Provider>
    );

    await waitFor(() => {
      // Find the scroll container and simulate scroll event
      const scrollContainer = container.querySelector('.react-pdf__Page__canvas1');
      if (scrollContainer) {
        Object.defineProperty(scrollContainer, 'scrollTop', { value: 100, writable: true });
        Object.defineProperty(scrollContainer, 'scrollHeight', { value: 200, writable: true });
        Object.defineProperty(scrollContainer, 'clientHeight', { value: 100, writable: true });
        
        fireEvent.scroll(scrollContainer);
      }

      expect(screen.getByText('I ACCEPT')).toBeInTheDocument();
    });
  });

  // Test 8: Clicking download button triggers download
  it('clicking download button triggers download', async () => {
    const originalCreateElement = document.createElement;
    const originalAppendChild = document.body.appendChild;
    const originalRemoveChild = document.body.removeChild;
    const originalClick = HTMLElement.prototype.click;

    const mockClick = jest.fn();
    const mockAppendChild = jest.fn();
    const mockRemoveChild = jest.fn();

    document.createElement = jest.fn().mockImplementation(() => ({
      href: '',
      download: '',
      click: mockClick,
    }));
    document.body.appendChild = mockAppendChild;
    document.body.removeChild = mockRemoveChild;
    HTMLElement.prototype.click = mockClick;

    render(
      <Provider store={store}>
        <CasaTNC isVisible={true} onScrollEnd={jest.fn()} />
      </Provider>
    );

    await waitFor(() => {
      const downloadButton = screen.getByText('Download');
      fireEvent.click(downloadButton);
    });

    expect(mockClick).toHaveBeenCalled();

    // Restore original implementations
    document.createElement = originalCreateElement;
    document.body.appendChild = originalAppendChild;
    document.body.removeChild = originalRemoveChild;
    HTMLElement.prototype.click = originalClick;
  });

  // Test 9: Clicking "TAP TO SCROLL" button triggers scroll
  it('clicking "TAP TO SCROLL" button triggers scroll', async () => {
    const scrollByMock = jest.fn();
    render(
      <Provider store={store}>
        <CasaTNC isVisible={true} onScrollEnd={jest.fn()} />
      </Provider>
    );

    await waitFor(() => {
      const scrollButton = screen.getByText('TAP TO SCROLL AND READ');
      const scrollContainer = scrollButton.closest('.react-pdf__Page__canvas1');
      if (scrollContainer) {
        scrollContainer.scrollBy = scrollByMock;
      }
      fireEvent.click(scrollButton);
    });

    expect(scrollByMock).toHaveBeenCalledWith({ top: 2000, behavior: 'smooth' });
  });

  // Test 10: Handles API errors gracefully
  it('handles API errors gracefully', async () => {
    (getData as jest.Mock).mockRejectedValue(new Error('API Error'));

    render(
      <Provider store={store}>
        <CasaTNC isVisible={true} onScrollEnd={jest.fn()} />
      </Provider>
    );

    await waitFor(() => {
      // We should still see the spinner or some error state
      expect(screen.queryByText('PDF Viewer')).not.toBeInTheDocument();
    });
  });
});
