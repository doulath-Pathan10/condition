import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import Spinner from './Spinner';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';

// Mock the Lottie Player
jest.mock('@lottiefiles/react-lottie-player', () => ({
  Player: () => <div>Lottie Animation</div>
}));

// Mock the navigation
const mockNavigate = jest.fn();
jest.mock('react-router-dom', () => ({
  useNavigate: () => mockNavigate,
}));

// Mock the postFulFilmentData function
const mockPostFulFilmentData = jest.fn();
jest.mock('../../../modules/preApproval/services/preApprovalPostServices', () => ({
  postFulFilmentData: () => mockPostFulFilmentData(),
}));

// Mock Redux actions
const mockDispatch = jest.fn();
jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: () => mockDispatch,
  useSelector: jest.fn(),
}));

describe('Spinner Component', () => {
  const mockStore = configureStore([]);
  let store: any;

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'FFD_1',
          stageInfo: {
            application: {
              channel_reference: 'test-ref'
            },
            applicants: []
          }
        }]
      }
    });

    // Mock useSelector implementation
    jest.spyOn(require('react-redux'), 'useSelector')
      .mockImplementation((callback) => callback({
        stages: {
          stages: [{
            stageId: 'FFD_1',
            stageInfo: {
              application: {
                channel_reference: 'test-ref'
              },
              applicants: []
            }
          }]
        }
      }));

    // Reset all mocks
    mockPostFulFilmentData.mockReset();
    mockNavigate.mockReset();
    mockDispatch.mockReset();
  });

  test('renders default spinner with Lottie animation', () => {
    render(
      <Provider store={store}>
        <Spinner />
      </Provider>
    );
    
    expect(screen.getByText('Lottie Animation')).toBeInTheDocument();
    expect(screen.getByText(/Processing your request/i)).toBeInTheDocument();
  });

  test('renders showTimmer spinner correctly', () => {
    render(
      <Provider store={store}>
        <Spinner loaderType="showTimmer" />
      </Provider>
    );
    
    expect(screen.getByText(/Thank you for your application/i)).toBeInTheDocument();
    expect(screen.getByText(/Please do not close or refresh browser/i)).toBeInTheDocument();
  });

  test('renders resumeTimmer spinner correctly', () => {
    render(
      <Provider store={store}>
        <Spinner loaderType="resumeTimmer" />
      </Provider>
    );
    
    expect(screen.getByText(/Resume application/i)).toBeInTheDocument();
  });

  test('renders lastStep spinner with button', () => {
    render(
      <Provider store={store}>
        <Spinner loaderType="lastStep" enable={true} />
      </Provider>
    );
    
    expect(screen.getByText(/You're at the last step!/i)).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /See final approval result/i })).toBeInTheDocument();
  });

  test('button in lastStep spinner is disabled when enable prop is false', () => {
    render(
      <Provider store={store}>
        <Spinner loaderType="lastStep" enable={false} />
      </Provider>
    );
    
    const button = screen.getByRole('button', { name: /See final approval result/i });
    expect(button).toBeDisabled();
  });

  test('clicking button in lastStep spinner triggers getFFD2Status', async () => {
    mockPostFulFilmentData.mockResolvedValue({
      status: 200,
      data: {
        application: {
          response_type: 'INFO',
          response_action: 'SUCCESS'
        },
        applicants: [{}]
      }
    });

    render(
      <Provider store={store}>
        <Spinner loaderType="lastStep" enable={true} />
      </Provider>
    );
    
    fireEvent.click(screen.getByRole('button', { name: /See final approval result/i }));
    
    expect(mockPostFulFilmentData).toHaveBeenCalled();
  });

  test('handles API error in getFFD2Status', async () => {
    mockPostFulFilmentData.mockRejectedValue(new Error('API Error'));

    render(
      <Provider store={store}>
        <Spinner loaderType="lastStep" enable={true} />
      </Provider>
    );
    
    fireEvent.click(screen.getByRole('button', { name: /See final approval result/i }));
    
    expect(mockPostFulFilmentData).toHaveBeenCalled();
    expect(mockDispatch).toHaveBeenCalled();
  });
});
