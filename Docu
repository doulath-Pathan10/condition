import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import OnboardingBeforeStart from './OnboardingBeforeStart';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Pdf from '../../../../shared/components/pdf/pdf';

// Mock the dependencies
jest.mock('../../../../shared/components/pdf/pdf', () => () => <div>Mock PDF Component</div>);
jest.mock('../../services/preApprovalServices', () => ({
  getData: jest.fn(),
  getPDFData: jest.fn(),
}));
jest.mock('../../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn(() => 'en'),
  },
}));
jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

describe('OnboardingBeforeStart Component', () => {
  const mockStore = configureStore();
  let store: any;
  const mockDispatch = jest.fn();
  const mockOnScrollEnd = jest.fn();
  const mockNextPage = jest.fn();

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'ad-9a',
          stageInfo: {
            products: [{
              campaign: 'HKPIL23PLSTP10'
            }]
          }
        }]
      },
      preApproval: {
        formConfigmetaData: {
          products: [{
            campaign: 'HKPIL23PLSTP10'
          }]
        }
      }
    });

    (useSelector as jest.Mock).mockImplementation((callback) => callback(store.getState()));
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);

    // Mock getData response
    const mockGetData = require('../../services/preApprovalServices').getData;
    mockGetData.mockResolvedValue({
      data: {
        products: {
          HKPIL23PLSTP10: [{ pdfURL: 'https://example.com/kfs.pdf' }]
        },
        productsMob: {
          HKPIL23PLSTP10: [{ pdfURL: 'https://example.com/kfs-mobile.pdf' }]
        },
        CampaignTnC: {
          HKPIL23PLSTP10: [{ pdfURL: 'https://example.com/tnc.pdf' }]
        },
        CampaignTnCMob: {
          HKPIL23PLSTP10: [{ pdfURL: 'https://example.com/tnc-mobile.pdf' }]
        },
        tncLinkCampaignCode: {
          HKPIL23PLSTP10: [{
            pdfLinks: [
              { Title: 'II. Personal Loan Terms', url: 'https://example.com/loan-terms.pdf' },
              { Title: 'III. Client Terms', url: 'https://example.com/client-terms.pdf' }
            ]
          }]
        }
      }
    });

    // Mock getPDFData response
    const mockGetPDFData = require('../../services/preApprovalServices').getPDFData;
    mockGetPDFData.mockResolvedValue('mock-pdf-data');
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders spinner initially', () => {
    render(
      <Provider store={store}>
        <OnboardingBeforeStart 
          isVisible={true} 
          onScrollEnd={mockOnScrollEnd} 
          stageID={0} 
          nextPage={mockNextPage} 
        />
      </Provider>
    );
    
    expect(screen.getByTestId('spinner')).toBeInTheDocument();
  });

  it('renders PDF viewer for stage 0 after loading', async () => {
    render(
      <Provider store={store}>
        <OnboardingBeforeStart 
          isVisible={true} 
          onScrollEnd={mockOnScrollEnd} 
          stageID={0} 
          nextPage={mockNextPage} 
        />
      </Provider>
    );
    
    await waitFor(() => {
      expect(screen.getByText('Mock PDF Component')).toBeInTheDocument();
    });
  });

  it('renders terms and conditions table for stage 1', async () => {
    render(
      <Provider store={store}>
        <OnboardingBeforeStart 
          isVisible={true} 
          onScrollEnd={mockOnScrollEnd} 
          stageID={1} 
          nextPage={mockNextPage} 
        />
      </Provider>
    );
    
    await waitFor(() => {
      expect(screen.getByText('II. Personal Loan Terms')).toBeInTheDocument();
      expect(screen.getByText('III. Client Terms')).toBeInTheDocument();
    });
  });

  it('displays download button for KFS document', async () => {
    render(
      <Provider store={store}>
        <OnboardingBeforeStart 
          isVisible={true} 
          onScrollEnd={mockOnScrollEnd} 
          stageID={0} 
          nextPage={mockNextPage} 
        />
      </Provider>
    );
    
    await waitFor(() => {
      expect(screen.getByText('Download')).toBeInTheDocument();
    });
  });

  it('triggers download when download button is clicked', async () => {
    render(
      <Provider store={store}>
        <OnboardingBeforeStart 
          isVisible={true} 
          onScrollEnd={mockOnScrollEnd} 
          stageID={0} 
          nextPage={mockNextPage} 
        />
      </Provider>
    );
    
    await waitFor(() => {
      const downloadButton = screen.getByText('Download');
      fireEvent.click(downloadButton);
      
      // Verify that the download functionality was triggered
      expect(require('../../services/preApprovalServices').getPDFData).toHaveBeenCalled();
    });
  });

  it('shows scroll down button when isVisible is true', async () => {
    render(
      <Provider store={store}>
        <OnboardingBeforeStart 
          isVisible={true} 
          onScrollEnd={mockOnScrollEnd} 
          stageID={0} 
          nextPage={mockNextPage} 
        />
      </Provider>
    );
    
    await waitFor(() => {
      expect(screen.getByTestId('next-arrow')).toBeInTheDocument();
    });
  });

  it('shows accept button when isVisible is false', async () => {
    render(
      <Provider store={store}>
        <OnboardingBeforeStart 
          isVisible={false} 
          onScrollEnd={mockOnScrollEnd} 
          stageID={0} 
          nextPage={mockNextPage} 
        />
      </Provider>
    );
    
    await waitFor(() => {
      expect(screen.getByText('Accept')).toBeInTheDocument();
    });
  });

  it('calls nextPage when accept button is clicked', async () => {
    render(
      <Provider store={store}>
        <OnboardingBeforeStart 
          isVisible={false} 
          onScrollEnd={mockOnScrollEnd} 
          stageID={0} 
          nextPage={mockNextPage} 
        />
      </Provider>
    );
    
    await waitFor(() => {
      const acceptButton = screen.getByText('Accept');
      fireEvent.click(acceptButton);
      expect(mockNextPage).toHaveBeenCalled();
    });
  });

  it('handles PDF download for different campaign types', async () => {
    // Test for PIL campaign
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'ad-9a',
          stageInfo: {
            products: [{
              campaign: 'HKPIL23PLSTP10'
            }]
          }
        }]
      },
      preApproval: {
        formConfigmetaData: {
          products: [{
            campaign: 'HKPIL23PLSTP10'
          }]
        }
      }
    });

    render(
      <Provider store={store}>
        <OnboardingBeforeStart 
          isVisible={true} 
          onScrollEnd={mockOnScrollEnd} 
          stageID={1} 
          nextPage={mockNextPage} 
        />
      </Provider>
    );
    
    await waitFor(() => {
      const downloadLinks = screen.getAllByText('Download');
      fireEvent.click(downloadLinks[0]);
      // Verify the correct PDF was selected for download
    });
  });

  it('handles Chinese language content', async () => {
    // Mock Chinese language
    require('../../../../utils/common/change.utils').getUrl.getLanguageInfo.mockReturnValue('zh');
    
    render(
      <Provider store={store}>
        <OnboardingBeforeStart 
          isVisible={false} 
          onScrollEnd={mockOnScrollEnd} 
          stageID={0} 
          nextPage={mockNextPage} 
        />
      </Provider>
    );
    
    await waitFor(() => {
      expect(screen.getByText('接受')).toBeInTheDocument(); // Chinese text for "Accept"
    });
  });

  it('handles mobile user agent correctly', async () => {
    // Mock mobile user agent
    Object.defineProperty(window.navigator, 'userAgent', {
      value: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15',
      writable: true
    });

    render(
      <Provider store={store}>
        <OnboardingBeforeStart 
          isVisible={true} 
          onScrollEnd={mockOnScrollEnd} 
          stageID={0} 
          nextPage={mockNextPage} 
        />
      </Provider>
    );
    
    await waitFor(() => {
      // Verify mobile-specific behavior
      expect(require('../../services/preApprovalServices').getData).toHaveBeenCalledWith(expect.any(String));
    });
  });

  it('calls onScrollEnd when scrolled to bottom', async () => {
    const { container } = render(
      <Provider store={store}>
        <OnboardingBeforeStart 
          isVisible={true} 
          onScrollEnd={mockOnScrollEnd} 
          stageID={0} 
          nextPage={mockNextPage} 
        />
      </Provider>
    );
    
    await waitFor(() => {
      const scrollContainer = container.querySelector('.react-pdf__Page__canvas');
      if (scrollContainer) {
        // Simulate scroll to bottom
        fireEvent.scroll(scrollContainer, { target: { scrollTop: 1000, scrollHeight: 1000, clientHeight: 500 } });
        expect(mockOnScrollEnd).toHaveBeenCalledWith(false);
      }
    });
  });
});
