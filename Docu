import React from 'react';
import { render, screen, fireEvent, waitFor, act } from '@testing-library/react';
import OnboardingBeforeStart from './OnboardingBeforeStart';
import { getData, getPDFData } from '../../services/preApprovalServices';
import { useDispatch, useSelector } from 'react-redux';
import { getUrl } from '../../../../utils/common/change.utils';
import { CONSTANTS } from '../../../../utils/common/constants';
import * as preApprovalAction from '../../actions/preApprovalAction';

// Mock all external dependencies
jest.mock('../../services/preApprovalServices');
jest.mock('react-redux');
jest.mock('../../../../utils/common/change.utils');
jest.mock('../../../../utils/common/constants');

// Mock components
jest.mock('../../../../shared/components/pdf/pdf', () => () => <div>Mock PDF</div>);
jest.mock('../../../../shared/components/spinner/spinner', () => () => <div>Loading...</div>);

describe('OnboardingBeforeStart Component', () => {
  const mockDispatch = jest.fn();
  const mockOnScrollEnd = jest.fn();
  const mockNextPage = jest.fn();

  const mockStore = {
    stages: {
      stages: [{
        stageId: 'some-stage',
        stageInfo: {
          products: [{
            campaign: 'HKPIL23PLSTP10'
          }]
        }
      }]
    },
    preApproval: {
      formConfigmetaData: {
        products: [{
          campaign: 'HKPIL23PLSTP10'
        }]
      },
      kfsDocumentPdf: 'mock-kfs-pdf',
      tandCDocumentPdf: 'mock-tnc-pdf',
      downloadPDFData: 'mock-pdf-data'
    }
  };

  // Mock window properties
  const originalWindowLocation = window.location;
  const originalNavigator = window.navigator;

  beforeAll(() => {
    Object.defineProperty(window, 'location', {
      configurable: true,
      value: { ...originalWindowLocation, host: 'example.com' }
    });
    Object.defineProperty(window, 'navigator', {
      configurable: true,
      value: { ...originalNavigator, userAgent: 'Mozilla/5.0' }
    });
  });

  afterAll(() => {
    Object.defineProperty(window, 'location', {
      configurable: true,
      value: originalWindowLocation
    });
    Object.defineProperty(window, 'navigator', {
      configurable: true,
      value: originalNavigator
    });
  });

  beforeEach(() => {
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    (useSelector as jest.Mock).mockImplementation((selector) => selector(mockStore));
    (getUrl.getLanguageInfo as jest.Mock).mockReturnValue('en');
    (CONSTANTS as any) = {
      LANG_EN: 'en',
      LANG_CN: 'zh',
      LANG_HK: 'hk',
      DownloadBtn: 'Download',
      DownloadBtn_CN: '下载',
      DownloadBtn_HK: '下載',
      DownloadHeader: 'Download Documents',
      DownloadHeader_CN: '下载文件',
      DownloadHeader_HK: '下載文件',
      ReadBtn: 'Read',
      ReadBtn_CN: '阅读',
      ReadBtn_HK: '閱讀',
      Remarks: 'Important Remarks',
      Remarks_CN: '重要备注',
      Remarks_HK: '重要備註',
      acceptButton: 'Accept',
      acceptButton_CN: '接受',
      acceptButton_HK: '接受'
    };
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  const setupComponent = (props = {}) => {
    const defaultProps = {
      isVisible: true,
      onScrollEnd: mockOnScrollEnd,
      stageID: 0,
      nextPage: mockNextPage,
      ...props
    };
    return render(<OnboardingBeforeStart {...defaultProps} />);
  };

  // Test cases for initial rendering and data fetching
  describe('Initial Rendering and Data Fetching', () => {
    it('should render loading spinner initially', () => {
      setupComponent();
      expect(screen.getByText('Loading...')).toBeInTheDocument();
    });

    it('should fetch KFS document for stage 0', async () => {
      (getData as jest.Mock).mockResolvedValue({
        data: {
          productsMob: { HKPIL23PLSTP10: [{ pdfURL: 'https://pt.sc.com/mobile-pdf' }] },
          products: { HKPIL23PLSTP10: [{ pdfURL: 'https://pt.sc.com/desktop-pdf' }] },
          tncLinkCampaignCode: {}
        }
      });
      (getPDFData as jest.Mock).mockResolvedValue('mock-pdf-data');

      await act(async () => {
        setupComponent({ stageID: 0 });
      });

      await waitFor(() => {
        expect(getData).toHaveBeenCalledWith(process.env.REACT_APP_KFS_DOC_URL);
        expect(getPDFData).toHaveBeenCalledWith('https://pt.sc.com/desktop-pdf');
        expect(mockDispatch).toHaveBeenCalledWith(preApprovalAction.setLoader(true));
        expect(mockDispatch).toHaveBeenCalledWith(preApprovalAction.setKfsDocumentPdf('mock-pdf-data'));
        expect(mockDispatch).toHaveBeenCalledWith(preApprovalAction.setLoader(false));
        expect(mockOnScrollEnd).toHaveBeenCalledWith(true);
      });
    });

    it('should fetch mobile KFS document when on mobile device', async () => {
      Object.defineProperty(window.navigator, 'userAgent', {
        value: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)',
        writable: true
      });

      (getData as jest.Mock).mockResolvedValue({
        data: {
          productsMob: { HKPIL23PLSTP10: [{ pdfURL: 'https://pt.sc.com/mobile-pdf' }] },
          products: { HKPIL23PLSTP10: [{ pdfURL: 'https://pt.sc.com/desktop-pdf' }] },
          tncLinkCampaignCode: {}
        }
      });

      await act(async () => {
        setupComponent({ stageID: 0 });
      });

      await waitFor(() => {
        expect(getPDFData).toHaveBeenCalledWith('https://pt.sc.com/mobile-pdf');
      });
    });

    it('should handle localhost URL replacement for PDFs', async () => {
      Object.defineProperty(window, 'location', {
        value: { ...window.location, host: 'localhost:3000' }
      });

      (getData as jest.Mock).mockResolvedValue({
        data: {
          productsMob: { HKPIL23PLSTP10: [{ pdfURL: 'https://pt.sc.com/mobile-pdf' }] },
          products: { HKPIL23PLSTP10: [{ pdfURL: 'https://pt.sc.com/desktop-pdf' }] },
          tncLinkCampaignCode: {}
        }
      });

      await act(async () => {
        setupComponent({ stageID: 0 });
      });

      await waitFor(() => {
        expect(getPDFData).toHaveBeenCalledWith('http://localhost:3000/desktop-pdf');
      });
    });

    it('should fetch T&C document for stage 1', async () => {
      (getData as jest.Mock).mockResolvedValue({
        data: {
          CampaignTnCMob: { HKPIL23PLSTP10: [{ pdfURL: 'https://pt.sc.com/mobile-tnc' }] },
          CampaignTnC: { HKPIL23PLSTP10: [{ pdfURL: 'https://pt.sc.com/desktop-tnc' }] },
          tncLinkCampaignCode: {
            HKPIL23PLSTP10: [{
              pdfLinks: [
                { Title: 'II. Personal Loan Terms', url: 'mock-url-1' },
                { Title: 'III. Client Terms', url: 'mock-url-2' }
              ]
            }]
          }
        }
      });

      await act(async () => {
        setupComponent({ stageID: 1 });
      });

      await waitFor(() => {
        expect(getPDFData).toHaveBeenCalledWith('https://pt.sc.com/desktop-tnc');
        expect(mockDispatch).toHaveBeenCalledWith(
          preApprovalAction.setTandCDocumentPdf('mock-pdf-data')
        );
      });
    });

    it('should fetch Chinese language documents when language is zh', async () => {
      (getUrl.getLanguageInfo as jest.Mock).mockReturnValue('zh');
      (getData as jest.Mock).mockResolvedValue({
        data: {
          productsMob: { HKPIL23PLSTP10: [{ pdfURL: 'https://pt.sc.com/mobile-pdf' }] },
          products: { HKPIL23PLSTP10: [{ pdfURL: 'https://pt.sc.com/desktop-pdf' }] },
          tncLinkCampaignCode: {}
        }
      });

      await act(async () => {
        setupComponent({ stageID: 0 });
      });

      await waitFor(() => {
        expect(getData).toHaveBeenCalledWith(process.env.REACT_APP_KFS_DOC_URL_Chinees);
      });
    });

    it('should not fetch data if PDF is already in store', async () => {
      const storeWithPDF = {
        ...mockStore,
        preApproval: {
          ...mockStore.preApproval,
          kfsDocumentPdf: 'already-loaded-pdf'
        }
      };
      (useSelector as jest.Mock).mockImplementation((selector) => selector(storeWithPDF));

      await act(async () => {
        setupComponent({ stageID: 0 });
      });

      await waitFor(() => {
        expect(getData).not.toHaveBeenCalled();
        expect(screen.getByText('Mock PDF')).toBeInTheDocument();
      });
    });
  });

  // Test cases for PDF download functionality
  describe('PDF Download Functionality', () => {
    beforeEach(() => {
      (getData as jest.Mock).mockResolvedValue({
        data: {
          productsMob: { HKPIL23PLSTP10: [{ pdfURL: 'https://pt.sc.com/mobile-pdf' }] },
          products: { HKPIL23PLSTP10: [{ pdfURL: 'https://pt.sc.com/desktop-pdf' }] },
          tncLinkCampaignCode: {
            HKPIL23PLSTP10: [{
              pdfLinks: [
                { Title: 'II. Personal Loan Terms', url: 'mock-url-1' },
                { Title: 'III. Client Terms', url: 'mock-url-2' }
              ]
            }]
          }
        }
      });
      (getPDFData as jest.Mock).mockResolvedValue('mock-pdf-data');
    });

    it('should download KFS PDF when download button is clicked', async () => {
      const createElementSpy = jest.spyOn(document, 'createElement').mockReturnValue({
        href: '',
        download: '',
        click: jest.fn(),
        setAttribute: jest.fn(),
        style: {}
      } as any);
      const appendChildSpy = jest.spyOn(document.body, 'appendChild');
      const removeChildSpy = jest.spyOn(document.body, 'removeChild');

      await act(async () => {
        setupComponent({ stageID: 0 });
      });

      await waitFor(() => {
        const downloadButton = screen.getByText('Download');
        fireEvent.click(downloadButton);

        expect(createElementSpy).toHaveBeenCalledWith('a');
        expect(appendChildSpy).toHaveBeenCalled();
        expect(removeChildSpy).toHaveBeenCalled();
      });
    });

    it('should handle Safari browser for PDF download', async () => {
      Object.defineProperty(window.navigator, 'userAgent', {
        value: 'Safari',
        writable: true
      });

      window.open = jest.fn();

      await act(async () => {
        setupComponent({ stageID: 0 });
      });

      await waitFor(() => {
        const downloadButton = screen.getByText('Download');
        fireEvent.click(downloadButton);
        expect(window.open).toHaveBeenCalledWith('mock-kfs-pdf', '_blank');
      });
    });

    it('should download terms PDF when download link is clicked (PIL campaign)', async () => {
      const createElementSpy = jest.spyOn(document, 'createElement').mockReturnValue({
        href: '',
        download: '',
        click: jest.fn(),
        setAttribute: jest.fn(),
        style: {}
      } as any);

      await act(async () => {
        setupComponent({ stageID: 1 });
      });

      await waitFor(() => {
        const downloadLinks = screen.getAllByText('Download');
        fireEvent.click(downloadLinks[0]);
        expect(createElementSpy).toHaveBeenCalled();
      });
    });

    it('should download terms PDF when download link is clicked (CC campaign)', async () => {
      const ccMockStore = {
        ...mockStore,
        stages: {
          stages: [{
            stageId: 'some-stage',
            stageInfo: {
              products: [{
                campaign: 'HKSOG20VAWV000'
              }]
            }
          }]
        },
        preApproval: {
          formConfigmetaData: {
            products: [{
              campaign: 'HKSOG20VAWV000'
            }]
          }
        }
      };

      (useSelector as jest.Mock).mockImplementation((selector) => selector(ccMockStore));

      (getData as jest.Mock).mockResolvedValue({
        data: {
          CampaignTnCMob: { HKSOG20VAWV000: [{ pdfURL: 'https://pt.sc.com/mobile-tnc' }] },
          CampaignTnC: { HKSOG20VAWV000: [{ pdfURL: 'https://pt.sc.com/desktop-tnc' }] },
          tncLinkCampaignCode: {
            HKSOG20VAWV000: [{
              pdfLinks: [
                { Title: 'III. Client Terms', url: 'mock-url-1' },
                { Title: 'III. Credit Card Terms', url: 'mock-url-2' }
              ]
            }]
          }
        }
      });

      const createElementSpy = jest.spyOn(document, 'createElement').mockReturnValue({
        href: '',
        download: '',
        click: jest.fn(),
        setAttribute: jest.fn(),
        style: {}
      } as any);

      await act(async () => {
        setupComponent({ stageID: 1 });
      });

      await waitFor(() => {
        const downloadLinks = screen.getAllByText('Download');
        fireEvent.click(downloadLinks[0]); // III. Client Terms
        fireEvent.click(downloadLinks[1]); // III. Credit Card Terms
        expect(createElementSpy).toHaveBeenCalledTimes(2);
      });
    });
  });

  // Test cases for scroll behavior
  describe('Scroll Behavior', () => {
    it('should call onScrollEnd when scrolled to bottom', async () => {
      const mockRef = {
        current: {
          addEventListener: jest.fn((event, callback) => {
            if (event === 'scroll') {
              // Simulate scroll event
              setTimeout(() => callback(), 100);
            }
          }),
          removeEventListener: jest.fn(),
          scrollTop: 100,
          scrollHeight: 200,
          clientHeight: 100
        }
      };

      jest.spyOn(React, 'useRef').mockReturnValue(mockRef);

      await act(async () => {
        setupComponent({ stageID: 0 });
        await new Promise(resolve => setTimeout(resolve, 150));
      });

      expect(mockOnScrollEnd).toHaveBeenCalledWith(false);
    });

    it('should scroll down when footer button is clicked (stage 0)', async () => {
      const mockScrollBy = jest.fn();
      const mockRef = {
        current: {
          addEventListener: jest.fn(),
          removeEventListener: jest.fn(),
          scrollBy: mockScrollBy
        }
      };

      jest.spyOn(React, 'useRef').mockReturnValue(mockRef);

      await act(async () => {
        setupComponent({ stageID: 0, isVisible: true });
      });

      await waitFor(() => {
        const scrollButton = screen.getByRole('button', { name: /scroll/i });
        fireEvent.click(scrollButton);
        expect(mockScrollBy).toHaveBeenCalledWith({ top: 200, behavior: 'smooth' });
      });
    });

    it('should scroll down when footer button is clicked (stage 1)', async () => {
      const mockScrollBy = jest.fn();
      const mockRef = {
        current: {
          addEventListener: jest.fn(),
          removeEventListener: jest.fn(),
          scrollBy: mockScrollBy
        }
      };

      jest.spyOn(React, 'useRef').mockReturnValue(mockRef);

      await act(async () => {
        setupComponent({ stageID: 1, isVisible: true });
      });

      await waitFor(() => {
        const scrollButton = screen.getByRole('button', { name: /scroll/i });
        fireEvent.click(scrollButton);
        expect(mockScrollBy).toHaveBeenCalledWith({ top: 5000, behavior: 'smooth' });
      });
    });

    it('should show accept button when not visible and call nextPage on click', async () => {
      await act(async () => {
        setupComponent({ isVisible: false });
      });

      await waitFor(() => {
        const acceptButton = screen.getByText('Accept');
        fireEvent.click(acceptButton);
        expect(mockNextPage).toHaveBeenCalled();
      });
    });

    it('should clean up event listeners on unmount', () => {
      const mockRemoveEventListener = jest.fn();
      const mockRef = {
        current: {
          addEventListener: jest.fn(),
          removeEventListener: mockRemoveEventListener,
          scrollBy: jest.fn()
        }
      };

      jest.spyOn(React, 'useRef').mockReturnValue(mockRef);

      const { unmount } = setupComponent();

      unmount();

      expect(mockRemoveEventListener).toHaveBeenCalledWith('scroll', expect.any(Function));
    });
  });

  // Test cases for language handling
  describe('Language Handling', () => {
    it('should display English text by default', async () => {
      (getUrl.getLanguageInfo as jest.Mock).mockReturnValue('en');
      
      await act(async () => {
        setupComponent({ stageID: 1 });
      });

      await waitFor(() => {
        expect(screen.getByText('Download Documents')).toBeInTheDocument();
        expect(screen.getByText('Read')).toBeInTheDocument();
        expect(screen.getByText('Download')).toBeInTheDocument();
        expect(screen.getByText('Important Remarks')).toBeInTheDocument();
        expect(screen.getByText('Accept')).toBeInTheDocument();
      });
    });

    it('should display Chinese text when language is zh', async () => {
      (getUrl.getLanguageInfo as jest.Mock).mockReturnValue('zh');
      
      await act(async () => {
        setupComponent({ stageID: 1 });
      });

      await waitFor(() => {
        expect(screen.getByText('下载文件')).toBeInTheDocument();
        expect(screen.getByText('阅读')).toBeInTheDocument();
        expect(screen.getByText('下载')).toBeInTheDocument();
        expect(screen.getByText('重要备注')).toBeInTheDocument();
        expect(screen.getByText('接受')).toBeInTheDocument();
      });
    });

    it('should display Hong Kong text when language is hk', async () => {
      (getUrl.getLanguageInfo as jest.Mock).mockReturnValue('hk');
      
      await act(async () => {
        setupComponent({ stageID: 1 });
      });

      await waitFor(() => {
        expect(screen.getByText('下載文件')).toBeInTheDocument();
        expect(screen.getByText('閱讀')).toBeInTheDocument();
        expect(screen.getByText('下載')).toBeInTheDocument();
        expect(screen.getByText('重要備註')).toBeInTheDocument();
        expect(screen.getByText('接受')).toBeInTheDocument();
      });
    });
  });

  // Test cases for error handling
  describe('Error Handling', () => {
    it('should handle API errors gracefully', async () => {
      (getData as jest.Mock).mockRejectedValue(new Error('API Error'));

      await act(async () => {
        setupComponent({ stageID: 0 });
      });

      await waitFor(() => {
        expect(mockDispatch).toHaveBeenCalledWith(preApprovalAction.setLoader(false));
      });
    });

    it('should handle empty PDF links', async () => {
      (getData as jest.Mock).mockResolvedValue({
        data: {
          productsMob: { HKPIL23PLSTP10: [] },
          products: { HKPIL23PLSTP10: [] },
          tncLinkCampaignCode: {}
        }
      });

      await act(async () => {
        setupComponent({ stageID: 0 });
      });

      await waitFor(() => {
        expect(mockDispatch).toHaveBeenCalledWith(preApprovalAction.setLoader(false));
      });
    });

    it('should handle empty campaign data', async () => {
      const emptyStore = {
        stages: {
          stages: [{
            stageId: 'some-stage',
            stageInfo: {
              products: []
            }
          }]
        },
        preApproval: {
          formConfigmetaData: {
            products: []
          }
        }
      };
      (useSelector as jest.Mock).mockImplementation((selector) => selector(emptyStore));

      await act(async () => {
        setupComponent({ stageID: 0 });
      });

      await waitFor(() => {
        expect(mockDispatch).toHaveBeenCalledWith(preApprovalAction.setLoader(false));
      });
    });

    it('should handle missing PDF data in store', async () => {
      const storeWithoutPDF = {
        ...mockStore,
        preApproval: {
          ...mockStore.preApproval,
          kfsDocumentPdf: null,
          tandCDocumentPdf: null
        }
      };
      (useSelector as jest.Mock).mockImplementation((selector) => selector(storeWithoutPDF));

      (getData as jest.Mock).mockResolvedValue({
        data: {
          productsMob: { HKPIL23PLSTP10: [{ pdfURL: 'https://pt.sc.com/mobile-pdf' }] },
          products: { HKPIL23PLSTP10: [{ pdfURL: 'https://pt.sc.com/desktop-pdf' }] },
          tncLinkCampaignCode: {}
        }
      });

      await act(async () => {
        setupComponent({ stageID: 0 });
      });

      await waitFor(() => {
        expect(getData).toHaveBeenCalled();
      });
    });
  });

  // Test cases for component rendering based on stageID
  describe('Component Rendering Based on StageID', () => {
    it('should render KFS document viewer for stage 0', async () => {
      await act(async () => {
        setupComponent({ stageID: 0 });
      });

      await waitFor(() => {
        expect(screen.getByText('Mock PDF')).toBeInTheDocument();
        expect(screen.getByText('Download')).toBeInTheDocument();
      });
    });

    it('should render T&C document viewer for stage 1', async () => {
      (getData as jest.Mock).mockResolvedValue({
        data: {
          CampaignTnCMob: { HKPIL23PLSTP10: [{ pdfURL: 'https://pt.sc.com/mobile-tnc' }] },
          CampaignTnC: { HKPIL23PLSTP10: [{ pdfURL: 'https://pt.sc.com/desktop-tnc' }] },
          tncLinkCampaignCode: {
            HKPIL23PLSTP10: [{
              pdfLinks: [
                { Title: 'II. Personal Loan Terms', url: 'mock-url-1' },
                { Title: 'III. Client Terms', url: 'mock-url-2' }
              ]
            }]
          }
        }
      });

      await act(async () => {
        setupComponent({ stageID: 1 });
      });

      await waitFor(() => {
        expect(screen.getByText('Mock PDF')).toBeInTheDocument();
        expect(screen.getAllByText('Download').length).toBeGreaterThan(1);
      });
    });
  });
});
