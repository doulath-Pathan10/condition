import "./review-page.scss";
import { KeyWithAnyModel } from "../../../utils/model/common-model";
import Cards from "../../../shared/components/cards/cards";
import { useEffect, useState, useRef } from "react";
import { useDispatch, useSelector } from "react-redux";
import { StoreModel } from "../../../utils/model/common-model";
import ReviewPageInterestDetails from "./review-page-interest-details";
import Close from "../../../shared/components/close/close";
import PopupModel from "../../../shared/components/popup-model/popup-model";
import HeaderModel from "../../../shared/components/header-ref/header-modal";
import { getUrl } from "../../../utils/common/change.utils";
import { CONSTANTS } from "../../../utils/common/constants";
import { preApprovalAction } from "../../preApproval/store/preApproval-slice";
import { getPDFData } from "../../preApproval/services/preApprovalServices";
import HK_IntergratedDeposit from '../../../assets/pdf-file/HK_Integrated_deposit.pdf';

const ReviewPage = (props: KeyWithAnyModel) => {
  const language = getUrl.getLanguageInfo("lang");
  const [openpopup, setOpenpop] = useState(false);
  const [openpopupIntegrated, setOpenpopIntegrated] = useState(false);
  const [isChecked, setIsChecked] = useState(false);
  const [visibleButton, setVisibleButton] = useState(false);
  const handleCheckboxChange = () => {
    setIsChecked(!isChecked);
  };
  const listInnerRef = useRef<HTMLDivElement>(null);
  const downloadPdfData = useSelector((state: StoreModel) => state.preApproval.downloadPdfData);
  console.log(downloadPdfData,'dwnloadOdfdata')
  const stageSelector = useSelector((state: StoreModel) => state.stages.stages);
  const productCategory = stageSelector[0].stageInfo.products[0].product_category;
  const productType = stageSelector[0].stageInfo?.products[0].product_type;
  const integrated_deposit_id = document.getElementById('integrated-deposit-pdf')
  const dispatch = useDispatch();

  const downloadPDF = () => {
    const fileName: any = downloadPdfData.split('/').pop();
    const replaceFile = stageSelector[0].stageInfo?.products[0].campaign === 'HKBDC23PESTP10' ? fileName.replace(fileName, 'DC_KFS_Desktop_0421_E.pdf') // DC PDF
    : (stageSelector[0].stageInfo?.products[0].campaign === 'HKPIL23PLSTP10'? fileName.replace(fileName, 'PIL_KFS_Desktop_0421_E.pdf'): // PIL PDF
     (stageSelector[0].stageInfo?.products[0].campaign === 'HKSOG20VAWV000'? fileName.replace(fileName, 'SCB_SMART_KFS_Desktop_0421_E.pdf') : // Smart card PDF
     ((stageSelector[0].stageInfo?.products[0].campaign === 'HKSPB17VAWV000' || stageSelector[0].stageInfo?.products[0].campaign === 'HKSPG17VAWV000') ? fileName.replace(fileName, 'SCB_SC_KFS_Desktop_0421_E.pdf'): // simply cash pdf
     ((stageSelector[0].stageInfo?.products[0].campaign === 'HKSOA16VAWP000' || stageSelector[0].stageInfo?.products[0].campaign === 'HKSOA16MCWP000') ? fileName.replace(fileName, 'SCB_PLAT_KFS_Desktop_0421_E.pdf'): // core platinum pdf
     "")
    )
    )
    )
    const replaceFilename = replaceFile;
    const lin = document.createElement('a');
    lin.href = downloadPdfData;
    lin.download = replaceFilename;
    lin.click();
  };

    const viewPDF = (link: any) => { 
      setOpenpop(true); 
    };
    const viewIntegratedDepositPDF = () => {
      setOpenpopIntegrated(true);
    }
    const viewIntegratedDepositPDFClose = () => {
      setOpenpopIntegrated(false);
    }
  const closepdf = () => {
    setOpenpop(false);
  }
console.log(stageSelector[0].stageInfo,'stagesel')
  const popUpHeader = () => {
    if(productCategory == "PL") {
      if(language === CONSTANTS.LANG_CN) {
        return "條款及細則, 私人貸款開戶聲明"
      } else {
        return "Terms & Conditions , Personal Loan Application Declaration"
      }
    }
    else {
      if(language === CONSTANTS.LANG_CN) {
        return "條款及細則 ,信用卡開戶聲明"
      } else {
        return "Terms & Conditions , Credit Card Application Declaration"
      }
    }
  }

  const popUpFooter = () => {
    if(language === CONSTANTS.LANG_CN) {
      return "點以下連結參閲相關部份的條款及細則"
    } else {
      return "Tap below to read full T&C of relevant section:"
    }
  }


  const btnClickScroll = () => {
    listInnerRef.current?.scrollBy({ top: 1500, behavior: "smooth" });
  };

  const scrollToBottom = () => {
    if (listInnerRef.current) {
      const { scrollTop, scrollHeight, clientHeight } = listInnerRef.current;
      const isNearBottom = scrollTop + clientHeight >= scrollHeight - 50;

      if (isNearBottom) {
        setVisibleButton(true);
      }
    }
  };

  useEffect(() => {
    const listInnerElement = listInnerRef.current;
    setVisibleButton(false);
    if (listInnerElement) {
      listInnerElement.addEventListener("scroll", scrollToBottom);
      return () => {
        listInnerElement.removeEventListener("scroll", scrollToBottom);
      };
    }
  }, []);
  
  useEffect(() => {
    if(props.confirmCheckboxStatus){
    props.confirmCheckboxStatus(isChecked);
    }
  }, [isChecked]);

  return (
    <>
      <div>
        <div className="review__content">
          <div className="field__group agree_submit" style={{width: '98%'}}>
            <div
              className="pending__resume-header banner_ext"
              style={{ margin: 0 }}
            >
              <div
                className="header-wrapper-hk"
                style={{ display: "flex", padding: 0 }}
              >
                <div className="hk-banner">
                  <span className="banner-icon banner-icon-mobile"></span>
                  {productCategory == "CC" ?
                  <div className="card-title review-card-title">
                    {language === CONSTANTS.LANG_EN ? CONSTANTS.justOneStep : language === CONSTANTS.LANG_CN?CONSTANTS.justOneStep_CN : CONSTANTS.justOneStep_HK}
                  </div> :
                  <div className="card-title review-card-title">
                  {language === CONSTANTS.LANG_EN ? CONSTANTS.justOneClick : language === CONSTANTS.LANG_CN?CONSTANTS.justOneClick_CN : CONSTANTS.justOneClick_HK}
                </div>}
                </div>
              </div>
              <Close authType="resume" />
            </div>
            <div className="agree_submit_buttons">
              {!visibleButton && (
                <footer
                  className="footer-next enabled"
                  onClick={btnClickScroll}
                  style={{ float: "right" }}
                >
                  <i className="next-btn"></i>
                </footer>
              )}
            </div>
          </div>
          <div className="review_scroll_content">
            <div className="review__content--body review_scroll"  ref={listInnerRef}>
              <Cards fields={props.fields} />
              <ReviewPageInterestDetails
                handleCheckboxChange={handleCheckboxChange}
                isChecked={isChecked}
                viewPDF={ viewPDF}
                viewIntegratedDepositPDF={viewIntegratedDepositPDF}
                downloadPDF={downloadPDF}
              />
              <div className="hk_copyrights">
                <p>{language === CONSTANTS.LANG_EN ? CONSTANTS.scbHkCopyRights_EN : language === CONSTANTS.LANG_CN?CONSTANTS.scbHkCopyRights_CN : CONSTANTS.scbHkCopyRights_HK}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
      {(openpopup) && (
        <PopupModel displayPopup={openpopup}>
          {openpopup &&
          <div className="reviewRead">
            <HeaderModel fileName={downloadPdfData} closepdf={closepdf} title={popUpHeader()} footer={popUpFooter()} />
            </div>
          }
        </PopupModel>
      )}
      {(openpopupIntegrated) && (
        <PopupModel displayPopup={openpopupIntegrated}>
          {openpopupIntegrated &&
          <div className="reviewRead">
            <HeaderModel fileName={HK_IntergratedDeposit} closepdf={viewIntegratedDepositPDFClose} title={'Integrated Deposits Account and Banking Plan Terms and Conditions'} footer={popUpFooter()} />
            </div>
          }
        </PopupModel>
      )}
    </>
  );
};

export default ReviewPage;


Please write an test cases using react and jest including branches with 100 percent coverage
