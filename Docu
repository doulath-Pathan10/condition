import React from 'react';
import { render, screen, waitFor, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import HeaderModel from './HeaderModel';
import { getData, getPDFData } from '../../../modules/preApproval/services/preApprovalServices';
import { getUrl } from '../../../utils/common/change.utils';
import { dispatchLoader } from '../../../services/common-service';
import { preApprovalAction } from '../../../modules/preApproval/store/preApproval-slice';

// Mock the dependencies
jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn()
  }
}));

jest.mock('../../../modules/preApproval/services/preApprovalServices', () => ({
  getData: jest.fn(),
  getPDFData: jest.fn()
}));

jest.mock('../../../services/common-service', () => ({
  dispatchLoader: jest.fn()
}));

jest.mock('../pdf/pdf', () => {
  return function MockPdf({ fileName }: { fileName: string }) {
    return <div data-testid="mock-pdf" className="mock-pdf">{fileName}</div>;
  };
});

// Mock Redux store
const mockDispatch = jest.fn();
jest.mock('react-redux', () => ({
  useSelector: jest.fn(),
  useDispatch: () => mockDispatch
}));

// Mock process.env
const originalEnv = process.env;
beforeEach(() => {
  jest.resetModules();
  process.env = {
    ...originalEnv,
    REACT_APP_KFS_DOC_URL: 'http://mock-kfs-doc-url',
    REACT_APP_KFS_DOC_URL_Chinees: 'http://mock-kfs-doc-url-chinese'
  };
});

afterEach(() => {
  process.env = originalEnv;
  jest.clearAllMocks();
});

// Mock window.innerWidth
Object.defineProperty(window, 'innerWidth', {
  writable: true,
  value: 1024
});

// Mock window.location
Object.defineProperty(window, 'location', {
  value: {
    host: 'test.sc.com'
  },
  writable: true
});

// Mock URL global
global.URL = jest.fn().mockImplementation((url) => ({
  pathname: `/path/to/${url}`,
  url: url
})) as any;

describe('HeaderModel Component', () => {
  // Mock data
  const mockProps = {
    fileName: 'test-file.pdf',
    closepdf: jest.fn(),
    title: 'Test Title',
    footer: 'Test Footer'
  };

  const mockTermsProps = {
    ...mockProps,
    title: 'Terms & Conditions , Credit Card Application Declaration'
  };

  const mockFormConfigData = {
    products: [{ campaign: 'test-campaign' }]
  };

  const mockResponseData = {
    data: {
      products: {
        'test-campaign': [{ pdfURL: 'https://pt.sc.com/path/to/document.pdf' }]
      },
      productsMob: {
        'test-campaign': [{ pdfURL: 'https://pt.sc.com/path/to/mobile-document.pdf' }]
      },
      tncLinkCampaignCode: {
        'test-campaign': [{
          pdfLinks: [
            { Title: 'Document 1', url: 'https://example.com/doc1.pdf' },
            { Title: 'Document 2', url: 'https://example.com/doc2.pdf' }
          ]
        }],
        isCasa: [{
          pdfLinks: [
            { Title: 'Casa Document 1', url: 'https://example.com/casa-doc1.pdf' },
            { Title: 'Casa Document 2', url: 'https://example.com/casa-doc2.pdf' }
          ]
        }]
      }
    }
  };

  const mockPdfData = 'mock-pdf-data';

  const setupMocksDefault = () => {
    getUrl.getLanguageInfo.mockReturnValue('en');
    getData.mockResolvedValue(mockResponseData);
    getPDFData.mockResolvedValue(mockPdfData);
    
    const mockUseSelector = require('react-redux').useSelector;
    mockUseSelector.mockImplementation((selector) => selector({
      preApproval: {
        formConfigmetaData: mockFormConfigData
      }
    }));
  };

  test('renders without crashing', async () => {
    setupMocksDefault();
    
    render(
      <HeaderModel {...mockProps} />
    );
    
    expect(screen.getByText('Test Title')).toBeInTheDocument();
    expect(screen.getByTestId('mock-pdf')).toBeInTheDocument();
  });

  test('closes the modal when close button is clicked', async () => {
    setupMocksDefault();
    
    render(
      <HeaderModel {...mockProps} />
    );
    
    const closeButton = screen.getByRole('button', { name: '' });
    fireEvent.click(closeButton);
    
    expect(mockProps.closepdf).toHaveBeenCalledTimes(1);
  });

  test('fetches PDF data on component mount', async () => {
    setupMocksDefault();
    
    render(
      <HeaderModel {...mockProps} />
    );
    
    await waitFor(() => {
      expect(getData).toHaveBeenCalledWith('http://mock-kfs-doc-url');
      expect(getPDFData).toHaveBeenCalled();
      expect(mockDispatch).toHaveBeenCalledWith(preApprovalAction.setKfsDocumentPdf(mockPdfData));
      expect(mockDispatch).toHaveBeenCalledWith(dispatchLoader(false));
    });
  });

  test('renders footer when footer prop is provided', async () => {
    setupMocksDefault();
    
    render(
      <HeaderModel {...mockProps} />
    );
    
    expect(screen.getByText('Test Footer')).toBeInTheDocument();
  });

  test('uses Chinese KFS URL when language is set to Chinese', async () => {
    getUrl.getLanguageInfo.mockReturnValue('zh');
    getData.mockResolvedValue(mockResponseData);
    getPDFData.mockResolvedValue(mockPdfData);
    
    const mockUseSelector = require('react-redux').useSelector;
    mockUseSelector.mockImplementation((selector) => selector({
      preApproval: {
        formConfigmetaData: mockFormConfigData
      }
    }));
    
    render(
      <HeaderModel {...mockProps} />
    );
    
    await waitFor(() => {
      expect(getData).toHaveBeenCalledWith('http://mock-kfs-doc-url-chinese');
    });
  });

  test('fetches Terms & Conditions PDF links when title is Terms & Conditions', async () => {
    setupMocksDefault();
    
    render(
      <HeaderModel {...mockTermsProps} />
    );
    
    await waitFor(() => {
      // Check if we have two links rendered with correct titles
      const links = screen.getAllByRole('link');
      expect(links).toHaveLength(2);
      expect(links[0]).toHaveTextContent('Document 1');
      expect(links[1]).toHaveTextContent('Document 2');
    });
  });

  test('fetches isCasa PDF links when title is not Terms & Conditions', async () => {
    setupMocksDefault();
    
    render(
      <HeaderModel {...mockProps} />
    );
    
    await waitFor(() => {
      // Check if we have two links rendered with correct titles
      const links = screen.getAllByRole('link');
      expect(links).toHaveLength(2);
      expect(links[0]).toHaveTextContent('Casa Document 1');
      expect(links[1]).toHaveTextContent('Casa Document 2');
    });
  });

  test('handles localhost environment', async () => {
    setupMocksDefault();
    Object.defineProperty(window, 'location', {
      value: {
        host: 'localhost:3000'
      },
      writable: true
    });
    
    render(
      <HeaderModel {...mockProps} />
    );
    
    await waitFor(() => {
      expect(getPDFData).toHaveBeenCalledWith(expect.stringContaining('http://localhost:3000/'));
    });
  });

  test('handles mobile detection', async () => {
    setupMocksDefault();
    
    // Mock mobile environment
    Object.defineProperty(window, 'innerWidth', {
      writable: true,
      value: 375
    });
    
    Object.defineProperty(navigator, 'userAgent', {
      value: 'iphone',
      writable: true
    });
    
    Object.defineProperty(navigator, 'maxTouchPoints', {
      value: 5,
      writable: true
    });
    
    render(
      <HeaderModel {...mockProps} />
    );
    
    await waitFor(() => {
      // Should use mobile PDF URL
      expect(getPDFData).toHaveBeenCalledWith(expect.stringContaining('mobile-document.pdf'));
    });
  });

  test('passes fileName prop to Pdf component', async () => {
    setupMocksDefault();
    
    render(
      <HeaderModel {...mockProps} />
    );
    
    const pdfComponent = screen.getByTestId('mock-pdf');
    expect(pdfComponent).toHaveTextContent('test-file.pdf');
  });

  test('dispatches loader state when PDF data is loaded', async () => {
    setupMocksDefault();
    
    render(
      <HeaderModel {...mockProps} />
    );
    
    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalledWith(dispatchLoader(false));
    });
  });
});
