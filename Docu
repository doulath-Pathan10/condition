import React from 'react';
import { render, screen, fireEvent, waitFor, act } from '@testing-library/react';
import '@testing-library/jest-dom';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import { BrowserRouter as Router, useLocation } from 'react-router-dom';
import axios from 'axios';
import Submission from './Submission';

// Mock modules
jest.mock('axios');
jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useNavigate: () => jest.fn(),
  useLocation: jest.fn(),
}));

jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn().mockReturnValue('en'),
    getParameterByName: jest.fn().mockReturnValue('3264')
  }
}));

// Mock store
const createMockStore = (customState = {}) => {
  return configureStore({
    reducer: (state = {
      preApproval: {
        formConfigmetaData: {}
      },
      stages: {
        stages: [{
          stageInfo: {
            products: [{
              product_category: 'CC',
              product_type: '1241',
              campaign: 'HKSJG20VAWC000',
              offer_details: [{ offer_status: '1001' }]
            }],
            application: {
              application_reference: 'TEST123',
              channel_reference: 'REF123'
            },
            applicants: [{
              casaSegment: 'N',
              asiaMilesCard: 'N',
              aof_doc_id: 'DOC123'
            }]
          }
        }]
      },
      ...customState
    }) => state
  });
};

describe('Submission Component', () => {
  beforeEach(() => {
    (useLocation as jest.Mock).mockReturnValue({
      pathname: '/hk/cc'
    });
    
    (axios.get as jest.Mock).mockResolvedValue({
      status: 200,
      data: new ArrayBuffer(8)
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('1. Renders the main thank you message', () => {
    const store = createMockStore();
    render(
      <Provider store={store}>
        <Router>
          <Submission />
        </Router>
      </Provider>
    );
    
    expect(screen.getByText(/Thank you for your application/i)).toBeInTheDocument();
  });

  it('2. Displays the correct reference number from store', () => {
    const store = createMockStore();
    render(
      <Provider store={store}>
        <Router>
          <Submission />
        </Router>
      </Provider>
    );
    
    expect(screen.getByText(/Reference number:/i)).toBeInTheDocument();
    expect(screen.getByText(/REF123/i)).toBeInTheDocument();
  });

  it('3. Shows the correct card image based on product type', () => {
    const store = createMockStore();
    render(
      <Provider store={store}>
        <Router>
          <Submission />
        </Router>
      </Provider>
    );
    
    const cardImages = screen.getAllByRole('img');
    expect(cardImages.length).toBeGreaterThan(0);
  });

  it('4. Successfully triggers AOF download when button clicked', async () => {
    const store = createMockStore();
    render(
      <Provider store={store}>
        <Router>
          <Submission />
        </Router>
      </Provider>
    );
    
    const downloadButton = screen.getByText(/Save your application/i);
    await act(async () => {
      fireEvent.click(downloadButton);
    });
    
    expect(axios.get).toHaveBeenCalled();
  });

  it('5. Shows PL success screen when product is PL', () => {
    const store = createMockStore({
      stages: {
        stages: [{
          stageInfo: {
            products: [{
              product_category: 'PL',
              product_type: '1241',
              offer_details: [{ offer_status: '1001' }]
            }],
            application: {
              application_reference: 'TEST123',
              channel_reference: 'REF123'
            },
            applicants: [{}]
          }
        }]
      }
    });
    
    render(
      <Provider store={store}>
        <Router>
          <Submission />
        </Router>
      </Provider>
    );
    
    expect(screen.getByText(/We will notify you once your application is approved/i)).toBeInTheDocument();
  });

  it('6. Shows FFD submission when path is /hk/ffd-casa and casaSegment is Y', () => {
    (useLocation as jest.Mock).mockReturnValue({
      pathname: '/hk/ffd-casa'
    });
    
    const store = createMockStore({
      stages: {
        stages: [{
          stageInfo: {
            products: [{
              product_category: 'CC',
              product_type: '1241'
            }],
            application: {
              application_reference: 'TEST123'
            },
            applicants: [{
              casaSegment: 'Y'
            }]
          }
        }]
      }
    });
    
    render(
      <Provider store={store}>
        <Router>
          <Submission />
        </Router>
      </Provider>
    );
    
    expect(screen.getByText(/Thank you for your application/i)).toBeInTheDocument();
  });

  it('7. Displays survey link for Asia Miles card', () => {
    const store = createMockStore({
      stages: {
        stages: [{
          stageInfo: {
            products: [{
              product_category: 'CC',
              product_type: '1313',
              campaign: 'HKSOZ01MCWB000'
            }],
            application: {
              application_reference: 'TEST123'
            },
            applicants: [{
              casaSegment: 'N',
              asiaMilesCard: 'Y'
            }]
          }
        }]
      }
    });
    
    render(
      <Provider store={store}>
        <Router>
          <Submission />
        </Router>
      </Provider>
    );
    
    expect(screen.getByText(/We'd like your feedback!/i)).toBeInTheDocument();
  });

  it('8. Handles PDF download error gracefully', async () => {
    (axios.get as jest.Mock).mockRejectedValue(new Error('Download failed'));
    
    const store = createMockStore();
    render(
      <Provider store={store}>
        <Router>
          <Submission />
        </Router>
      </Provider>
    );
    
    const downloadButton = screen.getByText(/Save your application/i);
    await act(async () => {
      fireEvent.click(downloadButton);
    });
    
    expect(axios.get).toHaveBeenCalled();
  });

  it('9. Shows correct content for Chinese language', () => {
    // Mock Chinese language
    jest.spyOn(require('../../../utils/common/change.utils').getUrl, 'getLanguageInfo')
      .mockReturnValue('zh');
    
    const store = createMockStore();
    render(
      <Provider store={store}>
        <Router>
          <Submission />
        </Router>
      </Provider>
    );
    
    // This is just an example - adjust based on your actual Chinese content
    expect(screen.getByText(/Thank you for your application/i)).toBeInTheDocument();
  });

  it('10. Displays correct card for SimplyCash vertical', () => {
    jest.spyOn(require('../../../utils/common/change.utils').getUrl, 'getParameterByName')
      .mockReturnValue('3265');
    
    const store = createMockStore();
    render(
      <Provider store={store}>
        <Router>
          <Submission />
        </Router>
      </Provider>
    );
    
    const cardImages = screen.getAllByRole('img');
    expect(cardImages.length).toBeGreaterThan(0);
  });
});
