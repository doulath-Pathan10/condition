import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import ColorIdentityProof from './colour-Identity-Proof';

// Mock entire modules
jest.mock('../carousel/carousel', () => {
  return function MockCarousel() {
    return <div data-testid="mock-carousel">Mocked Carousel</div>;
  };
});

jest.mock('../zoloz/zoloz', () => {
  return function MockZoloz({ setHKIDVersion }: any) {
    return <div data-testid="mock-zoloz">Mocked Zoloz</div>;
  };
});

// Mock utility modules
jest.mock('../../../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn(() => 'EN')
  }
}));

jest.mock('../../../../../utils/common/constants', () => ({
  CONSTANTS: {
    LANG_EN: 'EN',
    LANG_CN: 'CN',
    LANG_HK: 'HK',
    headerTextDoc: 'Header Text',
    headerNote: 'Header Note',
    radioBtnText: 'Radio Button Text',
    back: 'Back',
    continue: 'Continue',
    hknotes: 'HK Notes',
    scbHkCopyRights_EN: 'SCB HK Copyrights'
  }
}));

// Create a mock reducer
const createMockReducer = (initialState: any) => {
  return (state = initialState, action: any) => {
    switch (action.type) {
      case 'UPDATE_SHOW_QR_CODE_PAGE':
        return {
          ...state,
          stages: {
            ...state.stages,
            dynamicDocumentsUpload: {
              ...state.stages.dynamicDocumentsUpload,
              showQRCodePage: action.payload
            }
          }
        };
      default:
        return state;
    }
  };
};

describe('ColorIdentityProof Component Comprehensive Tests', () => {
  let store: any;
  const mockCallQRCodeAPI = jest.fn();
  const mockSetHKIDVersion = jest.fn();

  beforeEach(() => {
    // Create initial state
    const initialState = {
      stages: {
        dynamicDocumentsUpload: {
          showQRCodePage: false
        }
      }
    };

    // Create store with mock reducer
    store = createStore(createMockReducer(initialState));

    // Reset mocks
    mockCallQRCodeAPI.mockClear();
    mockSetHKIDVersion.mockClear();
  });

  const renderComponent = (props: any = {}) => {
    return render(
      <Provider store={store}>
        <ColorIdentityProof
          callQRCodeAPI={mockCallQRCodeAPI}
          HKIDVersion=""
          setHKIDVersion={mockSetHKIDVersion}
          {...props}
        />
      </Provider>
    );
  };

  // Test initial rendering
  test('renders component initial state correctly', () => {
    renderComponent();

    // Check for key elements
    expect(screen.getByText(/Smart HKID/i)).toBeInTheDocument();
    expect(screen.getByText(/New Smart HKID/i)).toBeInTheDocument();
    expect(screen.getByTestId('mock-carousel')).toBeInTheDocument();
  });

  // Test radio button selection
  test('selects HKID version and enables continue button', () => {
    renderComponent();

    // Find and click radio button
    const smartHKIDRadio = screen.getByLabelText(/Smart HKID/i);
    fireEvent.click(smartHKIDRadio);

    // Check continue button is enabled
    const continueButton = screen.getByRole('button', { name: /continue/i });
    expect(continueButton).not.toBeDisabled();
  });

  // Test continue button functionality
  test('continue button triggers QR code flow', () => {
    renderComponent();

    // Select HKID version
    const smartHKIDRadio = screen.getByLabelText(/Smart HKID/i);
    fireEvent.click(smartHKIDRadio);

    // Click continue button
    const continueButton = screen.getByRole('button', { name: /continue/i });
    fireEvent.click(continueButton);

    // Verify API call and version reset
    expect(mockCallQRCodeAPI).toHaveBeenCalled();
    expect(mockSetHKIDVersion).toHaveBeenCalledWith('');
  });

  // Test back button functionality
  test('back button resets state', () => {
    renderComponent();

    // Click back button
    const backButton = screen.getByRole('button', { name: /back/i });
    fireEvent.click(backButton);

    // Verify state reset
    expect(mockSetHKIDVersion).toHaveBeenCalledWith('');
  });

  // Test QR code page rendering
  test('renders Zoloz component when QR code page is shown', () => {
    // Update store state to show QR code page
    store.dispatch({ 
      type: 'UPDATE_SHOW_QR_CODE_PAGE', 
      payload: true 
    });

    renderComponent();

    // Check Zoloz component is rendered
    expect(screen.getByTestId('mock-zoloz')).toBeInTheDocument();
  });

  // Multilanguage support test
  describe('Language Support', () => {
    const languageTestCases = [
      { 
        lang: 'CN', 
        expectedTexts: ['智能身份證', '新智能身份證'] 
      },
      { 
        lang: 'HK', 
        expectedTexts: ['智能身份證', '新智能身份證'] 
      }
    ];

    languageTestCases.forEach(({ lang, expectedTexts }) => {
      test(`renders correct text for ${lang} language`, () => {
        // Mock language utility
        jest.spyOn(require('../../../../../utils/common/change.utils').getUrl, 'getLanguageInfo')
          .mockReturnValue(lang);

        renderComponent();

        // Check for language-specific texts
        expectedTexts.forEach(text => {
          expect(screen.getByText(text)).toBeInTheDocument();
        });
      });
    });
  });

  // Accessibility and interaction tests
  test('radio buttons support keyboard interaction', () => {
    renderComponent();

    const smartHKIDRadio = screen.getByLabelText(/Smart HKID/i);
    
    // Simulate keyboard selection
    fireEvent.keyDown(smartHKIDRadio, { key: 'Enter', code: 'Enter' });
    fireEvent.click(smartHKIDRadio);

    // Verify radio button becomes checked
    expect(smartHKIDRadio).toBeChecked();
  });

  // Error boundary and edge case tests
  test('handles empty HKID version correctly', () => {
    renderComponent();

    // Continue button should be disabled
    const continueButton = screen.getByRole('button', { name: /continue/i });
    expect(continueButton).toBeDisabled();
  });
});
