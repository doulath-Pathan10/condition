import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Close from './Close';
import { CONSTANTS } from '../../../utils/common/constants';

const mockStore = configureStore([]);

describe('Close Component', () => {
  let store: any;
  const mockProps = {
    // Add any props your component might need
  };

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [{ stageId: 'ad-1', stageInfo: { applicants: [{}] } }],
        userInput: { applicants: [{}] },
        journeyType: 'application'
      },
      lov: { lov: [] },
      valueUpdate: {},
      error: {},
      preApproval: {}
    });
    
    // Mock window.location.href
    delete window.location;
    window.location = { href: '' } as any;
  });

  test('renders without crashing', () => {
    render(
      <Provider store={store}>
        <Close {...mockProps} />
      </Provider>
    );
    expect(screen.getByTestId('logout-button')).toBeInTheDocument();
  });

  test('opens popup when clicked', () => {
    render(
      <Provider store={store}>
        <Close {...mockProps} />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    expect(screen.getByText(/Do you want to exit/)).toBeInTheDocument();
  });

  test('displays correct text in English', () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        ...store.getState().stages,
        stages: [{ stageId: 'pd-1', stageInfo: { applicants: [{}] } }]
      }
    });
    
    render(
      <Provider store={store}>
        <Close {...mockProps} />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    expect(screen.getByText('Back to Home')).toBeInTheDocument();
    expect(screen.getByText('Do you want to exit the application? Your current progress will be lost.')).toBeInTheDocument();
  });

  test('displays "Yes, Exit" button for pd-1 stage', () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        ...store.getState().stages,
        stages: [{ stageId: 'pd-1', stageInfo: { applicants: [{}] } }]
      }
    });
    
    render(
      <Provider store={store}>
        <Close {...mockProps} />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    expect(screen.getByText('Yes, Exit')).toBeInTheDocument();
  });

  test('displays "Save & Exit" button for non-pd-1 stages', () => {
    render(
      <Provider store={store}>
        <Close {...mockProps} />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    expect(screen.getByText('Save & Exit')).toBeInTheDocument();
  });

  test('closes popup when Cancel button is clicked', () => {
    render(
      <Provider store={store}>
        <Close {...mockProps} />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    fireEvent.click(screen.getByTestId('otpExit-close-popup'));
    expect(screen.queryByText('Do you want to exit')).not.toBeInTheDocument();
  });

  test('calls homePage when "Yes, Exit" is clicked', () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        ...store.getState().stages,
        stages: [{ stageId: 'pd-1', stageInfo: { applicants: [{}] } }]
      }
    });
    
    render(
      <Provider store={store}>
        <Close {...mockProps} />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    fireEvent.click(screen.getByText('Yes, Exit'));
    expect(window.location.href).toBe(process.env.REACT_APP_HOME_PAGE_URL);
  });

  test('calls withSaveAndExit when "Save & Exit" is clicked', () => {
    // Mock the postPeserveData function
    const mockPostPeserveData = jest.fn().mockResolvedValue({
      status: 200,
      data: {
        application: {
          response_type: "info",
          response_action: "continue"
        },
        applicants: {}
      }
    });
    
    jest.mock('../../../modules/preApproval/services/preApprovalPostServices', () => ({
      postPeserveData: mockPostPeserveData
    }));
    
    render(
      <Provider store={store}>
        <Close {...mockProps} />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    fireEvent.click(screen.getByText('Save & Exit'));
    
    // You might need to make this test async and wait for the promise to resolve
    expect(mockPostPeserveData).toHaveBeenCalled();
  });

  test('handles error in withSaveAndExit', async () => {
    const mockPostPeserveData = jest.fn().mockRejectedValue(new Error('API error'));
    jest.mock('../../../modules/preApproval/services/preApprovalPostServices', () => ({
      postPeserveData: mockPostPeserveData
    }));
    
    render(
      <Provider store={store}>
        <Close {...mockProps} />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    fireEvent.click(screen.getByText('Save & Exit'));
    
    // Check if error action was dispatched
    const actions = store.getActions();
    expect(actions.some((action: any) => action.type === 'error/getError')).toBeTruthy();
  });

  test('does not render in ad-9 stage', () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        ...store.getState().stages,
        stages: [{ stageId: 'ad-9', stageInfo: { applicants: [{}] } }]
      }
    });
    
    render(
      <Provider store={store}>
        <Close {...mockProps} />
      </Provider>
    );
    
    expect(screen.queryByTestId('logout-button')).not.toBeInTheDocument();
  });

  test('displays Chinese text when language is CN', () => {
    // Mock getLanguageInfo to return CN
    jest.mock('../../../utils/common/change.utils', () => ({
      getUrl: {
        getLanguageInfo: jest.fn().mockReturnValue(CONSTANTS.LANG_CN)
      },
      homePage: jest.fn()
    }));
    
    render(
      <Provider store={store}>
        <Close {...mockProps} />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    expect(screen.getByText('返回主页')).toBeInTheDocument();
    expect(screen.getByText('确认停止申请？您将失去当前的申请记录。')).toBeInTheDocument();
  });

  test('displays Hong Kong text when language is HK', () => {
    // Mock getLanguageInfo to return HK
    jest.mock('../../../utils/common/change.utils', () => ({
      getUrl: {
        getLanguageInfo: jest.fn().mockReturnValue(CONSTANTS.LANG_HK)
      },
      homePage: jest.fn()
    }));
    
    render(
      <Provider store={store}>
        <Close {...mockProps} />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    expect(screen.getByText('返回主頁')).toBeInTheDocument();
    expect(screen.getByText('確認停止申請？您將失去當前的申請記錄。')).toBeInTheDocument();
  });
});
