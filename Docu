import React from 'react';
import { render, screen, waitFor, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import Spinner from './Spinner';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import { CONSTANTS } from '../../../utils/common/constants';
import { useNavigate } from 'react-router-dom';

// Mock the react-router-dom
jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useNavigate: jest.fn(),
}));

// Mock the lottie player
jest.mock('@lottiefiles/react-lottie-player', () => ({
  Player: jest.fn(() => <div>Lottie Player Mock</div>),
}));

// Mock the postFulFilmentData function
jest.mock('../../../modules/preApproval/services/preApprovalPostServices', () => ({
  postFulFilmentData: jest.fn(),
}));

// Mock the error and stage actions
jest.mock('../../../utils/store/error-slice');
jest.mock('../../../utils/store/stages-slice');
jest.mock('../../../modules/preApproval/store/preApproval-slice');

describe('Spinner Component', () => {
  const mockStore = configureStore([]);
  const initialState = {
    stages: {
      stages: [
        {
          stageId: CONSTANTS.STAGE_NAMES.FFD_1,
          stageInfo: {
            application: {
              channel_reference: 'test-ref',
            },
          },
        },
      ],
    },
  };
  
  let store: any;
  let navigateMock: jest.Mock;

  beforeEach(() => {
    store = mockStore(initialState);
    navigateMock = jest.fn();
    (useNavigate as jest.Mock).mockReturnValue(navigateMock);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('renders default spinner with lottie animation when no loaderType is provided', () => {
    render(
      <Provider store={store}>
        <Spinner />
      </Provider>
    );
    
    expect(screen.getByText('Lottie Player Mock')).toBeInTheDocument();
    expect(screen.getByTestId('spinner-text')).toBeInTheDocument();
  });

  test('renders showTimmer spinner when loaderType is "showTimmer"', () => {
    render(
      <Provider store={store}>
        <Spinner loaderType="showTimmer" />
      </Provider>
    );
    
    expect(screen.getByText(/Thank you for your application/i)).toBeInTheDocument();
    expect(screen.getByText(/Please do not close or refresh browser/i)).toBeInTheDocument();
  });

  test('renders resumeTimmer spinner when loaderType is "resumeTimmer"', () => {
    render(
      <Provider store={store}>
        <Spinner loaderType="resumeTimmer" />
      </Provider>
    );
    
    expect(screen.getByText(/Resume application/i)).toBeInTheDocument();
  });

  test('renders showSearchSpinner when loaderType is "showSearchSpinner"', () => {
    render(
      <Provider store={store}>
        <Spinner loaderType="showSearchSpinner" />
      </Provider>
    );
    
    expect(screen.getByText(/We are reviewing your application submission/i)).toBeInTheDocument();
  });

  test('renders lastStep spinner when loaderType is "lastStep"', () => {
    render(
      <Provider store={store}>
        <Spinner loaderType="lastStep" enable={true} />
      </Provider>
    );
    
    expect(screen.getByText(/You're at the last step!/i)).toBeInTheDocument();
    expect(screen.getByText(/See final approval result/i)).toBeInTheDocument();
  });

  test('calls getFFD2Status when button is clicked in lastStep spinner', async () => {
    const mockPostResponse = {
      status: 200,
      data: {
        application: {
          response_type: 'INFO',
          response_action: 'SUCCESS'
        },
        applicants: {}
      }
    };
    
    require('../../../modules/preApproval/services/preApprovalPostServices').postFulFilmentData.mockResolvedValue(mockPostResponse);
    
    render(
      <Provider store={store}>
        <Spinner loaderType="lastStep" enable={true} />
      </Provider>
    );
    
    const button = screen.getByText(/See final approval result/i);
    fireEvent.click(button);
    
    await waitFor(() => {
      expect(require('../../../modules/preApproval/services/preApprovalPostServices').postFulFilmentData).toHaveBeenCalled();
    });
  });

  test('handles error in getFFD2Status', async () => {
    require('../../../modules/preApproval/services/preApprovalPostServices').postFulFilmentData.mockRejectedValue(new Error('API Error'));
    
    render(
      <Provider store={store}>
        <Spinner loaderType="lastStep" enable={true} />
      </Provider>
    );
    
    const button = screen.getByText(/See final approval result/i);
    fireEvent.click(button);
    
    await waitFor(() => {
      expect(require('../../../utils/store/error-slice').errorAction.getError).toHaveBeenCalled();
    });
  });

  test('displays different text based on stageId', () => {
    const customStore = mockStore({
      stages: {
        stages: [
          {
            stageId: CONSTANTS.STAGE_NAMES.ACD_1,
            stageInfo: {
              application: {
                channel_reference: 'test-ref',
              },
            },
          },
        ],
      },
    });
    
    render(
      <Provider store={customStore}>
        <Spinner />
      </Provider>
    );
    
    // Should show processing3 text since stageId is ACD_1
    expect(screen.getByTestId('spinner-text')).toHaveTextContent(/We are checking your eligibility/i);
  });

  test('displays different language text based on language setting', () => {
    // Mock getLanguageInfo to return CN
    jest.spyOn(require('../../../utils/common/change.utils').getUrl, 'getLanguageInfo').mockReturnValue(CONSTANTS.LANG_CN);
    
    render(
      <Provider store={store}>
        <Spinner loaderType="showTimmer" />
      </Provider>
    );
    
    expect(screen.getByText(/感謝您的申請！我們正在查閱您的資料/i)).toBeInTheDocument();
  });

  test('disables button when enable prop is false in lastStep spinner', () => {
    render(
      <Provider store={store}>
        <Spinner loaderType="lastStep" enable={false} />
      </Provider>
    );
    
    const button = screen.getByText(/See final approval result/i);
    expect(button).toBeDisabled();
    expect(button).toHaveClass('bg-grey');
  });
});
