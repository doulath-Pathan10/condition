import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import DocumentUpload from './DocumentUpload';
import '@testing-library/jest-dom';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import { StoreModel } from '../../../../../utils/model/common-model';
import { postDocuments } from '../../../services/preApprovalPostServices';
import { dispatchLoader } from '../../../../../services/common-service';

// Mock all external dependencies
jest.mock('../../../services/preApprovalPostServices', () => ({
  postDocuments: jest.fn()
}));

jest.mock('../../../../../services/common-service', () => ({
  dispatchLoader: jest.fn()
}));

jest.mock('../modals/tipsModal/tips-modal', () => () => <div>Tips Modal</div>);
jest.mock('../../../../../shared/components/popup-model/popup-model', () => ({ children }: any) => <div>{children}</div>);
jest.mock('../modals/imagePreviewModal/image-preview-modal', () => () => <div>Image Preview Modal</div>);
jest.mock('../../../alertModal/alert-modal', () => ({ alertType, goBack }: any) => (
  <div onClick={goBack}>{alertType} Alert</div>
));

// Mock URL.createObjectURL
global.URL.createObjectURL = jest.fn(() => 'mock-url');

const mockStore = configureMockStore();
const initialState = {
  stages: {
    stages: [{
      stageInfo: {
        application: { channel_reference: 'TEST123' },
        applicant_documents: [{
          document_list: [
            {
              document_category: 'ID Proof',
              document_options: [{
                document_types: [{
                  uploaded_documents: []
                }]
              }]
            }
          ]
        }]
      }
    }],
    dynamicDocumentsUpload: {
      documentCount: 0,
      fileSectionData: { document_category: 'ID Proof' },
      uploadedDocuments: []
    }
  },
  error: {
    error: null
  }
};

describe('DocumentUpload Component', () => {
  let store: any;
  const mockSetShowContinueBtn = jest.fn();
  
  beforeEach(() => {
    store = mockStore(initialState);
    jest.clearAllMocks();
  });

  it('should render the component with initial state', () => {
    render(
      <Provider store={store}>
        <DocumentUpload setShowContinueBtn={mockSetShowContinueBtn} />
      </Provider>
    );
    
    expect(screen.getByText('Upload')).toBeInTheDocument();
    expect(screen.getByText('Back')).toBeInTheDocument();
    expect(screen.getByText('Continue')).toBeDisabled();
    expect(screen.getByText(/File format should be in JPG or PNG/)).toBeInTheDocument();
    expect(screen.getByText('Â© Standard Chartered Bank (HK) Limited')).toBeInTheDocument();
  });

  it('should open tips modal when "here" is clicked', () => {
    render(
      <Provider store={store}>
        <DocumentUpload setShowContinueBtn={mockSetShowContinueBtn} />
      </Provider>
    );
    
    fireEvent.click(screen.getByText('here'));
    expect(screen.getByText('Tips Modal')).toBeInTheDocument();
  });

  it('should handle file upload successfully', async () => {
    const mockFile = new File(['test'], 'test.png', { type: 'image/png' });
    const mockResponse = {
      status: 200,
      data: { docId: '123', documentStatus: 'UPLOADED' }
    };
    
    (postDocuments as jest.Mock).mockResolvedValue(mockResponse);
    
    render(
      <Provider store={store}>
        <DocumentUpload setShowContinueBtn={mockSetShowContinueBtn} />
      </Provider>
    );
    
    const input = screen.getByTestId('file-upload');
    fireEvent.change(input, { target: { files: [mockFile] } });
    
    await waitFor(() => {
      expect(dispatchLoader).toHaveBeenCalledWith(true);
      expect(postDocuments).toHaveBeenCalledWith('TEST123', mockFile);
      expect(dispatchLoader).toHaveBeenCalledWith(false);
      expect(screen.getByText('test.png')).toBeInTheDocument();
      expect(screen.getByText('Upload completed !')).toBeInTheDocument();
      expect(screen.getByText('Continue')).toBeEnabled();
    });
  });

  it('should show error modal when file size exceeds limit', async () => {
    const largeFile = new File(['test'], 'large.png', { type: 'image/png' });
    Object.defineProperty(largeFile, 'size', { value: 6 * 1024 * 1024 });
    
    render(
      <Provider store={store}>
        <DocumentUpload setShowContinueBtn={mockSetShowContinueBtn} />
      </Provider>
    );
    
    const input = screen.getByTestId('file-upload');
    fireEvent.change(input, { target: { files: [largeFile] } });
    
    expect(screen.getByText('invalideimagesize Alert')).toBeInTheDocument();
    expect(postDocuments).not.toHaveBeenCalled();
  });

  it('should handle file delete', async () => {
    const mockFile = new File(['test'], 'test.png', { type: 'image/png' });
    const mockResponse = {
      status: 200,
      data: { docId: '123', documentStatus: 'UPLOADED' }
    };
    
    (postDocuments as jest.Mock).mockResolvedValue(mockResponse);
    
    render(
      <Provider store={store}>
        <DocumentUpload setShowContinueBtn={mockSetShowContinueBtn} />
      </Provider>
    );
    
    const input = screen.getByTestId('file-upload');
    fireEvent.change(input, { target: { files: [mockFile] } });
    
    await waitFor(() => {
      fireEvent.click(screen.getByTestId('delete-btn'));
      expect(screen.queryByText('test.png')).not.toBeInTheDocument();
      expect(screen.getByText('Continue')).toBeDisabled();
    });
  });

  it('should open image preview when image is clicked', async () => {
    const mockFile = new File(['test'], 'test.png', { type: 'image/png' });
    const mockResponse = {
      status: 200,
      data: { docId: '123', documentStatus: 'UPLOADED' }
    };
    
    (postDocuments as jest.Mock).mockResolvedValue(mockResponse);
    
    render(
      <Provider store={store}>
        <DocumentUpload setShowContinueBtn={mockSetShowContinueBtn} />
      </Provider>
    );
    
    const input = screen.getByTestId('file-upload');
    fireEvent.change(input, { target: { files: [mockFile] } });
    
    await waitFor(() => {
      fireEvent.click(screen.getByTestId('image-preview-id'));
      expect(screen.getByText('Image Preview Modal')).toBeInTheDocument();
    });
  });

  it('should handle continue button click', async () => {
    const mockFile = new File(['test'], 'test.png', { type: 'image/png' });
    const mockResponse = {
      status: 200,
      data: { docId: '123', documentStatus: 'UPLOADED' }
    };
    
    (postDocuments as jest.Mock).mockResolvedValue(mockResponse);
    
    render(
      <Provider store={store}>
        <DocumentUpload setShowContinueBtn={mockSetShowContinueBtn} />
      </Provider>
    );
    
    const input = screen.getByTestId('file-upload');
    fireEvent.change(input, { target: { files: [mockFile] } });
    
    await waitFor(() => {
      fireEvent.click(screen.getByText('Continue'));
      expect(mockSetShowContinueBtn).toHaveBeenCalledWith(false);
      const actions = store.getActions();
      expect(actions).toEqual(
        expect.arrayContaining([
          expect.objectContaining({ type: 'stages/updateDocumentCount' }),
          expect.objectContaining({ type: 'stages/updatefileSectionData' }),
          expect.objectContaining({ type: 'stages/getStage' })
        ])
      );
    });
  });

  it('should handle back button click', () => {
    render(
      <Provider store={store}>
        <DocumentUpload setShowContinueBtn={mockSetShowContinueBtn} />
      </Provider>
    );
    
    fireEvent.click(screen.getByText('Back'));
    const actions = store.getActions();
    expect(actions).toEqual(
      expect.arrayContaining([
        expect.objectContaining({ type: 'stages/updatefileSectionData' })
      ])
    );
  });

  it('should show success modal when document upload is successful', async () => {
    const mockFile = new File(['test'], 'test.png', { type: 'image/png' });
    const mockResponse = {
      status: 200,
      data: { docId: '123', documentStatus: 'UPLOADED' }
    };
    
    (postDocuments as jest.Mock).mockResolvedValue(mockResponse);
    
    render(
      <Provider store={store}>
        <DocumentUpload setShowContinueBtn={mockSetShowContinueBtn} />
      </Provider>
    );
    
    const input = screen.getByTestId('file-upload');
    fireEvent.change(input, { target: { files: [mockFile] } });
    
    await waitFor(() => {
      fireEvent.click(screen.getByText('Continue'));
      expect(screen.getByText('Success Alert')).toBeInTheDocument();
    });
  });

  it('should handle upload failure', async () => {
    const mockFile = new File(['test'], 'test.png', { type: 'image/png' });
    const mockError = new Error('Upload failed');
    
    (postDocuments as jest.Mock).mockRejectedValue(mockError);
    
    render(
      <Provider store={store}>
        <DocumentUpload setShowContinueBtn={mockSetShowContinueBtn} />
      </Provider>
    );
    
    const input = screen.getByTestId('file-upload');
    fireEvent.change(input, { target: { files: [mockFile] } });
    
    await waitFor(() => {
      expect(dispatchLoader).toHaveBeenCalledWith(false);
      const actions = store.getActions();
      expect(actions).toEqual(
        expect.arrayContaining([
          expect.objectContaining({ 
            type: 'error/getError',
            payload: {
              statusCode: "error",
              statusText: "no response",
            }
          })
        ])
      );
    });
  });
});
