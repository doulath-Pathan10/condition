import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import Zoloz from './Zoloz';
import axios from 'axios';
import { CONSTANTS } from '../../../../../utils/common/constants';

// Mock axios
jest.mock('axios');
const mockedAxios = axios as jest.Mocked<typeof axios>;

// Mock react-redux hooks
jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

// Mock other components
jest.mock('../carousel/carousel', () => () => <div>Carousel Mock</div>);
jest.mock('../../../../../shared/components/popup-model/popup-model', () => ({ children, displayPopup }: any) => 
  displayPopup ? <div>{children}</div> : null);
jest.mock('../../../alertModal/alert-modal', () => ({ alertType, goBack }: any) => 
  <div onClick={goBack}>{alertType} Alert</div>);
jest.mock('../modals/imagePreviewModal/image-preview-modal', () => ({ imgeURL, name, imagePreview, setImagePreview }: any) => 
  imagePreview ? <div>{name} Preview</div> : null);

const mockStore = configureStore([thunk]);

describe('Zoloz Component', () => {
  let store: any;
  const mockDispatch = jest.fn();
  const mockSetHKIDVersion = jest.fn();
  
  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [{
          stageInfo: {
            application: { channel_reference: 'test123' },
            applicant_documents: [{
              document_list: [{
                document_category: 'R0001',
                document_options: [{
                  document_types: [{
                    uploaded_documents: []
                  }]
                }]
              }]
            }]
          }
        }],
        dynamicDocumentsUpload: {
          showUploadFileSuccess: false,
          HKIDQRCodeData: { qrCode: 'testQRCode', transactionId: 'trans123' },
          HKIDVersionValue: 'A001',
          fileSectionData: { document_category: 'R0001' },
          documentCount: 0
        }
      },
      preApproval: {
        documentZoloCheckRes: [{
          docId: 'doc123',
          documentName: 'testDoc.png',
          documentCategoryCode: 'R0001',
          documentTypeCode: 'A001'
        }],
        imgPrevURL: 'testImageUrl'
      }
    });
    
    (useSelector as jest.Mock).mockImplementation((callback) => callback(store.getState()));
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
  });
  
  afterEach(() => {
    jest.clearAllMocks();
  });
  
  it('renders without crashing', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    expect(screen.getByText('CLOSE')).toBeInTheDocument();
    expect(screen.getByText('Colour Identity Proof')).toBeInTheDocument();
  });
  
  it('displays QR code section when showUploadFileSuccess is false', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    expect(screen.getByText('Carousel Mock')).toBeInTheDocument();
    expect(screen.getByText('Submit')).toBeInTheDocument();
  });
  
  it('displays uploaded document section when showUploadFileSuccess is true', () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        ...store.getState().stages,
        dynamicDocumentsUpload: {
          ...store.getState().stages.dynamicDocumentsUpload,
          showUploadFileSuccess: true
        }
      }
    });
    
    (useSelector as jest.Mock).mockImplementation((callback) => callback(store.getState()));
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    expect(screen.getByText('testDoc.png')).toBeInTheDocument();
    expect(screen.getByText('Upload completed')).toBeInTheDocument();
  });
  
  it('calls closeFileUpload when close button is clicked', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByText('CLOSE'));
    expect(mockDispatch).toHaveBeenCalled();
  });
  
  it('calls callSubmit when submit button is clicked', async () => {
    const mockZoloCheckResponse = {
      status: 200,
      data: {
        documents: [{
          docId: 'doc123',
          documentName: 'testDoc.png',
          documentCategoryCode: 'R0001',
          documentTypeCode: 'A001'
        }]
      }
    };
    
    const mockAcknowledgeResponse = {
      status: 200,
      data: [{ responseStatus: 'Success' }]
    };
    
    const mockImagePreviewResponse = {
      status: 200,
      data: new Blob()
    };
    
    const mockPdfPreviewResponse = {
      status: 200,
      data: {
        statusCode: 'OK',
        documents: []
      }
    };
    
    mockedAxios.post.mockImplementation((url) => {
      if (url.includes('zoloz-check')) return Promise.resolve(mockZoloCheckResponse);
      if (url.includes('acknowledge')) return Promise.resolve(mockAcknowledgeResponse);
      if (url.includes('image-preview')) return Promise.resolve(mockImagePreviewResponse);
      if (url.includes('pdf-preview')) return Promise.resolve(mockPdfPreviewResponse);
      return Promise.reject(new Error('API not mocked'));
    });
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByText('Submit'));
    
    await waitFor(() => {
      expect(mockedAxios.post).toHaveBeenCalledWith(expect.stringContaining('zoloz-check'), expect.anything());
      expect(mockDispatch).toHaveBeenCalledWith(expect.objectContaining({ type: 'LOADER/SET_LOADER' }));
    });
  });
  
  it('shows error popup when zoloz check fails', async () => {
    const mockZoloCheckResponse = {
      status: 200,
      data: { documents: [] } // Empty documents array triggers error
    };
    
    mockedAxios.post.mockResolvedValueOnce(mockZoloCheckResponse);
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByText('Submit'));
    
    await waitFor(() => {
      expect(screen.getByText('zoloError Alert')).toBeInTheDocument();
    });
  });
  
  it('handles API errors gracefully', async () => {
    mockedAxios.post.mockRejectedValueOnce(new Error('API Error'));
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByText('Submit'));
    
    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalledWith(expect.objectContaining({ type: 'ERROR/GET_ERROR' }));
    });
  });
  
  it('calls callQRCodeAPI when error popup is closed', async () => {
    const mockQRCodeResponse = {
      status: 200,
      data: { qrCode: 'newQRCode' }
    };
    
    mockedAxios.post.mockResolvedValueOnce({ data: { documents: [] } }); // Trigger error
    mockedAxios.post.mockResolvedValueOnce(mockQRCodeResponse); // For QR code API
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByText('Submit'));
    
    await waitFor(() => {
      fireEvent.click(screen.getByText('zoloError Alert'));
      expect(mockedAxios.post).toHaveBeenCalledWith(expect.stringContaining('qrcode'), expect.anything());
    });
  });
  
  it('opens image preview when uploaded image is clicked', () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        ...store.getState().stages,
        dynamicDocumentsUpload: {
          ...store.getState().stages.dynamicDocumentsUpload,
          showUploadFileSuccess: true
        }
      }
    });
    
    (useSelector as jest.Mock).mockImplementation((callback) => callback(store.getState()));
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByTitle('image-preview'));
    expect(screen.getByText('testDoc.png Preview')).toBeInTheDocument();
  });
  
  it('updates state when continue button is clicked', () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        ...store.getState().stages,
        dynamicDocumentsUpload: {
          ...store.getState().stages.dynamicDocumentsUpload,
          showUploadFileSuccess: true
        }
      }
    });
    
    (useSelector as jest.Mock).mockImplementation((callback) => callback(store.getState()));
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    fireEvent.click(screen.getByText('Continue'));
    
    expect(mockDispatch).toHaveBeenCalledWith(expect.objectContaining({
      type: 'STAGES/GET_STAGE',
      payload: expect.objectContaining({ id: CONSTANTS.STAGE_NAMES.DOC_3 })
    }));
    expect(mockSetHKIDVersion).toHaveBeenCalledWith('');
  });
  
  it('disables continue button when showUploadFileSuccess is false', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    expect(screen.getByText('Continue')).toHaveClass('form-invalid');
  });
  
  it('enables continue button when showUploadFileSuccess is true', () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        ...store.getState().stages,
        dynamicDocumentsUpload: {
          ...store.getState().stages.dynamicDocumentsUpload,
          showUploadFileSuccess: true
        }
      }
    });
    
    (useSelector as jest.Mock).mockImplementation((callback) => callback(store.getState()));
    
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    expect(screen.getByText('Continue')).toHaveClass('form-valid');
  });
  
  it('displays copyright text', () => {
    render(
      <Provider store={store}>
        <Zoloz setHKIDVersion={mockSetHKIDVersion} />
      </Provider>
    );
    
    expect(screen.getByText(/Standard Chartered Bank \(HK\) Limited/)).toBeInTheDocument();
  });
});
